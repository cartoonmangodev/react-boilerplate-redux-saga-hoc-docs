{"version":3,"sources":["webpack:///../src/docs/Basic Concepts/3.infinitedata.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,4NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gDADR,gDAGA,iBAAQ,CACN,GAAM,uDADR,wDAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,4IAIL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,woBA0BL,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,2GAIL,iBAAQ,CACN,GAAM,2CADR,4CAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,mEAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sqBA2BL,iBAAQ,CACN,GAAM,8CADR,+CAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,qGAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2tCAoDL,iBAAQ,CACN,GAAM,sEADR,uEAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,iIAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gcAqBL,iBAAQ,CACN,GAAM,4BADR,6BAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8UAgBL,+BAAc,6BAAGA,WAAW,KAAQ,CAChC,KAAQ,6EADE,wB,0NAOlBJ,EAAWK,gBAAiB","file":"component---src-docs-basic-concepts-3-infinitedata-mdx-ec09dff3c9cb88bb09b5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"handling-infinite-data-or-infinite-scrolling\"\n    }}>{`Handling Infinite Data or Infinite Scrolling`}</h1>\n    <h2 {...{\n      \"id\": \"-storing-infinite-data-automatically-by-calling-api\"\n    }}>{`# storing infinite data automatically by calling api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n - Data will be stored automatically in the reducer and also it handles all the states.\n - Such as error,infinte,loader..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true, // By default data will add below\n  },\n  callback: {\n    updateCallback: (storeData: oldData, responseData: newData) => {\n      return { ...oldData, ...newData } || oldData.concat(newData); // It will update  the data in paricular reducer\n    },\n  },\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n - It will append data if already data is array.\n - Other wise it will replace the new data\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-prepend-data-instead-of-appending-data\"\n    }}>{`# Prepend data instead of appending data`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n - It will store the data at the top instead of last\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true, // By default data will add below\n  },\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callbacks-for-handling-success-or-failure\"\n    }}>{`# Callbacks for handling success or failure`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   - Callback are another helper function which handles errors, success, cancel..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nconst responseErrorParser = (data) =>\n  (Array.isArray(data) &&\n    data.reduce((acc, curr) => {\n      const [key, message] = Object.entries(curr)[0];\n      const payloadKey = key.split(\",\")[1];\n      return {\n        ...acc,\n        [payloadKey]: message,\n      };\n    }, {})) ||\n  {};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true, // By default data will add below\n  },\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n  callback: {\n    successCallback: ({ res, data, message, status }) => {\n      // handle toast or call any other api\n    },\n    errorCallback: ({\n      error,\n      errorData: responseErrorParser,\n      message,\n      status,\n      errors,\n    }) => {\n      // handle toast or call any other api\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-storing-or-updating-infinite-data-by-calling-custom-task\"\n    }}>{`# Manually storing or updating infinite data by calling custom task`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n-Calling custom task will allow us to manipulate data without calling any api..such as adding count,linit,skip..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true, // By default data will add below\n    response: {\n      data: [\n        {\n          name: \"example\",\n        },\n      ],\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-data-from-store\"\n    }}>{`# Getting Data from store`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMemo } from \"react\";\nimport { useQuery } from \"react-boilerplate-redux-saga-hoc\";\nconst {\n  Auth_hoc: {\n    reducerName,\n    reducerConstants: { DEMO_API_CONFIGURATION },\n  },\n} = props;\n\nconst { loader, data, lastUpdated, isInfinite, infiniteEnd } = useQuery(\n  reducerName,\n  DEMO_API_CONFIGURATION\n);\n`}</code></pre>\n    <p>{`Next - `}<a parentName=\"p\" {...{\n        \"href\": \"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/deleting-data\"\n      }}>{`Deleting Data`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}