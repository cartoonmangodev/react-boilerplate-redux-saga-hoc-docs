{"version":3,"sources":["webpack:///../src/docs/Handlers/8.customhandler.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,uNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,mSAML,iBAAQ,CACN,GAAM,kCADR,mCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,kgBAwBL,iBAAQ,CACN,GAAM,+BADR,gCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,uhBAyBL,iBAAQ,CACN,GAAM,qCADR,sCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,0kBAyBL,iBAAQ,CACN,GAAM,+CADR,iDAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,ye,qNAoCTJ,EAAWK,gBAAiB","file":"component---src-docs-handlers-8-customhandler-mdx-f1f68fb2a0402abf3392.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"custom-handler\"\n    }}>{`Custom Handler`}</h1>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n- You are not limited to built-in handlers.\n- With the help of custom handler you can create n number of handlers in you project.\n- You can even share your logic in gitub for other developers to use.\n- It will update existing data or create a new data based on your logic.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-custom-handler-without-filter\"\n    }}>{`# Custom Handler without filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Custom-Handler\",\n    customHandler: ({ task, request, successData, errorData, status }) => ({\n      data = {},\n    } = {}) => {\n      return {\n        data: {\n          comment: \"Hi i added comment in data\",\n        },\n      };\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-custom-handler-with-filter\"\n    }}>{`# Custom Handler with filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Custom-Handler\",\n    customHandler: ({ task, request, successData, errorData, status }) => ({\n      data = {},\n    } = {}) => {\n      return {\n        data: {\n          comment: \"Hi i added comment in data\",\n        },\n      };\n    },\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-custom-handler-with-multi-filter\"\n    }}>{`# Custom Handler with Multi-filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Custom-Handler\",\n    customHandler: ({ task, request, successData, errorData, status }) => ({\n      data = {},\n    } = {}) => {\n      return newObject(data, {\n        data: {\n          comment: \"Hi i added comment in data\",\n        },\n      });\n    },\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-how-to-use-custom-handler-for-all-the-apis\"\n    }}>{`# How to use custom handler for all the api's`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\n\nconst handler = () => () => {};\nconst handler2 = () => () => {};\n\nconst HOC = HocConfigure({\n  handlers: [\n    {\n      name: \"my-own-handler\",\n      handler,\n    },\n    {\n      name: \"my-own-handler-2\",\n      handler: handler2,\n    },\n  ],\n});\nconst AuthHoc = HOC({\n  name: \"Auth\",\n  apiEndPoints: {},\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}