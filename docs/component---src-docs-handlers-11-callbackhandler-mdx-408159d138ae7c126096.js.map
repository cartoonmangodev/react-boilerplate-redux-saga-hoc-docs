{"version":3,"sources":["webpack:///../src/docs/Handlers/11.callbackhandler.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,0NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,iBAAQ,CACN,GAAM,uBADR,wBAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,wKAIL,iBAAQ,CACN,GAAM,oCADR,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,2eAmBL,iBAAQ,CACN,GAAM,iCADR,kCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,ggBAoBL,iBAAQ,CACN,GAAM,+CADR,gDAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,miBAoBL,iBAAQ,CACN,GAAM,oCADR,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,0QAML,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,4tB,wNAkCTJ,EAAWK,gBAAiB","file":"component---src-docs-handlers-11-callbackhandler-mdx-408159d138ae7c126096.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"callback-handler\"\n    }}>{`Callback Handler`}</h1>\n    <h2 {...{\n      \"id\": \"-things-to-remember\"\n    }}>{`# Things to Remember`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` - This handler won't update only data.\n - But it will update loaders,error state, and also toast.\n - This handler will work only on api calls and custom task.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callback-handler-without-filter\"\n    }}>{`# Callback Handler without filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Callback-Handler\",\n    callback: (previousData, successData, rest: {statusCode, ...rest} = {}, status) => ({\n      loading: null,\n      data: status === 200 ? [...previousData, ...successData] : previousData,\n    }),\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callback-handler-with-filter\"\n    }}>{`# Callback Handler with filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Callback-Handler\",\n    callback: (previousData, successData, rest: {statusCode, ...rest} = {}, status) => ({\n      loading: null,\n      data: status === 200 ? [...previousData, ...successData] : previousData,\n    }),\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-dont-update-data-handler-with-multi-filter\"\n    }}>{`# Dont Update Data Handler with Multi-filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Callback Handler\",\n     callback: (previousData, successData, rest: {statusCode, ...rest} = {}, status) => ({\n      loading: null,\n      data: status === 200 ? [...previousData, ...successData] : previousData,\n    }),\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callback-handler-function---api\"\n    }}>{`# Callback Handler Function - Api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import invariant from \"invariant\";\nimport { typeOf } from \"../helpers\";\nconst checkKey = (callback) => {\n  invariant(\n    typeOf(callback) === \"function\",\n    \\`(react-boilerplate-redux-saga-hoc) \\${\n      typeof callback === \"undefined\"\n        ? \"'Callback-Handler' required callback key\"\n        : \"callback is not a function\"\n    }\\`\n  );\n};\nexport const callbackHandler = ({\n  task: { callback } = {},\n  successData = {},\n  successDataStatusCode,\n}) => ({ data: oldData = {}, statusCode, ...rest } = {}) => {\n  checkKey(callback);\n  return callback({\n    oldData: oldData,\n    newData: successData,\n    rest: { ...rest, statusCode },\n    status: statusCode || successDataStatusCode,\n  });\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}