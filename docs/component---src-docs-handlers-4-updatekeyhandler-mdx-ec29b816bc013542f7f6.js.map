{"version":3,"sources":["webpack:///../src/docs/Handlers/4.updatekeyhandler.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0PAMaA,G,UAAe,S,0NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,sBADR,sBAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,2JAGL,iBAAQ,CACN,GAAM,sCADR,uCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,oXAmBL,iBAAQ,CACN,GAAM,mCADR,oCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,yYAoBL,iBAAQ,CACN,GAAM,yCADR,0CAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,2aAoBL,iBAAQ,CACN,GAAM,mCADR,oCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,mEAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,2aAoBL,iBAAQ,CACN,GAAM,sCADR,uCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,iRAML,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,qjJ,wNAqJTJ,EAAWK,gBAAiB","file":"component---src-docs-handlers-4-updatekeyhandler-mdx-ec29b816bc013542f7f6.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"update-key-handler\"\n    }}>{`Update Key Handler`}</h1>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  - Update Key handler is slightly different from update handler, but it will update only particular key in an object or an array of object\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-key-handler-without-filter\"\n    }}>{`# Update Key Handler without filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    updateKey: [\"age\"],\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-key-handler-with-filter\"\n    }}>{`# Update Key Handler with filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    updateKey: [\"age\"],\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-key-handler-with-multi-filter\"\n    }}>{`# Update Key Handler with Multi-filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    updateKey: [\"age\"],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-key-handler-with-subkey\"\n    }}>{`# Update Key Handler with Subkey`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n- sub key for handling sub level of data in an object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    updateKey: [\"age\"],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-key-handler-function---api\"\n    }}>{`# Update Key Handler Function - Api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`    Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst updateData = (data, successData, updateCallback, updateKey) => {\n  if (updateCallback) return updateCallback(data, successData) || data;\n  if (\n    typeof successData === \"object\" &&\n    !Array.isArray(successData) &&\n    typeof data === \"object\" &&\n    !Array.isArray(data)\n  ) {\n    return !updateKey\n      ? data\n      : updateKey.reduce((acc, key) => {\n          if (Array.isArray(key) && key.length > 0) {\n            return updateIn(acc, key, (_data) =>\n              Safe(successData, \\`.\\${key.join(\".\")}\\`)\n            );\n          }\n          return {\n            ...acc,\n            [key]: successData[key],\n          };\n        }, data);\n  }\n  return successData;\n};\n\nexport const updateKeyHandler = ({\n  task: { key, id, subKey = [], values = {}, updateKey = [] } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data = [] } = {}) => ({\n  data:\n    subKey.length > 0\n      ? updateIn(\n          {\n            ...data,\n            ...successData,\n            [subKey[0]]: data[subKey[0]],\n          },\n          subKey,\n          (_Data) =>\n            (() => {\n              let index = -1;\n              const _values = Array.isArray(values);\n              /**  update data if old data is object */\n              if (!Array.isArray(_Data))\n                return updateData(\n                  _Data,\n                  Safe(successData, \\`.\\${subKey.join(\".\")}\\`),\n                  updateCallback,\n                  updateKey\n                );\n              else if (Array.isArray(id) && key && Array.isArray(_Data))\n                return _Data.reduce(\n                  (acc, curr = {}) =>\n                    id.includes(curr[key])\n                      ? (() => {\n                          index = index + 1;\n                          return acc.concat([\n                            updateData(\n                              curr,\n                              values[_values ? index : curr[key]] || curr,\n                              updateCallback,\n                              updateKey\n                            ),\n                          ]);\n                        })()\n                      : acc.concat([curr]),\n                  []\n                );\n              else if ((id === 0 || id) && key)\n                return _Data.map((_data) =>\n                  _data[key] === id\n                    ? (() => {\n                        index = index + 1;\n                        return updateData(\n                          _data,\n                          values[_values ? index : curr[key]] || _data,\n                          updateCallback,\n                          updateKey\n                        );\n                      })()\n                    : _data\n                );\n              return updateData(\n                _Data,\n                Safe(successData, \\`.\\${subKey.join(\".\")}\\`),\n                updateCallback,\n                updateKey\n              );\n            })()\n        )\n      : (() => {\n          let index = -1;\n          const _values = Array.isArray(values);\n          if (!Array.isArray(data))\n            return updateData(data, successData, updateCallback, updateKey);\n          else if (Array.isArray(id) && key)\n            return data.reduce(\n              (acc, curr = {}) =>\n                id.includes(curr[key])\n                  ? (() => {\n                      index = index + 1;\n                      return acc.concat([\n                        updateData(\n                          curr,\n                          values[_values ? index : curr[key]] || curr,\n                          updateCallback,\n                          updateKey\n                        ),\n                      ]);\n                    })()\n                  : acc.concat([curr]),\n              []\n            );\n          else if ((id === 0 || id) && key)\n            return data.map((_data) =>\n              _data[key] === id\n                ? (() => {\n                    index = index + 1;\n                    return updateData(\n                      _data,\n                      values[_values ? index : curr[key]] || _data,\n                      updateCallback,\n                      updateKey\n                    );\n                  })()\n                : _data\n            );\n          return updateData(data, successData, updateCallback, updateKey);\n        })(),\n  lastUpdated: generateTimeStamp(),\n  isError: false,\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}