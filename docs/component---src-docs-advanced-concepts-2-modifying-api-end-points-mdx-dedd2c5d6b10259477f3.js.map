{"version":3,"sources":["webpack:///../src/docs/Advanced Concepts/2.modifying-api-end-points.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAMaA,G,UAAe,S,2OAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,+CADR,gDAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,82F,yOAyHTJ,EAAWK,gBAAiB","file":"component---src-docs-advanced-concepts-2-modifying-api-end-points-mdx-dedd2c5d6b10259477f3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"-modifying-api-end-points-reducer-constants\"\n    }}>{`# Modifying api end points reducer constants`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\nconst { CALL, ON_SUCCESS } = commonConstants;\nconst reducer = ({\n  constants,\n  successData,\n  restSuccessData,\n  payload,\n  query,\n  state,\n  params,\n  restPayload,\n  loadingStatus,\n  statusCode,\n  type,\n  reset,\n  newState,\n  method,\n  statusMessage,\n  errorData,\n  restErrorData,\n  resetState,\n  initialState,\n  commonHandler,\n  commmonErrorHandler,\n  defaultReducerHandler,\n}) => {\n  switch (type) {\n    case \"RESET\":\n      switch (method) {\n        case ON_SUCCESS:\n          return newObject(state, resetState);\n        default:\n          return state;\n      }\n    case constants.VERIFY_OTP_API[CALL]:\n      switch (method) {\n        case ON_SUCCESS:\n          return newState(({ [type]: Data }) => ({\n            profile: successData,\n            isLoggedIn: !!successData.data.mobile_number,\n            [type]: newObject(Data, {\n              lastUpdated: generateTimeStamp(),\n              data: successData,\n            }),\n          }));\n        default:\n          return defaultReducerHandler(); // for handling others such as Error\n      }\n    case authenticationConstants.USER_PROFILE_API[CALL]:\n      switch (method) {\n        case ON_SUCCESS:\n          return newState(({ profile, [type]: Data }) => ({\n            authorization: true,\n            isLoggedIn: !!successData.name,\n            profile: newObject(profile, successData),\n            [type]: newObject(Data, commonHandler()), // you can use commonHandler for handling task by itsself\n          }));\n        case ON_ERROR:\n          return newObject(state, ({ [type]: Data }) => ({\n            isError: true,\n            isLoggedIn: false,\n            [type]: newObject(Data, commmonErrorHandler()), // you can use commmonErrorHandler for handling error by itsself\n          }));\n        case ON_UNMOUNT: {\n          return reset(); // This is just an example don't do this if it is not required.Reset will be handled by itsself\n        }\n        default:\n          return state;\n      }\n    default:\n      return defaultReducerHandler();\n  }\n};\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    VERIFY_OTP_API: {\n      url: \\`users/verify-otp/\\`,\n      method: \"POST\",\n    },\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n    dontReset: {\n      REGISTER_API,\n    },\n  },\n  reducer,\n  constantReducer: ({\n    type,\n    state,\n    action,\n    constants,\n    initialState,\n    resetState,\n  }) => {\n    if (type === \"LOGOUT\")\n      return action.payload.resetEntireState ? initialState : resetState; // resetState wont reset if you specify the api in (dontReset) key while creating hoc\n    return state;\n  },\n  name: \"Auth\",\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}