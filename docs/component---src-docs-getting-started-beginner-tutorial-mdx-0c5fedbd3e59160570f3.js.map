{"version":3,"sources":["webpack:///../images/11.png","webpack:///../images/10.png","webpack:///../src/docs/Getting Started/beginnerTutorial.mdx","webpack:///../images/7.png","webpack:///../images/8.png","webpack:///../images/9.png"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"iFAAAA,EAAOC,QAAU,IAA0B,kD,uBCA3CD,EAAOC,QAAU,IAA0B,kD,8LCM9BC,G,UAAe,S,+NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uCADR,uCAGA,iBAAQ,CACN,GAAM,yBADR,0BAGA,iBAAQ,CACN,GAAM,yBADR,MAEU,sBAAQC,WAAW,MAAnB,wBACV,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iHAQL,iBAAQ,CACN,GAAM,2CADR,MAEU,sBAAQA,WAAW,MAAnB,0CACV,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6jDA8CL,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,8FAGL,iBAAQ,CACN,GAAM,kBADR,MAEU,sBAAQA,WAAW,MAAnB,iBACV,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,meA4BL,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,+LAIL,iBAAQ,CACN,GAAM,+BADR,MAEU,sBAAQA,WAAW,MAAnB,8BACV,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,q+BAkDL,qBAAG,sBAAQA,WAAW,KAAnB,4CACH,qBAAG,mBAAKC,IAAI,KAAKC,IAAKC,EAAQ,WAC9B,iBAAQ,CACN,GAAM,uBADR,MAEU,sBAAQH,WAAW,MAAnB,sBACV,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uYAqBL,iBAAQ,CACN,GAAM,wBADR,MAEU,sBAAQA,WAAW,MAAnB,uBACV,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8uGAuHL,qBAAG,sBAAQA,WAAW,KAAnB,qEACH,qBAAG,mBAAKC,IAAI,KAAKC,IAAKC,EAAQ,WAC9B,uBAAK,gCAAMH,WAAW,OAAU,IAA3B,2MAKL,qBAAG,mBAAKC,IAAI,KAAKC,IAAKC,EAAQ,UAA9B,KACF,mBAAKF,IAAI,KAAKC,IAAKC,EAAQ,WACzB,iBAAQ,CACN,GAAM,oBADR,MAEU,sBAAQH,WAAW,MAAnB,mBACV,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+ZAmBL,qBAAG,sBAAQA,WAAW,KAAnB,6EACH,qBAAG,mBAAKC,IAAI,KAAKC,IAAKC,EAAQ,WAC9B,uBAAK,gCAAMH,WAAW,OAAU,IAA3B,gLAKL,iBAAQ,CACN,GAAM,0CADR,2CAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8iEA6EL,+BAAc,6BAAGA,WAAW,KAAQ,CAChC,KAAQ,4EADE,yB,6NAOlBJ,EAAWQ,gBAAiB,G,qBChc5Bd,EAAOC,QAAU,IAA0B,iD,qBCA3CD,EAAOC,QAAU,IAA0B,iD,qBCA3CD,EAAOC,QAAU,IAA0B","file":"component---src-docs-getting-started-beginner-tutorial-mdx-0c5fedbd3e59160570f3.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/11-773dadc13713fb8722fcc6aa3dbeec89.png\";","module.exports = __webpack_public_path__ + \"static/10-63f4dc4dc4aa2bc0480edeb232e77c7b.png\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"how-to-connect-hoc-to-the-component\"\n    }}>{`How to connect Hoc to the component`}</h1>\n    <h2 {...{\n      \"id\": \"-step-by-step-process\"\n    }}>{`# Step by step process`}</h2>\n    <h2 {...{\n      \"id\": \"1-importing-a-package\"\n    }}>{`1. `}<strong parentName=\"h2\">{`Importing a package`}</strong></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n} from \"react-boilerplate-redux-saga-hoc\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"2-creating-api-end-points-configuration\"\n    }}>{`2. `}<strong parentName=\"h2\">{`Creating Api-End-Points Configuration`}</strong></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst BASE_URL = \"https://jsonplaceholder.typicode.com\";\n\nconst DEMO_GET_API = \\`\\${BASE_URL}/posts\\`; /* default method GET */\n\n/* Either pass a string or object  */\n\nconst DEMO_GET_POSTS_API = {\n  url: \\`\\${BASE_URL}/posts\\`,\n  method: \"GET\",\n};\n/*\nNote: If you want to pass params to the url such as id,type etc.change \\`\\${BASE_URL}/posts\\` to ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`\n*/\nconst DEMO_POST_API = {\n  url: ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`,\n  method: \"POST\", // default GET\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\", /* optional */,\n  responseDataKey: \"data\", /* optional */,\n  responseMessageKey: \"status\", /* optional */,\n  errorMessageKey: \"error\", /* optional */,\n};\nconst DEMO_DELETE_API = {\n  url: ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`,\n  method: \"DELETE\",\n  responseStatusCode: [900], /* optional */,\n  responseStatusCodeKey: \"code\", /* optional */,\n  responseDataKey: \"data\", /* optional */,\n  responseMessageKey: \"status\", /* optional */,\n  errorMessageKey: \"error\", /* optional */,\n};\nconst DEMO_PUT_API = {\n  url: ({ id, type }) => \\`\\${BASE_URL}/posts/\\${id}/\\${type}\\`,\n  method: \"PUT\",\n  responseStatusCode: [900], /* optional */,\n  responseStatusCodeKey: \"code\", /* optional */,\n  responseDataKey: \"data\", /* optional */,\n  responseMessageKey: \"status\", /* optional */,\n  errorMessageKey: \"error\", /* optional */,\n  errorHandlerStatusCode: [900], /* for handling error on success response eg: {code: 400,status: 'SUCCESS'}*/\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`     Note:\n     -You can create a separate file for api-end-points. (api-end-point.js)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"3-creating-hoc\"\n    }}>{`3. `}<strong parentName=\"h2\">{`Creating HOC`}</strong></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport {\n  DEMO_GET_API,\n  DEMO_POST_API,\n  DEMO_DELETE_API,\n  DEMO_PUT_API,\n} from \"./api-end-points.js\";\nconst HOC = HocConfigure({ handlers: [] });\nconst Auth_HOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n  },\n  name: \"Auth\",\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`    Note:\n    - When you add url in apiEndPoints it will create constants, actions, reducer, saga for you.\n    - Great,We are almost done.next step is connect hoc with our component.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"4-connecting-with-component\"\n    }}>{`4. `}<strong parentName=\"h2\">{`Connecting with Component`}</strong></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n  useQuery,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\n\nimport {\n  DEMO_GET_API,\n  DEMO_POST_API,\n  DEMO_DELETE_API,\n  DEMO_PUT_API,\n} from \"./api-end-points.js\";\nimport useCustomHook from \"./hooks\"; // you will find creating custom hooks below\n\nconst HOC = HocConfigure({ handlers: [] });\n\nconst useAuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n    DEMO_GET_POSTS_API,\n  },\n  name: \"Auth\",\n});\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const hooks = useCustomHook(props, { commonConstants }); // discuss later below\n  const {\n    get: { data },\n  } = hooks;\n  console.log(props, data);\n  return (\n    <div>\n      {data.map(({ title }) => (\n        <li>{title}</li>\n      ))}\n    </div>\n  );\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`This is initial state from Redux Store `}</strong></p>\n    <p><img alt=\"  \" src={require(\"../../../images/7.png\")} /></p>\n    <h2 {...{\n      \"id\": \"5-configuring-store\"\n    }}>{`5. `}<strong parentName=\"h2\">{`Configuring Store`}</strong></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store as configureStore,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst initialState = {};\nconst store = configureStore(initialState); // by default second parameter will be false\n\nexport default function App(props) {\n  return (\n    <Provider store={store}>\n      <CustomComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"6-create-custom-hook\"\n    }}>{`6. `}<strong parentName=\"h2\">{`Create custom hook`}</strong></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useEffect, useMemo, useQuery } from \"react\";\nconst initialLoaderState = true;\nexport default (\n  {\n    Auth_hoc: {\n      actions: {\n        // For API CALLS\n        DEMO_GET_API_CALL,\n        DEMO_GET_POSTS_API_CALL,\n        DEMO_POST_API_CALL,\n        DEMO_DELETE_API_CALL,\n        DEMO_PUT_API_CALL,\n        // For API CANCEL\n        DEMO_GET_API_CANCEL,\n        DEMO_GET_POSTS_API_CANCEL,\n        DEMO_POST_API_CANCEL,\n        DEMO_DELETE_API_CANCEL,\n        DEMO_PUT_API_CANCEL,\n        // For Modifying reducer without api calls\n        DEMO_GET_API_CUSTOM_TASK,\n        DEMO_GET_POSTS_API_CUSTOM_TASK,\n        DEMO_POST_API_CUSTOM_TASK,\n        DEMO_DELETE_API_CUSTOM_TASK,\n        DEMO_PUT_API_CUSTOM_TASK,\n      } = {},\n      reducerName,\n      reducerConstants: {\n        // For getting data\n        DEMO_GET_API,\n        DEMO_POST_API,\n        DEMO_DELETE_API,\n        DEMO_PUT_API,\n        DEMO_GET_POSTS_API,\n      } = {},\n    } = {},\n    getData,\n    dispatch,\n  },\n  { commonConstants }\n) => {\n  const { ON_SUCCESS, ON_UNMOUNT } = commonConstants;\n  useEffect(() => {\n    DEMO_GET_API_CALL();\n    DEMO_GET_POSTS_API_CALL({\n      request: {\n        query: {\n          skip: 0,\n          limit: 1,\n        },\n      },\n    });\n    DEMO_POST_API_CALL({\n      request: {\n        payload: {\n          name: \"name\",\n          age: 20,\n        },\n        params: {\n          id: 1,\n        },\n      },\n    });\n    DEMO_DELETE_API_CALL({\n      request: {\n        params: {\n          id: 1,\n        },\n      },\n    });\n    DEMO_PUT_API_CALL({\n      request: {\n        params: {\n          id: 1,\n          type: \"male\",\n        },\n      },\n    });\n\n    return () => {\n      const filter = []; // optional parameter dont pass if you are not using filter\n      // Note: You will learn more about filter later below\n      // For cancelling incomplete api call if you are unmounting this will avoid unwanted network traffic.This is optional no need to pass all the times\n      DEMO_GET_API_CANCEL(ON_UNMOUNT, filter); // Don't pass ON_UNMOUNT if you dont want to reset tje data from reducer on unmounting\n      DEMO_POST_API_CANCEL();\n      DEMO_DELETE_API_CANCEL();\n      DEMO_PUT_API_CANCEL(ON_UNMOUNT);\n    };\n  }, []);\n  /* \nNote: Don't pass this (initialLoaderState) paramter as true if you are not calling api on mount.\nNote: loader will be always true until you call the particular api\n*/\n  const [Get, Post, Delete, Put] = useQuery(reducerName, [\n    DEMO_POST_API,\n    DEMO_PUT_API,\n    DEMO_DELETE_API,\n    { key: DEMO_GET_API, default: [] },\n  ]);\n\n  /*\ninitialLoaderState - default will be true, so make it false\nif you not calling api on mount other wise loader will always true until you call this api\n*/\n  /* \n    const { loader , data , lastUpdated, isError, isInfinite, infiniteEnd, toast, error } = Get;\n    const { loader , data , lastUpdated, isError, isInfinite, infiniteEnd, toast, error } = Post;\n    const { loader , data , lastUpdated, isError, isInfinite, infiniteEnd, toast, error } = Put;\n    const { loader , data , lastUpdated, isError, isInfinite, infiniteEnd, toast, error } = Delete;\n*/\n  return {\n    Get,\n    Post,\n    Put,\n    Delete,\n  };\n};\n`}</code></pre>\n    <p><strong parentName=\"p\">{`This is state from Redux Store after api gets success or failure`}</strong></p>\n    <p><img alt=\"  \" src={require(\"../../../images/8.png\")} /></p>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -Data will be store in reducer once api call gets success or failure\n -No need to create seperate constants for error or success\n -Hoc will handle all the success, failure, Cancel tasks\n`}</code></pre>\n    <p><img alt=\"  \" src={require(\"../../../images/9.png\")} />{`\n`}<img alt=\"  \" src={require(\"../../../images/11.png\")} /></p>\n    <h2 {...{\n      \"id\": \"7-using-the-hook\"\n    }}>{`7. `}<strong parentName=\"h2\">{`Using the hook`}</strong></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const hooks = useCustomHook(props, { commonConstants });\n  const {\n    Get: { data },\n  } = hooks;\n  console.log(props, data);\n  return (\n    <ul>\n      {data.map(({ title, id }) => (\n        <li key={id}>{title}</li>\n      ))}\n    </ul>\n  );\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`This is loading state from Redux Store after api gets success or failure`}</strong></p>\n    <p><img alt=\"  \" src={require(\"../../../images/10.png\")} /></p>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n-This is the basic setup for handling api calls.\n-You will find the more useful features in below such as updating, deleting data.\n-Handling multiple tasks..etc\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-using-usequery-hook-in-different-ways\"\n    }}>{`# using useQuery hook in different ways`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* accessing multiple data  at single query */\nconst [test_data, test, test_deep, testGetApi] = useQuery(\n  reducerName /* can pass any reducer key such as 'Auth' , 'router' , ..etc*/,\n  [\n    {\n      key: TEST_GET_API,\n      name: \"test\",\n      initialLoaderState: true,\n    },\n    {\n      key: TEST_GET_API,\n      query: \".data[0]\",\n      initialLoaderState: false,\n    },\n    {\n      key: TEST_GET_API,\n      query: \".data\",\n      initialLoaderState: false,\n      default: [], // Default for data key it also check's type of data..if type is object return [].Don't pass if you dont want to type check\n    },\n    TEST_GET_API,\n  ]\n);\n\n/* query can be used in different ways based on your requirement */\n\nconst [data, loader] = useQuery(\n  reducerName, // can pass any reducer key such as 'Auth' , 'router' , ..etc\n  TEST_GET_API,\n  [\n    {\n      query: \".data[0]\",\n      default: [],\n    },\n    {\n      query: \".loader\",\n      default: false,\n    },\n  ]\n);\n\n/* For direct accessing reducer keys */\nconst { isLoggedIn, profile } = useQuery(reducerName, {\n  requiredKey: [\"isLoggedIn\", \"profile\"],\n});\n\n/* pass array of string instead of object */\n\nconst [\n  { loader, data, lastUpdated, isError, error, toast },\n] = useQuery(reducerName, [TEST_GET_API]);\n\n/* Pass an object instead of array */\nconst data = useQuery(reducerName, {\n  key: TEST_GET_API,\n  default: [],\n  requiredKey: [\"loader\", \"data\", \"lastUpdated\"],\n});\n\n/* pass a string insted of array */\nconst { loader, data, lastUpdated, isError, error, toast } = useQuery(\n  reducerName,\n  TEST_GET_API\n);\n\n/* Pass a config as a third parameter its optional */\nconst data = useQuery(reducerName, TEST_GET_API, {\n  query: \".data\",\n  default: [],\n});\n\n/* for getting whole reducer data */\nconst data = useQuery(); // Don't use this use this until its required it will render the component every time reducer change\nconst data = useQuery(reducerName); // Don't use this until its required it will render the component every time reducer data change\n`}</code></pre>\n    <p>{`Next - `}<a parentName=\"p\" {...{\n        \"href\": \"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/storing-data\"\n      }}>{`Basic Concepts`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/7-f5a7d344e1ab3de4c723fc7a17d114f9.png\";","module.exports = __webpack_public_path__ + \"static/8-266e166916a7bd2fcb55d001d7a80882.png\";","module.exports = __webpack_public_path__ + \"static/9-094444e6582de155b2ad8483b65403db.png\";"],"sourceRoot":""}