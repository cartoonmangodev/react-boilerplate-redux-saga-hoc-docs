{"version":3,"sources":["webpack:///../images/4.png","webpack:///../images/11.png","webpack:///../src/index.mdx","webpack:///../images/10.png","webpack:///../images/1.png","webpack:///../images/6.png","webpack:///../images/7.png","webpack:///../images/8.png","webpack:///../images/3.png","webpack:///../images/9.png"],"names":["module","exports","_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","alt","src","require","isMDXComponent"],"mappings":"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","file":"component---src-index-mdx-637e8f679e7d7d4dbf7a.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/4-a4aeb9ec478c297b915829acacddadcf.png\";","module.exports = __webpack_public_path__ + \"static/11-773dadc13713fb8722fcc6aa3dbeec89.png\";","import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <pre><code parentName=\"pre\" {...{}}>{` Note: If you using version 1.2.0 or below please refer this documentation\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"react-boilerplate-redux-saga-hoc\"\n    }}>{`React Boilerplate Redux Saga HOC`}</h1>\n    <h2 {...{\n      \"id\": \"-thoughts\"\n    }}>{`# Thoughts`}</h2>\n    <h3 {...{\n      \"id\": \"1-why-we-created-this-hoc\"\n    }}>{`1. Why we created this hoc?`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`-> we are repeatedly creating constants, reducer, actions, saga whenever we want to call the api.\n-> We are doing the same thing again and again that will make us to feel disconnected from coding.\n-> To avoid that, we have created a hoc for you to handle those repeated things.\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"2-do-i-need-the-basic-knowledge-about-redux-saga-to-use-this-hoc\"\n    }}>{`2. Do i need the basic knowledge about redux-saga to use this hoc?`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`-> No need to have basic knowledge about redux-saga.\n-> We are using saga to handle api calls,because saga is a great library for handling all the side effects.\n`}</code></pre>\n    <hr></hr>\n    <h3 {...{\n      \"id\": \"3-who-can-use-this-hoc\"\n    }}>{`3. Who can use this hoc?`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`-> A person who want's to do development faster and also don't want to create constants, reducer, saga, actions again and again.\n`}</code></pre>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"-overview\"\n    }}>{`# Overview`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`React Boilerplate Redux Saga HOC is a hoc for handling api calls as well as mataintaing redux state.\nWith the help of this hoc no need to worry about handling multipe api calls.\nBecause when you connect this hoc with the component it will automatically create constants, reducer, saga, actions for you.\nAnd also provides method to call the api as well as manupulating the state.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"\"\n    }}></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`It also handles success, errors, loader, canceling api calls when you are unmounting the component.\nMost of the developer failed to cancel the calls while unmounting component.\nThis will create unwanted network traffic as well as unwanted storage space.\nNo worry hoc will provide a method for canceling api as well as clearing the unwanted data.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-1\"\n    }}></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`All you need to do is just connect this hoc to your component and add the api configuration thats it.\nYou are ready to call the api.No matter how many api's hoc will handle for you.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-2\"\n    }}></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`This package also supports for both React and React native.\nSo no need to worry about basic configuration and also no seperate coding needed.\nJust use the configuration on both react and react-native.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-installation\"\n    }}>{`# Installation`}</h2>\n    <p>{`This package requires `}<strong parentName=\"p\">{`React 16.8.4 or later.`}</strong></p>\n    <p>{`Use the package manager `}<a parentName=\"p\" {...{\n        \"href\": \"https://nodejs.org/en/\"\n      }}>{`npm`}</a>{` to install react-boilerplate-redux-saga-hoc.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm i react-boilerplate-redux-saga-hoc\n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`yarn add react-boilerplate-redux-saga-hoc\n`}</code></pre>\n    {\n      /* ## # Contents\n      ---\n      ### **Quickstart**\n      [# Basic usage](#-basic-usage)\n      [# Store Configuration](#-store-configuration)\n      ---\n      ### **Before Proceeding Further**\n      [# Why should i use this package](#-why-should-i-use-this-package)\n      [# Benefits of using this package](#-benefits-of-using-this-package)\n      [# Whether this package will support for react-native](#-whether-this-package-will-support-for-react-native)\n      ---\n      ### **How does it works**\n      [# Step by step process](#-step-by-step-process)\n      ---\n      ### **Storing Data**\n      [# storing data automatically by calling api](#-storing-data-automatically-by-calling-api)\n      [# sending query parameters to the api](#-sending-query-parameters-to-the-api)\n      [# Callbacks for handling success or failure](#-callbacks-for-handling-success-or-failure)\n      [# Manually storing data by calling custom task](#-manually-storing-data-by-calling-custom-task)\n      [# Getting Data from store](#getting-data-from-store)\n      ---\n      ### **Updating Data**\n      [# Updating data automatically by calling api](#-updating-data-automatically-by-calling-api)\n      [# Updating Data in an Array](#-updating-data-in-an-array)\n      [# Callbacks for handling Updated Data](#-callbacks-for-handling-updated-data)\n      [# Manually updating data by calling custom task](#-manually-updating-data-by-calling-custom-task)\n      [# Getting Updated Data from store](#-getting-updated-data-from-store)\n      ---\n      ### **Handling Infinite Data or Infinite Scrolling**\n      [# storing infinite data automatically by calling api](#-storing-infinite-data-automatically-by-calling-api)\n      [# Prepend data instead of appending infinite data](#-prepend-data-instead-of-appending-data)\n      [# Callbacks for handling infinite success or failure ](#-callbacks-for-handling-success-or-failure-1)\n      [# Manually storing or updating infinite data by calling custom task](#-manually-storing-or-updating-infinite-data-by-calling-custom-task)\n      [# Getting Infinite Data from store](#-getting-data-from-store-1)\n      ---\n      ### **Deleting Data**\n      [# Deleting data by calling api](#-deleting-data-by-calling-api)\n      [# Deleting key in an object](#-deleting-key-in-an-object)\n      [# Manually Deleting by calling custom task ](#-manually-deleting-by-calling-custom-task)\n      [# Getting Data from store](#-getting-data-from-store-2)\n      ---\n      ### **Adding Data based on Filters**\n      [# Adding filters in api calls](#-adding-filters-in-api-calls)\n      [# Deleting key in an Filter object](#-deleting-key-in-an-filter-object)\n      [# Manually Deleting Filter Data by calling custom task ](#-manually-deleting-filter-data-by-calling-custom-task)\n      [# Getting Filter Data from store ](#-getting-filter-data-from-store)\n      ---\n      ### **Using Subkey for accessing deep object**\n      [# Adding filters in Deep Object](#-adding-filters-in-deep-object)\n      [# Deleting key in an deep object](#-deleting-key-in-an-deep-object)\n      [# Manually Deleting deep object by calling custom task ](#-manually-deleting-subkey-data-by-calling-custom-task)\n      [# Getting Data from store](#-getting-filter-data-from-store-1)\n      ---\n      ### **Advanced Topics**\n      [# Creating Custom Reducer](#-creating-custom-reducer)\n      [# Modifying api end points reducer constants](#-modifying-api-end-points-reducer-constants)\n      [# Don't reset on setting to initial state ](#-dont-reset-on-setting-to-initial-state)\n      [# Cancelling Api Calls ](#-cancelling-api-calls)\n      [# Adding Axios Interceptors ](#-axios-interceptors)\n      [# Inject saga and reducer to the store ](#-inject-saga-and-reducer-to-the-store)\n      [# Inject saga and reducer to the store by using hooks ](#-inject-saga-and-reducer-to-the-store-by-using-hooks)\n      ---\n      ### **Util Functions**\n      [# Safe Function ](#-safe-function)\n      [# Other Util functions ](#-other-util-functions)\n      ---\n      ### **Others**\n      [# Params ](#-params)\n      [# Handling Multiple tasks ](#-handling-multiple-tasks) */\n    }\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"-basic-usage\"\n    }}>{`# Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/** App.js **/\n\nimport React, { useEffect, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Provider } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport {\n  HOC as HocConfigure,\n  commonConstants,\n  store as configureStore,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst initialState = {};\n\nconst connected_react_router_enable = false; // By default it will be False.\n/*\nNote: Enable this true if you are using this package in your app https://www.npmjs.com/package (connected-react-router)\nNote: Please dont't enable to true if you using react-native\nNote: React Boilerplate by default using connected-react-router so you can enable to true if you are using react boilerplate https://github.com/react-boilerplate/react-boilerplate\n*/\nconst store = configureStore(initialState, connected_react_router_enable);\nconst HOC = HocConfigure({ handlers: [] });\n/* Note: You can pass custom handler in HocConfigure.You will learn more about handlers in later below  */\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {\n      url: \"https://jsonplaceholder.typicode.com/posts/\",\n      method: \"GET\",\n      responseStatusCode: [900],\n      responseStatusCodeKey: \"code\",\n      responseDataKey: \"data\",\n      responseMessageKey: \"message\",\n    },\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  name: \"Auth\",\n});\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const {\n    ON_SUCCESS,\n    ON_UNMOUNT,\n    ON_ERROR,\n    ON_LOADING,\n    ON_TOAST,\n  } = commonConstants;\n\n  const {\n    Auth_data: { TEST_API, REGISTER_API },\n    Auth_hoc: {\n      actions: { TEST_API_CUSTOM_TASK, TEST_API_CALL, TEST_API_CANCEL },\n    },\n    getData,\n  } = props;\n\n  useEffect(() => {\n    TEST_API_CALL();\n    return () => {\n      TEST_API_CANCEL(ON_UNMOUNT);\n    };\n  }, []);\n\n  const { loader, data } = useMemo(() => getData(TEST_API, [], true), [\n    TEST_API,\n  ]);\n\n  return (\n    <div>\n      {data.map(({ title }) => (\n        <li>{title}</li>\n      ))}\n    </div>\n  );\n});\n\nexport default function App(props) {\n  return (\n    <Provider store={store}>\n      <CustomComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`This is the image from Redux Store for initial state after connecting hoc to the component`}</strong></li>\n    </ol>\n    <p><img alt=\"  \" src={require(\"../images/4.png\")} /></p>\n    <h3 {...{\n      \"id\": \"-things-to-remember\"\n    }}><strong parentName=\"h3\">{`# Things to Remember`}</strong></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`- The image which we seeing above are the two endpoints which we created before.\n- Hoc will create Constants, Reducer, Saga, Actions for You.\n- No Need worry about creating seperate actions, reducers for every end-points.It will handle by itsself.\n- Just provide the configuration.Hoc will handle all the task for you.\n`}</code></pre>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`This is the image from Console where hoc will provide actions, constants for handling tasks`}</strong></li>\n    </ol>\n    <p><img alt=\"  \" src={require(\"../images/6.png\")} /></p>\n    <h3 {...{\n      \"id\": \"-things-to-remember-1\"\n    }}><strong parentName=\"h3\">{`# Things to Remember`}</strong></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`- Hoc will create 3 actions for you for handling api calls,handing data..etc\n- REGISTER_API_CALL: ƒ () - for handling api calls\n- REGISTER_API_CANCEL: ƒ () - for handling api cancel request\n- REGISTER_API_CUSTOM_TASK ƒ () - for handling custom task without doing api calls\n- CALL, CANCEL, CUSTOM_TASK will be created for every api end points\n`}</code></pre>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`state from Redux Store before api gets success or failure`}</strong></li>\n    </ol>\n    <p><img alt=\"  \" src={require(\"../images/1.png\")} /></p>\n    <h3 {...{\n      \"id\": \"-things-to-remember-2\"\n    }}><strong parentName=\"h3\">{`# Things to Remember`}</strong></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`- Loader will change to true if api call triggers\n- Toast will reset to initial state\n`}</code></pre>\n    <ol {...{\n      \"start\": 4\n    }}>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`This is state from Redux Store after api gets success`}</strong></li>\n    </ol>\n    <p><img alt=\"  \" src={require(\"../images/3.png\")} /></p>\n    <h3 {...{\n      \"id\": \"-things-to-remember-3\"\n    }}><strong parentName=\"h3\">{`# Things to Remember`}</strong></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`- Loader will change to false if api call gets success or failure\n- Toast will be set into to toast object\n- Data will be stored into the data object\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-store-configuration\"\n    }}>{`# Store Configuration`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n- No need to configure store seperately.\n- Store can be imported from react-boilerplate-redux-saga-hoc.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { store as configureStore } from \"react-boilerplate-redux-saga-hoc\";\n\nconst initialState = {};\nconst connected_router_enable = false;\nconst store = configureStore(initialState, connected_router_enable); // by default second parameter will be false\nexport default function App(props) {\n  return (\n    <Provider store={store}>\n      <CustomComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"before-proceeding-further\"\n    }}>{`Before Proceeding Further`}</h1>\n    <p>{`We already knows `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux.js.org/\"\n      }}>{`redux`}</a>{` is a valuable tool for organising your state and also `}<a parentName=\"p\" {...{\n        \"href\": \"https://redux-saga.js.org/\"\n      }}>{`redux-saga`}</a>{` is a powerful middleware for handling side Effects.With the help of those two tools we have created a package for handling api calls and storing data in an organised way.`}</p>\n    <h2 {...{\n      \"id\": \"-why-should-i-use-this-package\"\n    }}>{`# Why should i use this package`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Important:\n-This package is not an alternative for redux and redux-saga\n-This package is mostly for developer who wants to make development faster and also to handle most of the api calls.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-benefits-of-using-this-package\"\n    }}>{`# Benefits of using this package`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`- Handles api calls by itself\n- No need to create store, constants, actions, saga, reducer\n- It handles cancelling api call by itself\n- Handles error, success, cancel, loading, infinite data handling\n- No worry about api calls, loaders...etc\n- No separate coding needed for react and react native\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-whether-this-package-will-support-for-react-native\"\n    }}>{`# Whether this package will support for react-native`}</h2>\n    <h4 {...{\n      \"id\": \"yes-this-package-will-support-for-both-react-and-react-native\"\n    }}><strong parentName=\"h4\">{`Yes`}</strong>{` ,this package will support for both `}<a parentName=\"h4\" {...{\n        \"href\": \"https://reactjs.org/\"\n      }}>{`react`}</a>{` and `}<a parentName=\"h4\" {...{\n        \"href\": \"https://reactnative.dev/\"\n      }}>{`react-native`}</a></h4>\n    <h1 {...{\n      \"id\": \"how-does-it-works\"\n    }}>{`How does it works`}</h1>\n    <h2 {...{\n      \"id\": \"-step-by-step-process\"\n    }}>{`# Step by step process`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <ol>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Importing a package`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\",\n            \"metastring\": \"{.line-numbers}\",\n            \"{.line-numbers}\": true\n          }}>{`import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n} from \"react-boilerplate-redux-saga-hoc\";\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Creating Api-End-Points Configuration`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\",\n            \"metastring\": \"{.line-numbers}\",\n            \"{.line-numbers}\": true\n          }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst BASE_URL = \"https://jsonplaceholder.typicode.com\";\nconst DEMO_GET_API = {\n  url: \\`\\${BASE_URL}/posts\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n/*\nNote: If you want to pass params to the url such as id,type etc.change \\`\\${BASE_URL}/posts\\` to ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`\n*/\nconst DEMO_POST_API = {\n  url: ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`,\n  method: \"POST\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\nconst DEMO_DELETE_API = {\n  url: ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`,\n  method: \"DELETE\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\nconst DEMO_PUT_API = {\n  url: ({ id, type }) => \\`\\${BASE_URL}/posts/\\${id}/\\${type}\\`,\n  method: \"PUT\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{` Note:\n -You can create a separate file for api-end-points. (api-end-point.js)\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Creating HOC`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\",\n            \"metastring\": \"{.line-numbers}\",\n            \"{.line-numbers}\": true\n          }}>{`import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport {\n  DEMO_GET_API,\n  DEMO_POST_API,\n  DEMO_DELETE_API,\n  DEMO_PUT_API,\n} from \"./api-end-points.js\";\nconst HOC = HocConfigure({ handlers: [] });\nconst Auth_HOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n  },\n  name: \"Auth\",\n});\n`}</code></pre>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Note:\n- When you add url in apiEndPoints it will create constants, actions, reducer, saga for you.\n- Great,We are almost done.next step is connect hoc with our component.\n`}</code></pre>\n      </li>\n    </ol>\n    <p>{`4)  `}<strong parentName=\"p\">{`Connecting with Component`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\n\nimport {\n  DEMO_GET_API,\n  DEMO_POST_API,\n  DEMO_DELETE_API,\n  DEMO_PUT_API,\n} from \"./api-end-points.js\";\nimport useCustomHook from \"./hooks\"; // you will find creating custom hooks below\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n  },\n  name: \"Auth\",\n});\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const hooks = useCustomHook(props, { commonConstants }); // discuss later below\n  const {\n    get: { data },\n  } = hooks;\n  console.log(props, data);\n  return (\n    <div>\n      {data.map(({ title }) => (\n        <li>{title}</li>\n      ))}\n    </div>\n  );\n});\n`}</code></pre>\n    <p><strong parentName=\"p\">{`This is initial state from Redux Store `}</strong></p>\n    <p><img alt=\"  \" src={require(\"../images/7.png\")} /></p>\n    <ol {...{\n      \"start\": 5\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Configuring Store`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\",\n            \"metastring\": \"{.line-numbers}\",\n            \"{.line-numbers}\": true\n          }}>{`import {\n  HOC,\n  commonConstants,\n  store as configureStore,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst initialState = {};\nconst connected_router_enable = true;\nconst store = configureStore(initialState, connected_router_enable); // by default second parameter will be false\n\nexport default function App(props) {\n  return (\n    <Provider store={store}>\n      <CustomComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n`}</code></pre>\n      </li>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Create custom hook`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\",\n            \"metastring\": \"{.line-numbers}\",\n            \"{.line-numbers}\": true\n          }}>{`import { useEffect, useMemo } from \"react\";\nconst initialLoaderState = true;\nexport default (\n  {\n    Auth_hoc: {\n      actions: {\n        // For API CALLS\n        DEMO_GET_API_CALL,\n        DEMO_POST_API_CALL,\n        DEMO_DELETE_API_CALL,\n        DEMO_PUT_API_CALL,\n        // For API CANCEL\n        DEMO_GET_API_CANCEL,\n        DEMO_POST_API_CANCEL,\n        DEMO_DELETE_API_CANCEL,\n        DEMO_PUT_API_CANCEL,\n        // For Modifying reducer without api calls\n        DEMO_GET_API_CUSTOM_TASK,\n        DEMO_POST_API_CUSTOM_TASK,\n        DEMO_DELETE_API_CUSTOM_TASK,\n        DEMO_PUT_API_CUSTOM_TASK,\n      } = {},\n    } = {},\n    Auth_data: {\n      // For getting data\n      DEMO_GET_API,\n      DEMO_POST_API,\n      DEMO_DELETE_API,\n      DEMO_PUT_API,\n    } = {},\n    getData,\n    dispatch,\n  },\n  { commonConstants }\n) => {\n  const { ON_SUCCESS, ON_UNMOUNT } = commonConstants;\n  useEffect(() => {\n    DEMO_GET_API_CALL({\n      request: {\n        query: {\n          skip: 0,\n          limit: 1,\n        },\n      },\n    });\n    DEMO_POST_API_CALL({\n      request: {\n        payload: {\n          name: \"name\",\n          age: 20,\n        },\n        params: {\n          id: 1,\n        },\n      },\n    });\n    DEMO_DELETE_API_CALL({\n      request: {\n        params: {\n          id: 1,\n        },\n      },\n    });\n    DEMO_PUT_API_CALL({\n      request: {\n        params: {\n          id: 1,\n          type: \"male\",\n        },\n      },\n    });\n\n    return () => {\n      const filter = []; // optional parameter dont pass if you are not using filter\n      // Note: You will learn more about filter later below\n      // For cancelling incomplete api call if you are unmounting this will avoid unwanted network traffic.This is optional no need to pass all the times\n      DEMO_GET_API_CANCEL(ON_UNMOUNT, filter);\n      DEMO_POST_API_CANCEL(ON_UNMOUNT);\n      DEMO_DELETE_API_CANCEL(ON_UNMOUNT);\n      DEMO_PUT_API_CANCEL(ON_UNMOUNT);\n    };\n  }, []);\n  /* \n  Note: Don't pass this (initialLoaderState) paramter as true if you are not calling api on mount.\n  Note: loader will be always true until you call the particular api\n  */\n  const get = useMemo(() => getData(DEMO_GET_API, {}, initialLoaderState), [\n    DEMO_GET_API,\n  ]);\n  /*\n   initialLoaderState - default will be true, so make it false\n   if you not calling api on mount other wise loader will always true until you call this api\n  */\n  const post = useMemo(() => getData(DEMO_POST_API, {}, false), [\n    DEMO_POST_API,\n  ]);\n  const put = useMemo(() => getData(DEMO_POST_API, {}, false), [\n    DEMO_PUT_API,\n  ]);\n  const Delete = useMemo(() => getData(DEMO_DELETE_API, {}, false), [\n    DEMO_DELETE_API,\n  ]);\n  /* \n     const { loader , data , lastUpdated } = get;\n     const { loader , data , lastUpdated } = post;\n     const { loader , data , lastUpdated } = put;\n     const { loader , data , lastUpdated } = delete;\n  */\n  return {\n    get,\n    post,\n    put,\n    Delete,\n  };\n};\n`}</code></pre>\n      </li>\n    </ol>\n    <p><strong parentName=\"p\">{`This is state from Redux Store after api gets success or failure`}</strong></p>\n    <p><img alt=\"  \" src={require(\"../images/8.png\")} /></p>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -Data will be store in reducer once api call gets success or failure\n -No need to create seperate constants for error or success\n -Hoc will handle all the success, failure, Cancel tasks\n`}</code></pre>\n    <p><img alt=\"  \" src={require(\"../images/9.png\")} />{`\n`}<img alt=\"  \" src={require(\"../images/11.png\")} /></p>\n    <ol {...{\n      \"start\": 7\n    }}>\n      <li parentName=\"ol\">\n        <p parentName=\"li\"><strong parentName=\"p\">{`Using the hook`}</strong></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\",\n            \"metastring\": \"{.line-numbers}\",\n            \"{.line-numbers}\": true\n          }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const hooks = useCustomHook(props, { commonConstants });\n  const {\n    get: { data },\n  } = hooks;\n  console.log(props, data);\n  return (\n    <div>\n      {data.map(({ title }) => (\n        <li>{title}</li>\n      ))}\n    </div>\n  );\n});\n`}</code></pre>\n        <p parentName=\"li\"><strong parentName=\"p\">{`This is loading state from Redux Store after api gets success or failure`}</strong></p>\n        <p parentName=\"li\"><img alt=\"  \" src={require(\"../images/10.png\")} /></p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{` Note:\n -This is the basic setup for handling api calls.\n -You will find the more useful features in below such as updating, deleting data.\n -Handling multiple tasks..etc\n`}</code></pre>\n      </li>\n    </ol>\n    <h1 {...{\n      \"id\": \"storing-data\"\n    }}>{`Storing Data`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <h2 {...{\n      \"id\": \"-storing-data-automatically-by-calling-api\"\n    }}>{`# storing data automatically by calling api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`    Note:\n -Data will be stored automatically in the reducer and also it handles all the states..such as error,infinte,loader..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-sending-query-parameters-to-the-api\"\n    }}>{`# sending query parameters to the api`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  -No need to worry about appending query.\n  -Its more simpler just pass the object in the query parameter that will append query in the url.\n  -And also passing params is simpler.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-3\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -If you need to pass params in the url.\n -Then you have to change the url to function to receive params.just like give below.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callbacks-for-handling-success-or-failure\"\n    }}>{`# Callbacks for handling success or failure`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  -Callback are another helper function which handles errors, success, cancel..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nconst responseErrorParser = (data) =>\n  (Array.isArray(data) &&\n    data.reduce((acc, curr) => {\n      const [key, message] = Object.entries(curr)[0];\n      const payloadKey = key.split(\",\")[1];\n      return {\n        ...acc,\n        [payloadKey]: message,\n      };\n    }, {})) ||\n  {};\n\nDEMO_API_CONFIGURATION_CALL({\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n    axiosConfig: {\n      responseType: \"application/json\",\n    },\n  },\n  callback: {\n    successCallback: ({ res, data, message, status }) => {\n      // handle toast or call any other api\n    },\n    errorCallback: ({\n      error,\n      errorData: responseErrorParser,\n      message,\n      status,\n      errors,\n    }) => {\n      // handle toast or call any other api\n    },\n    finalCallback: () => {\n      // this will get triggers for both api success or failure\n    },\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-things-to-remember-4\"\n    }}><strong parentName=\"h3\">{`# Things to Remember`}</strong></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`1. Every actions has four keys they are tasks or task,request,callback,filter\n2. tasks - for handling multiple tasks (you will find later in this documentation)\n3. task - for handling single task (you will find later in this documentation)\n4. request - for api request.It supports 5 keys they are query,params,payload,axiosConfig,    paramsSerializer.\n5. filter - for handling different kind of data in same api (you will find later in this documentation)\n6. callback - use for handling success or failure\n7. Either you can use task or tasks,cannot use both at the same time.\n8. If you use both tasks will be taken as priority.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-storing-data-by-calling-custom-task\"\n    }}>{`# Manually storing data by calling custom task`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n   - Don't worry about terms Manually,Automatically, its just the common word we used in the real world.\n   - The way how it stores or handles data i specified as manually, automatically thats it.You will get used to it.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-4\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n   - Automatically -> It will handle api calls and stores data and also handles all the errors, success, loaders...etc\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-5\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n    - Manually -> It will slight different instead of api calls we are manually storing or updating data.\n    - This util function will help you update data in particular reducer.\n    - Also useful for doing various tasks without calling api\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n    response: {\n      data: {\n        commet: \"This handler will help you to store data\",\n        name: \"Example\",\n        age: 20,\n      },\n    },\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-things-to-remember-5\"\n    }}>{`# Things to Remember`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`  - Handlers are most important util for manupulating data and also for managing data in the reducer\n - There are almost 7 build in handlers are available (You will find later in this documentation)\n - Also if you want can create a own custom handler for executing your task\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-data-from-store\"\n    }}>{`# Getting Data from store`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  - We are almost done with basic setup, api calls, storing data...etc.\n  - Now the main things we have to retrieve the data from the reducer.\n  - Don't Worry that is very much simpler than other task.\n  - getData -> Its an util function which gets the data from the particular reducer and also formats the data in order.\n  - (DEMO_API_CONFIGURATION, default || typeof data, initial-loader-state, filter)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-6\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { useMemo } from \"react\";\nconst {\n  getData,\n  Auth_data: { DEMO_API_CONFIGURATION },\n} = props;\n\nconst { loader, data, latUpdated, isInfinite, isInfiniteEnd } = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, {}, false),\n  [DEMO_API_CONFIGURATION]\n);\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"updating-data\"\n    }}><strong parentName=\"h1\">{`Updating Data`}</strong></h1>\n    <h2 {...{\n      \"id\": \"-updating-data-automatically-by-calling-api\"\n    }}>{`# Updating data automatically by calling api`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -It will only update if the reponse data is object otherwise it will replace the data.\n -It won't update Array.\n -Array will be handle in diferent way.you will find Below\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Update-Handler\",\n  },\n});\n\n// Example: storedData = {\n//   name: \"example\",\n//   date: \"22-8-2222\",\n// };\n// responseData = {\n//   name: \"example 2\",\n// };\n// UpdateData = {\n//   name: \"example 2\",\n//   date: \"22-8-2222\",\n// };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-updating-data-in-an-array\"\n    }}>{`# Updating Data in an Array`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -If the update data is Array it requires extra 2 parameters to itentify the Object that is id,key\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"id---array--string--number---array-of-ids\"\n    }}>{`id - Array || string || number - Array of ids`}</h5>\n    <h5 {...{\n      \"id\": \"key---key-example-user_id---string\"\n    }}>{`key - Key example: 'user_id' - String`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Update-Handler\",\n    key: \"id\", // for handling array of object\n    id: [2, 3],\n  },\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: 20 },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n});\n/*\nExample:\nstoredData = [{\n  id: 1\n  name: 'example',\n  date: '22-8-2222'\n},\n{\n  id: 2\n  name: 'example',\n  date: '22-8-2222'\n}]\n\nresponseData = {\n  name: 'example 2'\n}\n\nUpdateData = [{\n  id: 1\n  name: 'example',\n  date: '22-8-2222'\n},\n{\n  id: 2\n  name: 'example 2',\n  date: '22-8-2222'\n}]\n*/\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -In the above scenario id number 3 will be ignored.\n -If u want to append or prepend data there are some other ways.you will find below\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callbacks-for-handling-updated-data\"\n    }}>{`# Callbacks for handling Updated Data`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -There are several callback are available can be used in different requirements\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Update-Handler\",\n    key: \"id\", // for handling array of object\n    id: [2, 3],\n    updateCallback: (storeData: oldData, responseData: newData) => {\n      return { ...oldData, ...newData } || oldData.concat(newData); // It will update  the data in paricular reducer\n    },\n  },\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: 20 },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n  callback: {\n    updateStateCallback: ({ state: updatedState, data: responseData }) => {\n      return updatedState; // By default it takes the updated state if returns undefined or null\n    },\n    successCallback: () => {\n      // handle success toast or call any other api\n    },\n    errorCallback: ({\n      error,\n      errorData: responseErrorParser,\n      message,\n      status,\n      errors,\n    }) => {\n      // handle error toast or call any other api\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-updating-data-by-calling-custom-task\"\n    }}>{`# Manually updating data by calling custom task`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n    key: \"id\", // for handling array of object\n    id: [2, 3],\n    updateCallback: (storeData: oldData, responseData: newData) => {\n      return { ...oldData, ...newData } || oldData.concat(newData); // It will update  the data in paricular reducer\n    },\n    response: {\n      data: {\n        age: \"20\",\n      },\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-updated-data-from-store\"\n    }}>{`# Getting Updated Data from store`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { useMemo } from \"react\";\nconst {\n  getData,\n  Auth_data: { DEMO_API_CONFIGURATION },\n} = props;\n\nconst { loader, data, latUpdated, isInfinite, isInfiniteEnd } = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, {}, false),\n  [DEMO_API_CONFIGURATION]\n);\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"handling-infinite-data-or-infinite-scrolling\"\n    }}>{`Handling Infinite Data or Infinite Scrolling`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <h2 {...{\n      \"id\": \"-storing-infinite-data-automatically-by-calling-api\"\n    }}>{`# storing infinite data automatically by calling api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n - Data will be stored automatically in the reducer and also it handles all the states.\n - Such as error,infinte,loader..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\`,\n  method: \"GET\",\n responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n   task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true, // By default data will add below\n    updateCallback: (storeData: oldData, responseData: newData) => {\n      return { ...oldData, ...newData } || oldData.concat(newData); // It will update  the data in paricular reducer\n    },\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n - It will append data if already data is array.\n - Other wise it will replace the new data\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-prepend-data-instead-of-appending-data\"\n    }}>{`# Prepend data instead of appending data`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n - It will store the data at the top instead of last\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true, // By default data will add below\n  },\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callbacks-for-handling-success-or-failure-1\"\n    }}>{`# Callbacks for handling success or failure`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   - Callback are another helper function which handles errors, success, cancel..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nconst responseErrorParser = (data) =>\n  (Array.isArray(data) &&\n    data.reduce((acc, curr) => {\n      const [key, message] = Object.entries(curr)[0];\n      const payloadKey = key.split(\",\")[1];\n      return {\n        ...acc,\n        [payloadKey]: message,\n      };\n    }, {})) ||\n  {};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true, // By default data will add below\n  },\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n  callback: {\n    successCallback: ({ res, data, message, status }) => {\n      // handle toast or call any other api\n    },\n    errorCallback: ({\n      error,\n      errorData: responseErrorParser,\n      message,\n      status,\n      errors,\n    }) => {\n      // handle toast or call any other api\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-storing-or-updating-infinite-data-by-calling-custom-task\"\n    }}>{`# Manually storing or updating infinite data by calling custom task`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n-Calling custom task will allow us to manipulate data without calling any api..such as adding count,linit,skip..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true, // By default data will add below\n    response: {\n      data: [\n        {\n          name: \"example\",\n        },\n      ],\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-data-from-store-1\"\n    }}>{`# Getting Data from store`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { useMemo } from \"react\";\nconst {\n  getData,\n  Auth_data: { DEMO_API_CONFIGURATION },\n} = props;\n\nconst { loader, data, latUpdated, isInfinite, isInfiniteEnd } = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, {}, false),\n  [DEMO_API_CONFIGURATION]\n);\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"deleting-data\"\n    }}>{`Deleting Data`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <h2 {...{\n      \"id\": \"-deleting-data-by-calling-api\"\n    }}>{`# Deleting data by calling api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n -Data will be deleted automatically in the reducer and also it handles all the states..such as error,infinte,loader..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"DELETE\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Delete-Handler\",\n    key: \"id\",\n    id: [2],\n  },\n  request: {\n    params: { id: 2 },\n  },\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -It will remove that particular object in an array\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-deleting-key-in-an-object\"\n    }}>{`# Deleting key in an object`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n -It is almost similar to update, but instead of updating particular key it will delete the particular key from the object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"DELETE\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Delete-Key-Handler\",\n    id: [1, 2, 3],\n    key: \"id\",\n    deleteKey: [\"name\", \"age\"],\n  },\n  request: {\n    params: { id: 1 },\n  },\n});\n/* \nExample:\n\ndata = [ { id: 1, name: 'name1',age: '13',gender: 'male' },{ id: 1, name: 'name1',age: '12',gender: 'female' }]\nAfter executing task:\ndata = [ { id: 1, gender: 'male' },{ id: 2, gender: 'female' }]\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-deleting-by-calling-custom-task\"\n    }}>{`# Manually Deleting by calling custom task`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`     Note:\n   -Calling custom task will allow us to manipulate data without calling any api..such as adding count,linit,skip..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-data-from-store-2\"\n    }}>{`# Getting Data from store`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <h2 {...{\n      \"id\": \"-7\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`   getData -> Its an util function which gets the data from the particular reducer and also formats the data in order.\n   (DEMO_API_CONFIGURATION, default || typeof data, initial-loader-state, filter)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { useMemo } from \"react\";\nconst {\n  getData,\n  Auth_data: { DEMO_API_CONFIGURATION },\n} = props;\n\nconst { loader, data, latUpdated, isInfinite, isInfiniteEnd } = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, [], false),\n  [DEMO_API_CONFIGURATION]\n);\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"adding-filters\"\n    }}>{`Adding Filters`}</h1>\n    <h2 {...{\n      \"id\": \"-adding-filters-in-api-calls\"\n    }}>{`# Adding filters in api calls`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -Suppose there is a scenario where same api is used with multiple filters.In that case we have to Store different data.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  filter: [\"name\"],\n  request: {\n    params: { id: 2 },\n    query: { type: \"name\" },\n  },\n});\n/*\nExample:\nresponseData = { id: 1 }\nstoreData = { name: { id: 1 }\n*/\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -In this case it will store the data in an object with key 'name'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-deleting-key-in-an-filter-object\"\n    }}>{`# Deleting key in an Filter object`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -It is almost similar to update, but instead of updating particular key it will delete the particular key from the object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Delete-Key-Handler\",\n    id: [1, 2, 3],\n    key: \"id\",\n    deleteKey: [\"name\", \"age\"],\n  },\n  filter: [\"name\"],\n  request: {\n    params: { id: 1 },\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n  },\n});\n/*\nExample:\n\ndata = { name : [\n  { id: 1, name: 'name1',age: '13',gender: 'male' },\n  { id: 1, name: 'name1',age: '12',gender: 'female' }\n]}\nAfter executing task:\ndata = { name : [\n  { id: 1, gender: 'male' },\n  { id: 2, gender: 'female' }\n}]\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-deleting-filter-data-by-calling-custom-task\"\n    }}>{`# Manually Deleting Filter Data by calling custom task`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -Calling custom task will allow us to manipulate data without calling any api..such as adding count,limit,skip..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    task: \"Delete-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-filter-data-from-store\"\n    }}>{`# Getting Filter Data from store`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <h2 {...{\n      \"id\": \"-8\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`   getData:\n   - Its an util function which gets the data from the particular reducer and also formats the data in order..(DEMO_API_CONFIGURATION, default || typeof data, initial-loader-state, filter)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { useMemo } from \"react\";\nconst {\n  getData,\n  Auth_data: { DEMO_API_CONFIGURATION },\n} = props;\n\nconst nameData = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, [], false, [\"name\"]),\n  [DEMO_API_CONFIGURATION]\n);\n\nconst ageData = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, [], false, [\"age\"]),\n  [DEMO_API_CONFIGURATION]\n);\n\n/**\nnameData returns \n{ loader, data, latUpdated, isInfinite, isInfiniteEnd } \nageData returns \n{ loader, data, latUpdated, isInfinite, isInfiniteEnd } \n**/\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"using-subkey-for-accessing-deep-object\"\n    }}>{`Using Subkey for accessing deep object`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <h2 {...{\n      \"id\": \"-adding-filters-in-deep-object\"\n    }}>{`# Adding filters in Deep Object`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -Incase you want to update deep object we can use subkey to navigate to that object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Data-Handler\",\n    subKey: [\"data\"],\n  },\n  request: {\n    params: { id: 2 },\n    query: { type: \"name\" },\n  },\n  filter: [\"name\"],\n});\n/*\nExample:\nresponseData = { data : { data: { id: 1 } } }\nstoreData = { name: { data: { id: 1 } }\n*/\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   - In this case it will store the data in an object with key 'name'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-deleting-key-in-an-deep-object\"\n    }}>{`# Deleting key in an deep object`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   - It is almost similar to update, but instead of updating particular key it will delete the particular key from the object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Delete-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2, 3],\n    key: \"id\",\n    deleteKey: [\"name\", \"age\"],\n  },\n  request: {\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n    params: { id: 1 },\n  },\n  filter: [\"name\"],\n});\n/*\nExample:\n\ndata = { name :  { data : { data: [\n  { id: 1, name: 'name1',age: '13',gender: 'male' },\n  { id: 1, name: 'name1',age: '12',gender: 'female' }\n]}}}\n\nAfter executing task:\ndata = { name : { data : { data : [\n  { id: 1, gender: 'male' },\n  { id: 2, gender: 'female' }\n]}}}\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-deleting-subkey-data-by-calling-custom-task\"\n    }}>{`# Manually Deleting Subkey Data by calling custom task`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -Calling custom task will allow us to manipulate data without calling any api..such as adding count,limit,skip..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-filter-data-from-store-1\"\n    }}>{`# Getting Filter Data from store`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <h2 {...{\n      \"id\": \"-9\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { useMemo } from \"react\";\nconst {\n  getData,\n  Auth_data: { DEMO_API_CONFIGURATION },\n} = props;\n\nconst nameData = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, [], false, [\"name\"]),\n  [DEMO_API_CONFIGURATION]\n);\n\nconst ageData = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, [], false, [\"age\"]),\n  [DEMO_API_CONFIGURATION]\n);\n\n/**\nnameData returns \n{ loader, data, latUpdated, isInfinite, isInfiniteEnd } \nageData returns \n{ loader, data, latUpdated, isInfinite, isInfiniteEnd } \n**/\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"built-in-handlers\"\n    }}>{`Built-in Handlers`}</h1>\n    <pre><code parentName=\"pre\" {...{}}>{`Handlers are the backbone of this hoc.\nWhen you are using task to store, update and deleting data, handlers are doing that task for you.\nThere are 7 built in handlers are available to do various tasks.We will see every handler in detail below.\n\n- Data Handler -> For storing data\n- Infinite Handler -> For handling all the infinite data,it will append or prepend data in an array\n- Update Handler -> it will update the data in an object\n- Update Key Handler -> tt will update the particular key in an object\n- Delete Handler -> Delete the object in an array\n- Delete Key Handler -> Deleting the key in an object or array of object\n- Splice Data Handler -> it will remove and add the data in an array\n- Toggle Key Handler -> it will toggle the key in an object or array of object\n- Dont Update Data Handler -> It will wont update data but update loaders, error , etc\n- Custom Handler -> It allows to execute your own custon handler\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-data-handler\"\n    }}>{`# Data Handler`}</h2>\n    <h3 {...{\n      \"id\": \"data-handler-without-filter\"\n    }}>{`Data Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"data-handler-with-filter\"\n    }}>{`Data Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"data-handler-with-multi-filter\"\n    }}>{`Data Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-things-to-remember-6\"\n    }}>{`# Things to Remember`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` -Adding multiple filters will create multiple copy of the same data.\n-It will helps to handle different types of data in same api..such as variable kind of filters.\n\n Note:\n -Data-handler is default handler.\n -No need specify the handler if you want to execute a data  handler task.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"data-handler-function---api\"\n    }}>{`Data Handler Function - Api`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`    Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst _checkIsNotObject = (data) =>\n  Object.prototype.toString.call(data) !== \"[object Object]\";\n\nexport const dataHandler = ({\n  task: { clearData, subKey = [] } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data: oldData = {} } = {}) => ({\n  data: (() => {\n    if (subKey.length > 0) {\n      const _oldCopyData = {\n        ...oldData,\n        ...successData,\n        [subKey[0]]: oldData[subKey[0]],\n      };\n      return updateIn(_oldCopyData, subKey, (_oldData) => {\n        if (clearData) return Safe(successData, \\`.\\${subKey.join(\".\")}\\`);\n        return updateCallback\n          ? updateCallback(_oldData, Safe(successData, \\`.\\${subKey.join(\".\")}\\`))\n          : _checkIsNotObject(Safe(successData, \\`.\\${subKey.join(\".\")}\\`)) ||\n            _checkIsNotObject(Safe(_oldData, \\`.\\${subKey.join(\".\")}\\`))\n          ? Safe(successData, \\`.\\${subKey.join(\".\")}\\`)\n          : newObject(_oldData, Safe(successData, \\`.\\${subKey.join(\".\")}\\`));\n      });\n    }\n    return updateCallback\n      ? updateCallback(oldData, successData)\n      : _checkIsNotObject(successData) ||\n        _checkIsNotObject(oldData) ||\n        clearData\n      ? successData\n      : newObject(oldData, successData);\n  })(),\n  error: false,\n  lastUpdated: generateTimeStamp(),\n  isInfinite: undefined,\n  infiniteEnd: undefined,\n  isError: false,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-handler\"\n    }}>{`# Update Handler`}</h2>\n    <h3 {...{\n      \"id\": \"update-handler-without-filter\"\n    }}>{`Update Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-handler-handling-array-of-objects\"\n    }}>{`Update Handler handling array of objects`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-handler-with-filter\"\n    }}>{`Update Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-handler-with-multi-filter\"\n    }}>{`Update Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-handler-with-subkey\"\n    }}>{`Update Handler with Subkey`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n- sub key for handling sub level of data in an object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-handler-function---api\"\n    }}>{`Update Handler Function - Api`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`    Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\nconst updateData = (data, successData, updateCallback) => {\n  if (updateCallback) return updateCallback(data, successData) || data;\n  if (\n    typeof successData === \"object\" &&\n    !Array.isArray(successData) &&\n    typeof data === \"object\" &&\n    !Array.isArray(data)\n  )\n    return newObject(data, successData);\n  return successData;\n};\n\nexport const updateHandler = ({\n  task: { key, id, subKey = [], values = {} } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data = [] } = {}) => ({\n  data:\n    subKey.length > 0\n      ? updateIn(\n          {\n            ...data,\n            ...successData,\n            [subKey[0]]: data[subKey[0]],\n          },\n          subKey,\n          (_Data) =>\n            (() => {\n              let index = -1;\n              const _values = Array.isArray(values);\n              /**  update data if old data is object */\n              if (!Array.isArray(_Data))\n                return updateData(\n                  _Data,\n                  Safe(successData, \\`.\\${subKey.join(\".\")}\\`),\n                  updateCallback\n                );\n              else if (Array.isArray(id) && key && Array.isArray(_Data))\n                return _Data.reduce(\n                  (acc, curr = {}) =>\n                    id.includes(curr[key])\n                      ? (() => {\n                          index = index + 1;\n                          return acc.concat([\n                            updateData(\n                              curr,\n                              values[_values ? index : curr[key]] || curr,\n                              updateCallback\n                            ),\n                          ]);\n                        })()\n                      : acc.concat([curr]),\n                  []\n                );\n              else if ((id === 0 || id) && key)\n                return _Data.map((_data) =>\n                  _data[key] === id\n                    ? (() => {\n                        index = index + 1;\n                        return updateData(\n                          _data,\n                          values[_values ? index : curr[key]] || _data,\n                          updateCallback\n                        );\n                      })()\n                    : _data\n                );\n              return updateData(\n                _Data,\n                Safe(successData, \\`.\\${subKey.join(\".\")}\\`),\n                updateCallback\n              );\n            })()\n        )\n      : (() => {\n          let index = -1;\n          const _values = Array.isArray(values);\n          if (!Array.isArray(data))\n            return updateData(data, successData, updateCallback);\n          else if (Array.isArray(id) && key)\n            return data.reduce(\n              (acc, curr = {}) =>\n                id.includes(curr[key])\n                  ? (() => {\n                      index = index + 1;\n                      return acc.concat([\n                        updateData(\n                          curr,\n                          values[_values ? index : curr[key]] || curr,\n                          updateCallback\n                        ),\n                      ]);\n                    })()\n                  : acc.concat([curr]),\n              []\n            );\n          else if ((id === 0 || id) && key)\n            return data.map((_data) =>\n              _data[key] === id\n                ? (() => {\n                    index = index + 1;\n                    return updateData(\n                      _data,\n                      values[_values ? index : _data[key]] || _data,\n                      updateCallback\n                    );\n                  })()\n                : _data\n            );\n          return updateData(data, successData, updateCallback);\n        })(),\n  lastUpdated: generateTimeStamp(),\n  isError: false,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-key-handler\"\n    }}>{`# Update Key Handler`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  - Update Key handler is slightly different from update handler, but it will update only particular key in an object or an array of object\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-key-handler-without-filter\"\n    }}>{`Update Key Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    updateKey: [\"age\"],\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-key-handler-with-filter\"\n    }}>{`Update Key Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    updateKey: [\"age\"],\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-key-handler-with-multi-filter\"\n    }}>{`Update Key Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    updateKey: [\"age\"],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-key-handler-with-subkey\"\n    }}>{`Update Key Handler with Subkey`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n- sub key for handling sub level of data in an object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    updateKey: [\"age\"],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"update-key-handler-function---api\"\n    }}>{`Update Key Handler Function - Api`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`    Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst updateData = (data, successData, updateCallback, updateKey) => {\n  if (updateCallback) return updateCallback(data, successData) || data;\n  if (\n    typeof successData === \"object\" &&\n    !Array.isArray(successData) &&\n    typeof data === \"object\" &&\n    !Array.isArray(data)\n  ) {\n    return !updateKey\n      ? data\n      : updateKey.reduce((acc, key) => {\n          if (Array.isArray(key) && key.length > 0) {\n            return updateIn(acc, key, (_data) =>\n              Safe(successData, \\`.\\${key.join(\".\")}\\`)\n            );\n          }\n          return {\n            ...acc,\n            [key]: successData[key],\n          };\n        }, data);\n  }\n  return successData;\n};\n\nexport const updateKeyHandler = ({\n  task: { key, id, subKey = [], values = {}, updateKey = [] } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data = [] } = {}) => ({\n  data:\n    subKey.length > 0\n      ? updateIn(\n          {\n            ...data,\n            ...successData,\n            [subKey[0]]: data[subKey[0]],\n          },\n          subKey,\n          (_Data) =>\n            (() => {\n              let index = -1;\n              const _values = Array.isArray(values);\n              /**  update data if old data is object */\n              if (!Array.isArray(_Data))\n                return updateData(\n                  _Data,\n                  Safe(successData, \\`.\\${subKey.join(\".\")}\\`),\n                  updateCallback,\n                  updateKey\n                );\n              else if (Array.isArray(id) && key && Array.isArray(_Data))\n                return _Data.reduce(\n                  (acc, curr = {}) =>\n                    id.includes(curr[key])\n                      ? (() => {\n                          index = index + 1;\n                          return acc.concat([\n                            updateData(\n                              curr,\n                              values[_values ? index : curr[key]] || curr,\n                              updateCallback,\n                              updateKey\n                            ),\n                          ]);\n                        })()\n                      : acc.concat([curr]),\n                  []\n                );\n              else if ((id === 0 || id) && key)\n                return _Data.map((_data) =>\n                  _data[key] === id\n                    ? (() => {\n                        index = index + 1;\n                        return updateData(\n                          _data,\n                          values[_values ? index : curr[key]] || _data,\n                          updateCallback,\n                          updateKey\n                        );\n                      })()\n                    : _data\n                );\n              return updateData(\n                _Data,\n                Safe(successData, \\`.\\${subKey.join(\".\")}\\`),\n                updateCallback,\n                updateKey\n              );\n            })()\n        )\n      : (() => {\n          let index = -1;\n          const _values = Array.isArray(values);\n          if (!Array.isArray(data))\n            return updateData(data, successData, updateCallback, updateKey);\n          else if (Array.isArray(id) && key)\n            return data.reduce(\n              (acc, curr = {}) =>\n                id.includes(curr[key])\n                  ? (() => {\n                      index = index + 1;\n                      return acc.concat([\n                        updateData(\n                          curr,\n                          values[_values ? index : curr[key]] || curr,\n                          updateCallback,\n                          updateKey\n                        ),\n                      ]);\n                    })()\n                  : acc.concat([curr]),\n              []\n            );\n          else if ((id === 0 || id) && key)\n            return data.map((_data) =>\n              _data[key] === id\n                ? (() => {\n                    index = index + 1;\n                    return updateData(\n                      _data,\n                      values[_values ? index : curr[key]] || _data,\n                      updateCallback,\n                      updateKey\n                    );\n                  })()\n                : _data\n            );\n          return updateData(data, successData, updateCallback, updateKey);\n        })(),\n  lastUpdated: generateTimeStamp(),\n  isError: false,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-delete-handler\"\n    }}>{`# Delete Handler`}</h2>\n    <h3 {...{\n      \"id\": \"delete-handler-without-filter\"\n    }}>{`Delete Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-handler-handling-array-of-objects\"\n    }}>{`Delete Handler handling array of objects`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-handler-with-filter\"\n    }}>{`Delete Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-handler-with-multi-filter\"\n    }}>{`Delete Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-handler-with-subkey\"\n    }}>{`Delete Handler with Subkey`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n- sub key for handling sub level of data in an object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-handler-function---api\"\n    }}>{`Delete Handler Function - Api`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`    Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nexport const deleteHandler = ({\n  task: { key, id, subKey = [] } = {},\n  successData = {},\n}) => ({ data = [] } = {}) => ({\n  data:\n    subKey.length > 0\n      ? updateIn(\n          {\n            ...data,\n            ...successData,\n            [subKey[0]]: data[subKey[0]],\n          },\n          subKey,\n          (_data) =>\n            (!Array.isArray(_data) && {}) ||\n            (Array.isArray(id) &&\n              _data.reduce(\n                (acc, curr) =>\n                  id.includes(curr[key]) ? acc : acc.concat([curr]),\n                []\n              )) ||\n            _data.filter(({ [key]: objId }) => objId !== id)\n        )\n      : (!Array.isArray(data) && successData) ||\n        (Array.isArray(id) &&\n          data.reduce(\n            (acc, curr) => (id.includes(curr[key]) ? acc : acc.concat([curr])),\n            []\n          )) ||\n        data.filter(({ [key]: objId }) => objId !== id),\n  lastUpdated: generateTimeStamp(),\n  isError: false,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-delete-key-handler\"\n    }}>{`# Delete Key Handler`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  - Delete Key handler is slightly different from Delete handler, but it will delete only particular key in an object or an array of object\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-key-handler-without-filter\"\n    }}>{`Delete Key Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Key-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    deleteKey: [\"age\"],\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-key-handler-with-filter\"\n    }}>{`Delete Key Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Key-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    deleteKey: [\"age\"],\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-key-handler-with-multi-filter\"\n    }}>{`Delete Key Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Key-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    deleteKey: [\"age\"],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-key-handler-with-subkey\"\n    }}>{`Delete Key Handler with Subkey`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n- sub key for handling sub level of data in an object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Key-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    deleteKey: [\"age\"],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"delete-key-handler-function---api\"\n    }}>{`Delete Key Handler Function - Api`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst deletedData = (obj, keyArray) =>\n  Object.keys(obj).reduce(\n    (acc, curr) =>\n      (keyArray.includes(curr) && acc) || { ...acc, [curr]: obj[curr] },\n    {}\n  );\n\nexport const deleteKeyHandler = ({\n  task: { key, id, deleteKey = [], subKey = [] } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data = {} } = {}) => ({\n  data:\n    subKey.length > 0\n      ? updateIn(\n          {\n            ...data,\n            ...successData,\n            [subKey[0]]: data[subKey[0]],\n          },\n          subKey,\n          (_Data) =>\n            updateCallback\n              ? updateCallback(_Data, successData) || _Data\n              : (!Array.isArray(_Data) && deletedData(_Data, deleteKey)) ||\n                (Array.isArray(id) &&\n                  _Data.reduce(\n                    (acc, curr) =>\n                      id.includes(curr[key])\n                        ? acc.concat([deletedData(curr, deleteKey)])\n                        : acc.concat([curr]),\n                    []\n                  )) ||\n                _Data.map((_data) =>\n                  _data[key] === id ? deletedData(_data, deleteKey) : _data\n                )\n        )\n      : updateCallback\n      ? updateCallback(data, successData) || data\n      : (!Array.isArray(data) && deletedData(data, deleteKey)) ||\n        (Array.isArray(id) &&\n          data.reduce(\n            (acc, curr) =>\n              id.includes(curr[key])\n                ? acc.concat([deletedData(curr, deleteKey)])\n                : acc.concat([curr]),\n            []\n          )) ||\n        data.map((_data) =>\n          _data[key] === id ? deletedData(_data, deleteKey) : _data\n        ),\n  lastUpdated: generateTimeStamp(),\n  isError: false,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-splice-data-handler\"\n    }}>{`# Splice Data Handler`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  - It is like a splice method in an array.\n  - It will remove the object in an array and add the new object in an array.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"splice-data-handler-without-filter\"\n    }}>{`Splice Data Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Splice-Data-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    spliceKey: [1, 3],\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"splice-data-handler-with-filter\"\n    }}>{`Splice Data Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Splice-Data-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    spliceKey: [1, 3],\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"splice-data-handler-with-multi-filter\"\n    }}>{`Splice Data Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Splice-Data-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    spliceKey: [1, 3],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"splice-data-handler-with-subkey\"\n    }}>{`Splice Data Handler with Subkey`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n- sub key for handling sub level of data in an object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Splice-Data-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    spliceKey: [1, 3],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"splice-data-handler-function---api\"\n    }}>{`Splice Data Handler Function - Api`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`  Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\nexport const spliceHandler = ({\n  task: { clearData, spliceKey = [], subKey = [] } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data: oldData = {} } = {}) => ({\n  data: (() => {\n    if (subKey.length > 0 && Array.isArray(getIn(oldData, subKey))) {\n      const _oldCopyData = {\n        ...oldData,\n        ...successData,\n        [subKey[0]]: oldData[subKey[0]],\n      };\n      // return _oldCopyData\n      return updateIn(_oldCopyData, subKey, (_oldData) => {\n        if (clearData) return Safe(successData, \\`.\\${subKey.join(\".\")}\\`, []);\n        return updateCallback\n          ? updateCallback(\n              _oldData,\n              Safe(successData, \\`.\\${subKey.join(\".\")}\\`, [])\n            )\n          : Array.isArray(_oldData)\n          ? (() => {\n              const _newData = _oldData.slice();\n              _newData.splice(\n                ...spliceKey,\n                ...Safe(successData, \\`.\\${subKey.join(\".\")}\\`, [])\n              );\n              return _newData;\n            })()\n          : _oldData;\n      });\n    }\n    const newData = Array.isArray(oldData)\n      ? (() => {\n          const _newData = oldData.slice();\n          return _newData.splice(\n            ...spliceKey,\n            ...Safe(successData, \\`.\\${subKey.join(\".\")}\\`, [])\n          );\n        })()\n      : oldData;\n    return updateCallback ? updateCallback(oldData, successData) : newData;\n  })(),\n  error: false,\n  lastUpdated: generateTimeStamp(),\n  isError: false,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-custom-handler\"\n    }}>{`# Custom Handler`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n- You are not limited to built-in handlers.\n- With the help of custom handler you can create n number of handlers in you project.\n- You can even share your logic in gitub for other developers to use.\n- It will update existing data or create a new data based on your logic.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-handler-without-filter\"\n    }}>{`Custom Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Custom-Handler\",\n    customHandler: ({ task, request, successData, errorData, status }) => ({\n      data = {},\n    } = {}) => {\n      return {\n        data: {\n          comment: \"Hi i added comment in data\",\n        },\n      };\n    },\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-handler-with-filter\"\n    }}>{`Custom Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Custom-Handler\",\n    customHandler: ({ task, request, successData, errorData, status }) => ({\n      data = {},\n    } = {}) => {\n      return {\n        data: {\n          comment: \"Hi i added comment in data\",\n        },\n      };\n    },\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"custom-handler-with-multi-filter\"\n    }}>{`Custom Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Custom-Handler\",\n    customHandler: ({ task, request, successData, errorData, status }) => ({\n      data = {},\n    } = {}) => {\n      return newObject(data, {\n        data: {\n          comment: \"Hi i added comment in data\",\n        },\n      });\n    },\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"how-to-use-custom-handler-for-all-the-apis\"\n    }}>{`How to use custom handler for all the api's`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\n\nconst handler = () => () => {};\nconst handler2 = () => () => {};\n\nconst HOC = HocConfigure({\n  handlers: [\n    {\n      name: \"my-own-handler\",\n      handler,\n    },\n    {\n      name: \"my-own-handler-2\",\n      handler: handler2,\n    },\n  ],\n});\n\nconst AuthHoc = HOC({\n  name: \"Auth\",\n  apiEndPoints: {},\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-toggle-key-handler\"\n    }}>{`# Toggle Key Handler`}</h2>\n    <h3 {...{\n      \"id\": \"toggle-key-handler-without-filter\"\n    }}>{`Toggle Key Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Toggle-Key-Handler\",\n    toggleKey: [\"status\"],\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"toggle-key-handler-with-filter\"\n    }}>{`Toggle Key Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Toggle-Key-Handler\",\n    toggleKey: [\"status\"],\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"toggle-key-handler-with-multi-filter\"\n    }}>{`Toggle Key Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Toggle-Key-Handler\",,\n    toggleKey: ['status']\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-things-to-remember-7\"\n    }}>{`# Things to Remember`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` -Adding multiple filters will create multiple copy of the same data.\n-It will helps to handle different types of data in same api..such as variable kind of filters.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"toggle-key-handler-function---api\"\n    }}>{`Toggle Key Handler Function - Api`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`    Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\nconst toggleData = (obj, keyArray) =>\n  Object.keys(obj).reduce(\n    (acc, curr) => ({\n      ...acc,\n      [curr]: keyArray.includes(curr) ? !obj[curr] : obj[curr],\n    }),\n    {}\n  );\nexport const toggleKeyHandler = ({\n  task: { key, id, toggleKey = [], subKey = [] } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data = {} } = {}) => ({\n  data:\n    subKey.length > 0\n      ? updateIn(\n          {\n            ...data,\n            ...successData,\n            [subKey[0]]: data[subKey[0]],\n          },\n          subKey,\n          (_Data) =>\n            updateCallback\n              ? updateCallback(_Data, successData) || _Data\n              : (!Array.isArray(_Data) && toggleData(_Data, toggleKey)) ||\n                (Array.isArray(id) &&\n                  _Data.reduce(\n                    (acc, curr) =>\n                      id.includes(curr[key])\n                        ? acc.concat([toggleData(curr, toggleKey)])\n                        : acc.concat([curr]),\n                    []\n                  )) ||\n                _Data.map((_data) =>\n                  _data[key] === id ? toggleData(_data, toggleKey) : _data\n                )\n        )\n      : updateCallback\n      ? updateCallback(data, successData) || data\n      : (!Array.isArray(data) && toggleData(data, toggleKey)) ||\n        (Array.isArray(id) &&\n          data.reduce(\n            (acc, curr) =>\n              id.includes(curr[key])\n                ? acc.concat([toggleData(curr, toggleKey)])\n                : acc.concat([curr]),\n            []\n          )) ||\n        data.map((_data) =>\n          _data[key] === id ? toggleData(_data, toggleKey) : _data\n        ),\n  lastUpdated: generateTimeStamp(),\n  isError: false,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-dont-update-data-key-handler\"\n    }}>{`# Don't update data Key Handler`}</h2>\n    <h3 {...{\n      \"id\": \"-things-to-remember-8\"\n    }}>{`# Things to Remember`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{` - This handler won't update only data.\n - But it will update loaders,error state, and also toast.\n - This handler will work only on api calls.\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dont-update-data-handler-without-filter\"\n    }}>{`Dont Update Data Handler without filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Dont-Update-Data-Handler\",\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dont-update-data-handler-with-filter\"\n    }}>{`Dont Update Data Handler with filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Dont-Update-Data-Handler\",\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dont-update-data-handler-with-multi-filter\"\n    }}>{`Dont Update Data Handler with Multi-filter`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Dont-Update-Data-Handler\",,\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"advanced-topics\"\n    }}>{`Advanced Topics`}</h1>\n    <h2 {...{\n      \"id\": \"-creating-custom-reducer\"\n    }}>{`# Creating Custom Reducer`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === \"LOGOUT\") return initialState;\n    return state;\n  },\n  name: \"Auth\",\n});\n/*\nExample: const { dispatch } = props;\ndispatch({ type: \"LOGOUT\" });\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-modifying-api-end-points-reducer-constants\"\n    }}>{`# Modifying api end points reducer constants`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\nconst { CALL, ON_SUCCESS } = commonConstants;\nconst reducer = ({\n  constants,\n  successData,\n  restSuccessData,\n  payload,\n  query,\n  state,\n  params,\n  restPayload,\n  loadingStatus,\n  statusCode,\n  type,\n  reset,\n  newState,\n  method,\n  statusMessage,\n  errorData,\n  restErrorData,\n  resetState,\n  initialState,\n  commonHandler,\n  commmonErrorHandler,\n  defaultReducerHandler,\n}) => {\n  switch (type) {\n    case \"RESET\":\n      switch (method) {\n        case ON_SUCCESS:\n          return newObject(state, resetState);\n        default:\n          return state;\n      }\n    case constants.VERIFY_OTP_API[CALL]:\n      switch (method) {\n        case ON_SUCCESS:\n          return newState(({ [type]: Data }) => ({\n            profile: successData,\n            isLoggedIn: !!successData.data.mobile_number,\n            [type]: newObject(Data, {\n              lastUpdated: generateTimeStamp(),\n              data: successData,\n            }),\n          }));\n        default:\n          return defaultReducerHandler(); // for handling others such as Error\n      }\n    case authenticationConstants.USER_PROFILE_API[CALL]:\n      switch (method) {\n        case ON_SUCCESS:\n          return newState(({ profile, [type]: Data }) => ({\n            authorization: true,\n            isLoggedIn: !!successData.name,\n            profile: newObject(profile, successData),\n            [type]: newObject(Data, commonHandler()), // you can use commonHandler for handling task by itsself\n          }));\n        case ON_ERROR:\n          return newObject(state, ({ [type]: Data }) => ({\n            isError: true,\n            isLoggedIn: false,\n            [type]: newObject(Data, commmonErrorHandler()), // you can use commmonErrorHandler for handling error by itsself\n          }));\n        case ON_UNMOUNT: {\n          return reset(); // This is just an example don't do this if it is not required.Reset will be handled by itsself\n        }\n        default:\n          return state;\n      }\n    default:\n      return defaultReducerHandler();\n  }\n};\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    VERIFY_OTP_API: {\n      url: \\`users/verify-otp/\\`,\n      method: \"POST\",\n    },\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n    dontReset: {\n      REGISTER_API,\n    },\n  },\n  reducer,\n  constantReducer: ({\n    type,\n    state,\n    action,\n    constants,\n    initialState,\n    resetState,\n  }) => {\n    if (type === \"LOGOUT\")\n      return action.payload.resetEntireState ? initialState : resetState; // resetState wont reset if you specify the api in (dontReset) key while creating hoc\n    return state;\n  },\n  name: \"Auth\",\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-dont-reset-on-setting-to-initial-state\"\n    }}>{`# Don't reset on setting to initial state`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst TEST_API = {};\nconst REGISTER_API = {\n  url: \\`users/user-signup/\\`,\n  method: \"POST\",\n};\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  dontReset: {\n    REGISTER_API,\n  },\n  apiEndPoints: {\n    TEST_API,\n    REGISTER_API,\n  },\n  constantReducer: ({\n    type,\n    state,\n    action,\n    constants,\n    initialState,\n    resetState,\n  }) => {\n    if (type === \"LOGOUT\") return resetState; // it will only reset TEST_API to initial state\n    return state;\n  },\n  name: \"Auth\",\n});\n/*\nExample:\n\nconst { dispatch } = props;\ndispatch({ type: 'LOGOUT' });\n*/\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"cancelling-api-calls\"\n    }}>{`Cancelling Api Calls`}</h1>\n    <h2 {...{\n      \"id\": \"-cancel-on-unmount\"\n    }}>{`# cancel on unmount`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`     Note:\n     -This function will help cancel unwanted api calls\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const { ON_SUCCESS, ON_UNMOUNT } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CANCEL, DEMO_API_CONFIGURATION_CALL } = props;\n\nuseEffect(() => {\n  DEMO_API_CONFIGURATION_CALL();\n  return () => {\n    DEMO_API_CONFIGURATION_CANCEL(ON_UNMOUNT);\n  };\n}, []);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -ON_UMOUNT will reset the particular state to initial\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`const { ON_SUCCESS, ON_UNMOUNT } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CANCEL, DEMO_API_CONFIGURATION_CALL } = props;\n\nuseEffect(() => {\n  DEMO_API_CONFIGURATION_CALL();\n  return () => {\n    DEMO_API_CONFIGURATION_CANCEL(ON_UNMOUNT, [\"filter\"]);\n  };\n}, []);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-axios-interceptors\"\n    }}>{`# Axios Interceptors`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from 'react-boilerplate-redux-saga-hoc';\nmport axios from 'axios';\nimport promise from 'promise';\n\nconst request = axios;\nrequest.defaults.withCredentials = true;\nrequest.interceptors.request.use(\n  config => {\n\n    if (!config.headers.Authorization) {\n      const token = localStorage.getItem('token');\n      if (token)\n        request.defaults.headers.common.Authorization = \\`Bearer \\${token}\\`;\n    }\n    return config;\n  },\n  error => promise.reject(error),\n);\n\nrequest.interceptors.response.use(\n  response => {\n\n    return response;\n  },\n  error => Promise.reject(error),\n);\n\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: 'POST',\n    },\n  },\n  axiosInterceptors: request,\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === 'LOGOUT')\n      return initialState;\n    return state;\n  },\n  name: 'Auth',\n});\n/*\nExample:\n\nconst { dispatch } = props;\ndispatch({ type: 'LOGOUT' });\n\n*/\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-inject-saga-and-reducer-to-the-store\"\n    }}>{`# Inject saga and reducer to the store`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   - By injecting reducer and saga you can able to create your own reducer and saga.\n   - It helps in most of the scnarios such as polling,creating youer own logic ..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { takeLatest } from \"redux-saga/effects\";\nimport { injectReducer, injectSaga } from \"react-boilerplate-redux-saga-hoc\";\n\nconst reducer = (state, action) => {\n  return state;\n};\n\nfunction* getRepos() {}\n\nconst saga = function*() {\n  yield takeLatest(\"LOAD_DATA\", getRepos);\n};\n\nconst withSaga = injectSaga({ key: \"dashboard\", saga });\nconst withReducer = injectReducer({ key: \"dashboard\", reducer });\n\nexport default compose(withSaga, withReducer)(Dashboard);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-inject-saga-and-reducer-to-the-store-by-using-hooks\"\n    }}>{`# Inject saga and reducer to the store by using hooks`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`     Note:\n     -By injecting reducer and saga you can able to create your own reducer and saga. It helps in most of the scenarios such as polling,creating your own logic..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { takeLatest } from \"redux-saga/effects\";\nimport {\n  useInjectReducer,\n  useInjectSaga,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst reducer = (state, action) => {\n  return state;\n};\nfunction* getRepos() {}\n\nconst saga = function*() {\n  yield takeLatest(\"LOAD_DATA\", getRepos);\n};\n\nconst key = \"Dashboard\";\n\nconst Dashboard = () => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  return <div />;\n};\n\nexport default Dashboard;\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"util-functions\"\n    }}>{`Util Functions`}</h1>\n    <h2 {...{\n      \"id\": \"-safe-function\"\n    }}>{`# Safe Function`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n-This function will be used for accessing deep level of object.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { Safe } from 'react-boilerplate-redux-saga-hoc';\n\nExample 1:\nconst defaultValue = '';\nconst object = { name: { name: { age: { person: 'jfjj' } } } }\nconst Person =  Safe(object , '.name.name.age.person', defaultValue);\n\nExample 2:\nconst callback = (person) => return person + person;\nconst Person = Safe(object , '.name.name.age.person', defaultValue , callback)\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n -defaultValue is typeof value should return ,if the value return array by default safe function will return default value.\n -if don't pass any value in third parameter it return the ececuted value otherwise return null.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-other-util-functions\"\n    }}>{`# Other Util functions`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { cloneObject , newObject } from 'react-boilerplate-redux-saga-hoc';\n\nExample 1:\nconst oldObject = { name: '' };\nconst newObject = { age: '' };\nconst obj = cloneObject(oldObject, newObject)\nobj returns {  name: '', age: '' }\n\nExample 2:\nconst object = { name: '',profile: { name : '' } };\nconst obj = newObject(object,({ profile }) => ({\n   profile: newObject(profile, { age: 20 })\n}))\nobj returns {  name: '', age: 20 }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-params\"\n    }}>{`# PARAMS`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`task - <Object>\ntasks - <Array of task>\nrequest - <Object>\ncallback - <Object>\nupdateStateCallback - <Function>\nsubKey - <Array> accessing deep object\ndeleteKey - <Array> of keys to delete\nfilter - <Array> storing data based on filter\nfilter - <Array> update n number of filters at single task\neg: [['filter1'],['filter2']]\nid - <Array> || <string> || <number>\nkey - id Key example: 'user_id' <String>\nclearData - clearing data <Boolean> for infinite\nisAppendTop - for storing data in top for infinite\nlimit - <Number> for infinite\nquery - <Object> adding query parameters to url\nparams - <Object> params for aps eg:api/:id\nsuccessCallback - <Function> <{res : <Object>,data<Object>,status, message}>\nerrorCallback - <Function> <{error : <Error instance>,errorData<Object>,status, message}>\nupdateCallback - <Function> <Object>\npayload - <Function>\nON_SUCCESS - storing data based on success data or loaded data\nON_UNMOUNT - reset the data\nON_ERROR - setting the loader false and error data\nApi End Point Params -\n* url,\n* method,\n* responseMessageKey,\n* responseDataKey,\n* responseStatusKey,\n* responseStatusCodeKey,\n* errorStatusKey,\n* errorMessageKey,\n* errorDataKey,\n* errorHandlerStatusCode,\n* effect - takeLatest default || 'every' for takeEvery\n\nGetData - returns\n* data - <Object>\n* loader - <Boolean>\n* lastUpdated - <Boolean>\n* isInfinite - <Boolean>\n* isInfiniteEnd - <Boolean>\n\nGetData - params\n* Object(data) - <Object>\n* defaultValue - <Array || Object || Boolean || null || String >\n* loader - <Boolean>\n* filter - <Array>\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"-handling-multiple-tasks\"\n    }}>{`# Handling Multiple tasks`}</h1>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#-contents\"\n      }}>{`Go to Top`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`// hooks/customHook.js\nimport { useEffect, useMemo } from \"react\";\n\nexport default (\n  {\n    Auth_hoc: {\n      actions: { TEST_API_CUSTOM_TASK, TEST_SUB_API_CUSTOM_TASK },\n    },\n    Auth_data: { TEST_API, TEST_SUB_API },\n    getData,\n  },\n  { commonConstants }\n) => {\n  const { ON_SUCCESS } = commonConstants;\n  useEffect(() => {\n    TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n      task: {\n        response: {\n          data: {\n            items: [\n              {\n                name: \"cartoon\",\n              },\n            ],\n          },\n        },\n      },\n    });\n    TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n      task: {\n        response: {\n          data: {\n            count: 20,\n          },\n        },\n      },\n    });\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: \"Infinite-handler\",\n          subKey: [\"items\"],\n          response: {\n            data: {\n              count: 50,\n              items: [\n                {\n                  name: \"mango\",\n                },\n              ],\n            },\n          },\n        },\n      });\n    }, 1);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: \"Delete-Handler\",\n          subKey: [\"items\"],\n          id: \"cartoon\",\n          key: \"name\",\n        },\n      });\n    }, 2);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: \"Delete-Key-Handler\",\n          subKey: [\"items\"],\n          id: \"mango\",\n          key: \"name\",\n          deleteKey: [\"name\"],\n        },\n      });\n    }, 3);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: \"Data-Handler\", // no need specify name if you are using data handler it ia default handler\n          resonse: {\n            data: {\n              count: 100,\n              items: [\n                {\n                  name: \"1\",\n                },\n                {\n                  name: \"2\",\n                },\n                {\n                  name: \"3\",\n                },\n                {\n                  name: \"4\",\n                },\n              ],\n            },\n          },\n        },\n      });\n    }, 4);\n    // Handling multiple tasks of same api in on action\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        tasks: [\n          {\n            task: {\n              name: \"Infinite-Handler\",\n              clearData: true,\n              response: {\n                data: {\n                  count: 30,\n                  items: [\n                    { name: \"10\" },\n                    { name: \"15\" },\n                    { name: \"25\" },\n                    { name: \"35\" },\n                    { name: \"45\" },\n                  ],\n                },\n              },\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Delete-Handler\",\n              subKey: [\"items\"],\n              id: \"1\",\n              key: \"name\",\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Infinite-Handler\",\n              subKey: [\"items\"],\n              //   clearData: true,\n              response: {\n                data: {\n                  count: 300,\n                  items: [{ name: \"54\" }],\n                  data: [{ name: \"54\" }],\n                },\n              },\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Delete-Handler\",\n              subKey: [\"items\"],\n              id: [\"3\", \"4\", \"5\"],\n              key: \"name\",\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Update-Handler\",\n              subKey: [\"items\"],\n              id: [\"10\", \"25\", \"15\"],\n              key: \"name\",\n              values: {\n                \"10\": {\n                  status: \"married\",\n                },\n                \"25\": {\n                  status: \"unmarried\",\n                },\n                \"15\": {\n                  status: \"married\",\n                },\n              },\n              response: {\n                data: {\n                  count: 30,\n                  limit: 20,\n                },\n              },\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Delete-Key-Handler\",\n              subKey: [\"items\"],\n              id: [\"10\"],\n              key: \"name\",\n              filter: [\"check\"],\n              deleteKey: [\"name\"],\n            },\n          },\n          {\n            task: {\n              name: \"Toggle-Key-Handler\",\n              subKey: [\"items\"],\n              id: [\"15\"],\n              key: \"name\",\n              filter: [\"check\"],\n              toggleKey: [\"name\", \"status\"],\n            },\n          },\n        ],\n        filter: [[\"name\"], [\"chrisie\"]], // this is common filter for task if you dont specify filter inside task it will use this filter\n        response: {}, // this is common response for task if you dont specify response inside task it will use this response\n      });\n    }, 5);\n  }, []);\n  const test = useMemo(() => getData(TEST_API, {}, false), [TEST_API]);\n  const test_sub = useMemo(() => getData(TEST_SUB_API, {}, false), [\n    TEST_SUB_API,\n  ]);\n  return {\n    test,\n    test_sub,\n  };\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"contributing\"\n    }}>{`Contributing`}</h2>\n    <p>{`Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.`}</p>\n    <p>{`Please make sure to update tests as appropriate.`}</p>\n    <h2 {...{\n      \"id\": \"license\"\n    }}>{`License`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://choosealicense.com/licenses/mit/\"\n      }}>{`MIT`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","module.exports = __webpack_public_path__ + \"static/10-63f4dc4dc4aa2bc0480edeb232e77c7b.png\";","module.exports = __webpack_public_path__ + \"static/1-c550d7da5fa35428d85b2097102d78ea.png\";","module.exports = __webpack_public_path__ + \"static/6-0a202102bf8ba8f6835aa1263ce85910.png\";","module.exports = __webpack_public_path__ + \"static/7-f5a7d344e1ab3de4c723fc7a17d114f9.png\";","module.exports = __webpack_public_path__ + \"static/8-266e166916a7bd2fcb55d001d7a80882.png\";","module.exports = __webpack_public_path__ + \"static/3-c3c247ded4c81736ff3389328f4195e5.png\";","module.exports = __webpack_public_path__ + \"static/9-094444e6582de155b2ad8483b65403db.png\";"],"sourceRoot":""}