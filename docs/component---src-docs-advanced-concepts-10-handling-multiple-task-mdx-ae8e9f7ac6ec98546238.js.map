{"version":3,"sources":["webpack:///../src/docs/Advanced Concepts/10.handling-multiple-task.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAMaA,G,UAAe,S,0OAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,6BAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,0/K,wOAoOTJ,EAAWK,gBAAiB","file":"component---src-docs-advanced-concepts-10-handling-multiple-task-mdx-ae8e9f7ac6ec98546238.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"-handling-multiple-tasks\"\n    }}>{`# Handling Multiple tasks`}</h1>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`// hooks/customHook.js\nimport { useEffect, useMemo } from \"react\";\n\nexport default (\n  {\n    Auth_hoc: {\n      actions: { TEST_API_CUSTOM_TASK, TEST_SUB_API_CUSTOM_TASK },\n    },\n    Auth_data: { TEST_API, TEST_SUB_API },\n    getData,\n  },\n  { commonConstants }\n) => {\n  const { ON_SUCCESS } = commonConstants;\n  useEffect(() => {\n    TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n      task: {\n        response: {\n          data: {\n            items: [\n              {\n                name: \"cartoon\",\n              },\n            ],\n          },\n        },\n      },\n    });\n    TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n      task: {\n        response: {\n          data: {\n            count: 20,\n          },\n        },\n      },\n    });\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: \"Infinite-handler\",\n          subKey: [\"items\"],\n          response: {\n            data: {\n              count: 50,\n              items: [\n                {\n                  name: \"mango\",\n                },\n              ],\n            },\n          },\n        },\n      });\n    }, 1);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: \"Delete-Handler\",\n          subKey: [\"items\"],\n          id: \"cartoon\",\n          key: \"name\",\n        },\n      });\n    }, 2);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: \"Delete-Key-Handler\",\n          subKey: [\"items\"],\n          id: \"mango\",\n          key: \"name\",\n          deleteKey: [\"name\"],\n        },\n      });\n    }, 3);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: \"Data-Handler\", // no need specify name if you are using data handler it ia default handler\n          resonse: {\n            data: {\n              count: 100,\n              items: [\n                {\n                  name: \"1\",\n                },\n                {\n                  name: \"2\",\n                },\n                {\n                  name: \"3\",\n                },\n                {\n                  name: \"4\",\n                },\n              ],\n            },\n          },\n        },\n      });\n    }, 4);\n    // Handling multiple tasks of same api in on action\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        tasks: [\n          {\n            task: {\n              name: \"Infinite-Handler\",\n              clearData: true,\n              response: {\n                data: {\n                  count: 30,\n                  items: [\n                    { name: \"10\" },\n                    { name: \"15\" },\n                    { name: \"25\" },\n                    { name: \"35\" },\n                    { name: \"45\" },\n                  ],\n                },\n              },\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Delete-Handler\",\n              subKey: [\"items\"],\n              id: \"1\",\n              key: \"name\",\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Infinite-Handler\",\n              subKey: [\"items\"],\n              //   clearData: true,\n              response: {\n                data: {\n                  count: 300,\n                  items: [{ name: \"54\" }],\n                  data: [{ name: \"54\" }],\n                },\n              },\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Delete-Handler\",\n              subKey: [\"items\"],\n              id: [\"3\", \"4\", \"5\"],\n              key: \"name\",\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Update-Handler\",\n              subKey: [\"items\"],\n              id: [\"10\", \"25\", \"15\"],\n              key: \"name\",\n              values: {\n                \"10\": {\n                  status: \"married\",\n                },\n                \"25\": {\n                  status: \"unmarried\",\n                },\n                \"15\": {\n                  status: \"married\",\n                },\n              },\n              response: {\n                data: {\n                  count: 30,\n                  limit: 20,\n                },\n              },\n            },\n            filter: [\"check\"],\n          },\n          {\n            task: {\n              name: \"Delete-Key-Handler\",\n              subKey: [\"items\"],\n              id: [\"10\"],\n              key: \"name\",\n              filter: [\"check\"],\n              deleteKey: [\"name\"],\n            },\n          },\n          {\n            task: {\n              name: \"Toggle-Key-Handler\",\n              subKey: [\"items\"],\n              id: [\"15\"],\n              key: \"name\",\n              filter: [\"check\"],\n              toggleKey: [\"name\", \"status\"],\n            },\n          },\n        ],\n        filter: [[\"name\"], [\"chrisie\"]], // this is common filter for task if you dont specify filter inside task it will use this filter\n        response: {}, // this is common response for task if you dont specify response inside task it will use this response\n      });\n    }, 5);\n  }, []);\n  const test = useMemo(() => getData(TEST_API, {}, false), [TEST_API]);\n  const test_sub = useMemo(() => getData(TEST_SUB_API, {}, false), [\n    TEST_SUB_API,\n  ]);\n  return {\n    test,\n    test_sub,\n  };\n};\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}