{"version":3,"sources":["webpack:///../src/docs/Basic Concepts/5.usingfilter.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,2NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,kBADR,kBAGA,iBAAQ,CACN,GAAM,gCADR,iCAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,uIAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ggBA2BL,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,qFAGL,iBAAQ,CACN,GAAM,qCADR,sCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,6IAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,29BA2CL,iBAAQ,CACN,GAAM,yDADR,0DAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,uIAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qVAgBL,iBAAQ,CACN,GAAM,mCADR,oCAGA,iBAAQ,CACN,GAAM,KAER,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,giBAuBL,+BAAc,6BAAGA,WAAW,KAAQ,CAChC,KAAQ,sGADE,qD,yNAOlBJ,EAAWK,gBAAiB","file":"component---src-docs-basic-concepts-5-usingfilter-mdx-f03c6d333fded629e3fd.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"adding-filters\"\n    }}>{`Adding Filters`}</h1>\n    <h2 {...{\n      \"id\": \"-adding-filters-in-api-calls\"\n    }}>{`# Adding filters in api calls`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -Suppose there is a scenario where same api is used with multiple filters.In that case we have to Store different data.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  filter: [\"name\"],\n  request: {\n    params: { id: 2 },\n    query: { type: \"name\" },\n  },\n});\n/*\nExample:\nresponseData = { id: 1 }\nstoreData = { name: { id: 1 }\n*/\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -In this case it will store the data in an object with key 'name'\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-deleting-key-in-an-filter-object\"\n    }}>{`# Deleting key in an Filter object`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -It is almost similar to update, but instead of updating particular key it will delete the particular key from the object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Delete-Key-Handler\",\n    id: [1, 2, 3],\n    key: \"id\",\n    deleteKey: [\"name\", \"age\"],\n  },\n  filter: [\"name\"],\n  request: {\n    params: { id: 1 },\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n  },\n});\n/*\nExample:\n\ndata = { name : [\n  { id: 1, name: 'name1',age: '13',gender: 'male' },\n  { id: 1, name: 'name1',age: '12',gender: 'female' }\n]}\nAfter executing task:\ndata = { name : [\n  { id: 1, gender: 'male' },\n  { id: 2, gender: 'female' }\n}]\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-deleting-filter-data-by-calling-custom-task\"\n    }}>{`# Manually Deleting Filter Data by calling custom task`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n   -Calling custom task will allow us to manipulate data without calling any api..such as adding count,limit,skip..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    task: \"Delete-Handler\",\n    id: [1, 2],\n    key: \"id\",\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-filter-data-from-store\"\n    }}>{`# Getting Filter Data from store`}</h2>\n    <h2 {...{\n      \"id\": \"\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMemo } from \"react\";\nimport { useQuery } from \"react-boilerplate-redux-saga-hoc\";\nconst {\n  Auth_hoc: {\n    reducerName,\n    reducerConstants: { DEMO_API_CONFIGURATION },\n  },\n} = props;\n\nconst [nameDate, ageData] = useQuery(reducerName, [\n  { key: DEMO_API_CONFIGURATION, filter: [\"name\"] },\n  { key: DEMO_API_CONFIGURATION, filter: [\"age\"] },\n]);\n\n/**\nnameData returns \n{ loader, data, latUpdated, isInfinite, isInfiniteEnd } \nageData returns \n{ loader, data, latUpdated, isInfinite, isInfiniteEnd } \n**/\n`}</code></pre>\n    <p>{`Next - `}<a parentName=\"p\" {...{\n        \"href\": \"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/using-subkey-for-accessing-deep-object\"\n      }}>{`How to access deep object by using sub key`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}