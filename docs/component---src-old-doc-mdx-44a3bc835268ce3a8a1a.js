(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{sop3:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n("Fcif"),r=n("+I+c"),o=(n("mXGw"),n("/FXl")),s=n("TjRS"),c=(n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/oldDoc.mdx"}});var l={_frontmatter:c},i=s.a;function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)(i,Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{})," Note: If you using version 1.0.89 or below please refer this documentation\n")),Object(o.b)("h1",{id:"react-boilerplate-redux-saga-hoc"},"React Boilerplate Redux Saga HOC"),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("p",null,"This package requires ",Object(o.b)("strong",{parentName:"p"},"React 16.8.4 or later.")),Object(o.b)("p",null,"Use the package manager ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://nodejs.org/en/"}),"npm")," to install react-boilerplate-redux-saga-hoc."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm i react-boilerplate-redux-saga-hoc\n")),Object(o.b)("p",null,"or"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"yarn add react-boilerplate-redux-saga-hoc\n")),Object(o.b)("h2",{id:"-basic-usage"},"# Basic usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'/** App.js **/\n\nimport React from "react";\nimport PropTypes from "prop-types";\nimport { Provider } from "react-redux";\nimport { compose } from "redux";\n\nimport {\n  HOC,\n  commonConstants,\n  store as configureStore,\n} from "react-boilerplate-redux-saga-hoc";\n\nimport useCustomHook from "./hooks/customHook";\n\nconst initialState = {};\nconst isWeb = true; // default true\nconst store = configureStore(initialState, isWeb);\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    REGISTER_API: {\n      url: `users/user-signup/`,\n      method: "POST",\n    },\n  },\n  name: "Auth",\n});\n\nconst DashboardHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_SUB_API: {},\n    DASHBOARD_API: {\n      url: `users/user-signup/`,\n      method: "POST",\n    },\n  },\n  name: "Dash",\n});\n\nconst CustomComponent = compose(\n  AuthenticationHOC,\n  DashboardHOC\n)((props) => {\n  const hooks = useCustomHook(props, { commonConstants });\n  const {\n    test: { data: testData },\n    test_sub: { data: testSubData },\n  } = hooks;\n  console.log(props, hooks);\n  return <div>customHooks</div>;\n});\n\nexport default function App(props) {\n  return (\n    <Provider store={store}>\n      <CustomComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n')),Object(o.b)("h2",{id:"-store-configuration"},"# Store Configuration"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," No need to configure store seperately.Store can be imported from ",Object(o.b)("strong",{parentName:"p"},"react-boilerplate-redux-saga-hoc"))),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import React from "react";\nimport { Provider } from "react-redux";\nimport { store as configureStore } from "react-boilerplate-redux-saga-hoc";\n\nconst initialState = {};\nconst isWeb = true;\nconst store = configureStore(initialState, isWeb); // by default second parameter will be true\nexport default function App(props) {\n  return (\n    <Provider store={store}>\n      <CustomComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n')),Object(o.b)("h1",{id:"before-proceeding-further"},"Before Proceeding Further"),Object(o.b)("p",null,"We already knows ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/"}),"redux")," is a valuable tool for organising your state and also ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux-saga.js.org/"}),"redux-saga")," is a powerful middleware for handling side Effects.With the help of those two tools we have created a package for handling api calls and storing data in an organised way."),Object(o.b)("h2",{id:"-why-should-i-use-this-package"},"# Why should i use this package"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," This package is not an alternative for redux and redux-saga")),Object(o.b)("p",null,"This package is mostly for developer who wants to make development faster and also to handle most of the api calls."),Object(o.b)("h2",{id:"-benefits-of-using-this-package"},"# Benefits of using this package"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Handles api calls automatically by itself")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"No need to create store, constants, actions, saga, reducer")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"It handles cancelling api call by itself")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Handles error, success, cancel, loading, infinite data handling")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"No worry about api calls, loaders...etc")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"No separate coding needed for react and react native"))),Object(o.b)("h2",{id:"-whether-this-package-will-support-for-react-native"},"# Whether this package will support for react-native"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Yes")," ,This package will support for both ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/"}),"react")," and ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://reactnative.dev/"}),"react-native")),Object(o.b)("h1",{id:"how-does-it-works"},"How does it works"),Object(o.b)("h2",{id:"-step-by-step-process"},"# Step by step process"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Importing a package")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC,\n  commonConstants,\n  store,\n} from "react-boilerplate-redux-saga-hoc";\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Creating Api-End-Points")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC,\n  commonConstants,\n  store,\n} from "react-boilerplate-redux-saga-hoc";\n\nconst BASE_URL = "https://jsonplaceholder.typicode.com";\nconst DEMO_GET_API = {\n  url: `${BASE_URL}/posts`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\nconst DEMO_POST_API = {\n  url: ({ id }) => `${BASE_URL}/posts/${id}`,\n  method: "POST",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\nconst DEMO_DELETE_API = {\n  url: ({ id }) => `${BASE_URL}/posts/${id}`,\n  method: "DELETE",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\nconst DEMO_PUT_API = {\n  url: ({ id, type }) => `${BASE_URL}/posts/${id}/${type}`,\n  method: "PUT",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n')),Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," You can create a separate file for api-end-points.js."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Creating HOC")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC,\n  commonConstants,\n  store,\n} from "react-boilerplate-redux-saga-hoc";\nimport {\n  DEMO_GET_API,\n  DEMO_POST_API,\n  DEMO_DELETE_API,\n  DEMO_PUT_API,\n} from "./api-end-points.js";\n\nconst Auth_HOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n  },\n  name: "Auth",\n});\n')),Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," When you create HOC for every endpoints it will create constants, actions, reducer, saga for you..")),Object(o.b)("blockquote",{parentName:"li"},Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Great:")," We are almost done.next step is connect hoc with our component."))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Connecting with Component")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC,\n  commonConstants,\n  store,\n} from "react-boilerplate-redux-saga-hoc";\nimport { compose } from "redux";\n\nimport {\n  DEMO_GET_API,\n  DEMO_POST_API,\n  DEMO_DELETE_API,\n  DEMO_PUT_API,\n} from "./api-end-points.js";\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n  },\n  name: "Auth",\n});\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const hooks = useCustomHook(props, { commonConstants }); // discuss later below\n  const {\n    get: { data },\n  } = hooks;\n  console.log(props, data);\n  return <div>customHooks</div>;\n});\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Configuring Store")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC,\n  commonConstants,\n  store as configureStore,\n} from "react-boilerplate-redux-saga-hoc";\n\nconst initialState = {};\nconst isWeb = true;\nconst store = configureStore(initialState, isWeb); // by default second parameter will be true\n\nexport default function App(props) {\n  return (\n    <Provider store={store}>\n      <CustomComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n'))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Create custom hook")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { useEffect, useMemo } from 'react';\nconst initialLoaderState = true;\nexport default (\n   {\n      Auth_hoc: {\n        actions: {\n        // For API CALLS\n        DEMO_GET_API_CALL,\n        DEMO_POST_API_CALL,\n        DEMO_DELETE_API_CALL,\n        DEMO_PUT_API_CALL,\n        // For API CANCEL\n        DEMO_GET_API_CANCEL,\n        DEMO_POST_API_CANCEL,\n        DEMO_DELETE_API_CANCEL,\n        DEMO_PUT_API_CANCEL,\n        // For Modifying reducer without api calls\n        DEMO_GET_API_CUSTOM_TASK,\n        DEMO_POST_API_CUSTOM_TASK,\n        DEMO_DELETE_API_CUSTOM_TASK,\n        DEMO_PUT_API_CUSTOM_TASK\n      }\n    },\n    Auth_data: {\n      // For getting data\n      DEMO_GET_API,\n      DEMO_POST_API,\n      DEMO_DELETE_API,\n      DEMO_PUT_API,\n    },\n    getData,\n    dispatch,\n  },\n  { commonConstants: { ON_UNMOUNT } },\n) => {\n  const { ON_SUCCESS } = commonConstants;\n  useEffect(() => {\n    DEMO_GET_API_CALL({\n      query: {\n        skip: 0,\n        limit: 1,\n      },\n    });\n    DEMO_POST_API_CALL({\n      payload: {\n        name: 'name',\n        age: 20,\n      },\n      params: {\n        id: 1,\n      },\n    });\n    DEMO_DELETE_API_CALL({\n      params: {\n        id: 1,\n      },\n    });\n    DEMO_PUT_API_CALL({\n      params: {\n        id: 1,\n        type: 'male',\n      },\n    });\n\n    return () => {\n      // For cancelling incomplete api call if you are unmounting this will avoid unwanted network traffic.This is optional no need to pass all the times\n      DEMO_GET_API_CUSTOM_TASK(ON_UNMOUNT);\n      DEMO_POST_API_CUSTOM_TASK(ON_UNMOUNT);\n      DEMO_DELETE_API_CUSTOM_TASK(ON_UNMOUNT);\n      DEMO_PUT_API_CUSTOM_TASK(ON_UNMOUNT);\n    };\n  }, []);\n      DEMO_GET_API,\n      DEMO_POST_API,\n      DEMO_DELETE_API,\n      DEMO_PUT_API,\n  const get = useMemo(() => getData(DEMO_GET_API, {}, initialLoaderState), [DEMO_GET_API]);\n  const post = useMemo(() => getData(DEMO_POST_API, {}, false), [\n    DEMO_POST_API,\n  ]);\n  const put = useMemo(() => getData(DEMO_POST_API, {}, false), [\n    DEMO_PUT_API,\n  ]);\n  const delete = useMemo(() => getData(DEMO_DELETE_API, {}, false), [\n    DEMO_DELETE_API,\n  ]);\n  // const { loader , data , lastUpdated } = get;\n  return {\n    get,\n    post,\n    put,\n    delete\n  };\n};\n"))),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"Using the hook")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC,\n  commonConstants,\n  store,\n} from "react-boilerplate-redux-saga-hoc";\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const hooks = useCustomHook(props, { commonConstants });\n  const {\n    get: { data },\n  } = hooks;\n  console.log(props, data);\n  return <div>customHooks</div>;\n});\n')))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," This is the basic setup for handling api calls.You will find the more useful features in below such as updating, deleting data..Handling multiple tasks..etc")),Object(o.b)("h1",{id:"storing-data"},"Storing Data"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("h2",{id:"-storing-data-automatically-by-calling-api"},"# storing data automatically by calling api"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Data will be stored automatically in the reducer and also it handles all the states..such as error,infinte,loader..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL();\n')),Object(o.b)("h2",{id:"-sending-query-parameters-to-the-api"},"# sending query parameters to the api"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," No need to worry about appending query..Its more simpler just pass the object in the query parameter that will append query in the url.And also passing params is simpler..")),Object(o.b)("h2",{id:""}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," If you need to pass params in the url..then you have to change the url to function to receive params..just like give below..")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  params: { id: 1 },\n  query: { skip: 10, age: [20, 20] },\n  payload: { age: 20 }, // for post calls\n  paramsSerializer: { arrayFormat: "bracket" }, //default: none - refer query-string npm package\n});\n')),Object(o.b)("h2",{id:"-callbacks-for-handling-success-or-failure"},"# Callbacks for handling success or failure"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Callback are another helper function which handles ",Object(o.b)("strong",{parentName:"p"},"errors"),", ",Object(o.b)("strong",{parentName:"p"},"success"),", ",Object(o.b)("strong",{parentName:"p"},"cancel"),"..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/'\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\nconst responseErrorParser = data =>\n  (Array.isArray(data) &&\n    data.reduce((acc, curr) => {\n      const [key, message] = Object.entries(curr)[0];\n      const payloadKey = key.split(',')[1];\n      return {\n        ...acc,\n        [payloadKey]: message,\n      };\n    }, {})) ||\n  {};\n\n DEMO_API_CONFIGURATION_CALL({\n   params: { id: 1 },\n   query: { skip: 10,age: [20,20] },\n   paramsSerializer: {arrayFormat: 'bracket'} //default: none - refer query-string npm package\n   successCallback: ({ res, data, message, status }) => {\n      // handle toast or call any other api\n   },\n   errorCallback: ({ error, errorData: responseErrorParser, message, status, errors }) => {\n      // handle toast or call any other api\n   }\n});\n\n")),Object(o.b)("h2",{id:"-manually-storing-data-by-calling-custom-task"},"# Manually storing data by calling custom task"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Don't worry about terms ",Object(o.b)("strong",{parentName:"p"},"Manually"),",",Object(o.b)("strong",{parentName:"p"},"Automatically")," , its just the common word we used in the real world..The way how it stores or handles data i specified as manually, automatically thats it..You will get used to it.")),Object(o.b)("h2",{id:"-1"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Automatically -")," It will handle api calls and stores data and also handles all the errors, success, loaders...etc")),Object(o.b)("h2",{id:"-2"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Manually -")," It will slight different instead of api calls we are manually storing or updating data..This util function will help you update data in particular reducer..")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(\n  ON_SUCCESS,\n  {},\n  {\n    data: {\n      name: "example",\n    },\n  }\n);\n')),Object(o.b)("h2",{id:"-getting-data-from-store"},"# Getting Data from store"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," We are almost done with basic setup, api calls, storing data...etcNow the main things we have to retrieve the data from the reducer..Don't Worry that is very much simpler than other task.")),Object(o.b)("h2",{id:"-3"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"getData:")," Its an util function which gets the data from the particular reducer and also formats the data in order..(DEMO_API_CONFIGURATION, default || typeof data, initial-loader-state, filter)")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { getData, DEMO_API_CONFIGURATION } = props;\n\nconst test = useMemo(() => getData(DEMO_API_CONFIGURATION, {}, false), [\n  DEMO_API_CONFIGURATION,\n]);\n\n/**\ntest returns \n{\n  loader,\n  data,\n  latUpdated,\n  isInfinite,\n  isInfiniteEnd\n}\n**/\n")),Object(o.b)("h1",{id:"updating-data"},Object(o.b)("strong",{parentName:"h1"},"Updating Data")),Object(o.b)("h2",{id:"-updating-data-automatically-by-calling-api"},"# Updating data automatically by calling api"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It will only update if the reponse data is object otherwise it will replace the data.It wont update Array.Array will be handle diiferent way.you will find Below....")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  isUpdate: true,\n});\n\nExample: storedData = {\n  name: "example",\n  date: "22-8-2222",\n};\nresponseData = {\n  name: "example 2",\n};\nUpdateData = {\n  name: "example 2",\n  date: "22-8-2222",\n};\n')),Object(o.b)("h2",{id:"-updating-data-in-an-array"},"# Updating Data in an Array"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," If the update data is Array it requires extra 2 parameters to itentify the Object thts is ",Object(o.b)("strong",{parentName:"p"},"id,key"))),Object(o.b)("h5",{id:"id---array--string--number---array-of-ids"},"id - Array || string || number - Array of ids"),Object(o.b)("h5",{id:"key---key-example-user_id-string"},"key - Key example: 'user_id' ",Object(o.b)("inlineCode",{parentName:"h5"},"<String>")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/'\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\n DEMO_API_CONFIGURATION_CALL({\n   params: { id: 1 },\n   query: { skip: 10,age: [20,20] },\n   payload: { age: 20 }, // for post calls\n   paramsSerializer: {arrayFormat: 'bracket'} //default: none - refer query-string npm package\n   isUpdate: true,\n   key: 'id',\n   id: [ 2,3 ]\n});\n\nExample:\nstoredData = [{\n  id: 1\n  name: 'example',\n  date: '22-8-2222'\n},\n{\n  id: 2\n  name: 'example',\n  date: '22-8-2222'\n}]\n\nresponseData = {\n  name: 'example 2'\n}\n\nUpdateData = [{\n  id: 1\n  name: 'example',\n  date: '22-8-2222'\n},\n{\n  id: 2\n  name: 'example 2',\n  date: '22-8-2222'\n}]\n\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," In the above scenario id number 3 will be ignored.If u want to append or prepend data there are some other ways...you will find below")),Object(o.b)("h2",{id:"-callbacks-for-handling-updated-data"},"# Callbacks for handling Updated Data"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," There are several callback are available can be used in different requirements")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/'\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\n DEMO_API_CONFIGURATION_CALL({\n   params: { id: 1 },\n   query: { skip: 10,age: [20,21] },\n   paramsSerializer: {arrayFormat: 'bracket'} //default: none - refer query-string npm package\n   updateCallback: (storeData: oldData,responseData: newData) => {\n      return {...oldData,...newData} || oldData.concat(newData) // It will update  the data in paricular reducer\n   },\n   updateStateCallback: ({state: updatedState,data: responseData}) => {\n       return updatedState // By default it takes the updated state if returns undefined or null\n   },\n   errorCallback: ({ error, errorData: responseErrorParser, message, status, errors }) => {\n      // handle toast or call any other api\n   }\n});\n\n")),Object(o.b)("h2",{id:"-manually-updating-data-by-calling-custom-task"},"# Manually updating data by calling custom task"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(\n  ON_SUCCESS,\n  {\n    isUpdate: true,\n    key: "id",\n    id: [1],\n  },\n  {\n    data: {\n      name: "example",\n    },\n  }\n);\n')),Object(o.b)("h2",{id:"-getting-updated-data-from-store"},"# Getting Updated Data from store"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { getData, DEMO_API_CONFIGURATION } = props;\n\nconst test = useMemo(() => getData(DEMO_API_CONFIGURATION, {}, false), [\n  DEMO_API_CONFIGURATION,\n]);\n\n/**\ntest returns \n{\n  loader,\n  data,\n  latUpdated,\n  isInfinite,\n  isInfiniteEnd\n}\n**/\n")),Object(o.b)("h1",{id:"handling-infinite-data-or-infinite-scrolling"},"Handling Infinite Data or Infinite Scrolling"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("h2",{id:"-storing-infinite-data-automatically-by-calling-api"},"# storing infinite data automatically by calling api"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Data will be stored automatically in the reducer and also it handles all the states..such as error,infinte,loader..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  isInfinite: true,\n});\n')),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It will append data if already data is array...other wise it will replace the new data")),Object(o.b)("h2",{id:"-prepend-data-instead-of-appending-data"},"# Prepend data instead of appending data"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It will store the data at the top instead of last")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  params: { id: 1 },\n  isInfinite: true,\n  query: { skip: 10, age: [20, 20] },\n  payload: { age: 20 }, // for post calls\n  isAppendTop: true,\n  paramsSerializer: { arrayFormat: "bracket" }, //default: none - refer query-string npm package\n});\n')),Object(o.b)("h2",{id:"-callbacks-for-handling-success-or-failure-1"},"# Callbacks for handling success or failure"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Callback are another helper function which handles ",Object(o.b)("strong",{parentName:"p"},"errors"),", ",Object(o.b)("strong",{parentName:"p"},"success"),", ",Object(o.b)("strong",{parentName:"p"},"cancel"),"..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/'\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\nconst responseErrorParser = data =>\n  (Array.isArray(data) &&\n    data.reduce((acc, curr) => {\n      const [key, message] = Object.entries(curr)[0];\n      const payloadKey = key.split(',')[1];\n      return {\n        ...acc,\n        [payloadKey]: message,\n      };\n    }, {})) ||\n  {};\n\n DEMO_API_CONFIGURATION_CALL({\n   params: { id: 1 },\n   isInfinite: true,\n   query: { skip: 10,age: [20,20] },\n   paramsSerializer: {arrayFormat: 'bracket'} //default: none - refer query-string npm package\n   successCallback: ({ res, data, message, status }) => {\n      // handle toast or call any other api\n   },\n   errorCallback: ({ error, errorData: responseErrorParser, message, status, errors }) => {\n      // handle toast or call any other api\n   }\n});\n\n")),Object(o.b)("h2",{id:"-manually-storing-or-updating-infinite-data-by-calling-custom-task"},"# Manually storing or updating infinite data by calling custom task"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Calling custom task will allow us to manipulate data without calling any api..such as adding count,linit,skip..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(\n  ON_SUCCESS,\n  {\n    isInfinite: true,\n    isAppendTop: true, // by default it will append at the bottom\n  },\n  {\n    data: [\n      {\n        name: "example",\n      },\n    ],\n  }\n);\n')),Object(o.b)("h2",{id:"-getting-data-from-store-1"},"# Getting Data from store"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," We are almost done with basic setup, api calls, storing data...etcNow the main things we have to retrieve the data from the reducer..Don't Worry that is very much simpler than other task.")),Object(o.b)("h2",{id:"-4"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"getData:")," Its an util function which gets the data from the particular reducer and also formats the data in order..(DEMO_API_CONFIGURATION, default || typeof data, initial-loader-state, filter)")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { getData, DEMO_API_CONFIGURATION } = props;\n\nconst test = useMemo(() => getData(DEMO_API_CONFIGURATION, [], false), [\n  DEMO_API_CONFIGURATION,\n]);\n\n/**\ntest returns \n{\n  loader,\n  data,\n  latUpdated,\n  isInfinite,\n  isInfiniteEnd\n}\n**/\n")),Object(o.b)("h1",{id:"deleting-data"},"Deleting Data"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("h2",{id:"-deleting-data-by-calling-api"},"# Deleting data by calling api"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Data will be deleted automatically in the reducer and also it handles all the states..such as error,infinte,loader..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/';\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  params: { id: 2 },\n  isDelete: true,\n  key: 'id'.\n  id: [ 2 ]\n});\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It will remove that particular object in an array")),Object(o.b)("h2",{id:"-deleting-key-in-an-object"},"# Deleting key in an object"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It is almost similar to update, but instead of updating particular key it will delete the particular key from the object")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/';\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  params: { id: 1 },\n  isInfinite: true,\n  query: { skip: 10, age: [20, 20] },\n  payload: { age: 20 }, // for post calls\n  isAppendTop: true,\n  paramsSerializer: { arrayFormat: 'bracket' }, //default: none - refer query-string npm package\n  isDeleteKey: true,\n  id: [ 1,2,3 ],\n  key: 'id',\n  deleteKey: [ 'name','age']\n});\n\nExample:\n\ndata = [ { id: 1, name: 'name1',age: '13',gender: 'male' },{ id: 1, name: 'name1',age: '12',gender: 'female' }]\nAfter executing task:\ndata = [ { id: 1, gender: 'male' },{ id: 2, gender: 'female' }]\n")),Object(o.b)("h2",{id:"-manually-deleting-by-calling-custom-task"},"# Manually Deleting by calling custom task"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Calling custom task will allow us to manipulate data without calling any api..such as adding count,linit,skip..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  isDelete: true,\n  id: [1, 2],\n  key: "id",\n});\n')),Object(o.b)("h2",{id:"-getting-data-from-store-2"},"# Getting Data from store"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("h2",{id:"-5"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"getData:")," Its an util function which gets the data from the particular reducer and also formats the data in order..(DEMO_API_CONFIGURATION, default || typeof data, initial-loader-state, filter)")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { getData, DEMO_API_CONFIGURATION } = props;\n\nconst test = useMemo(() => getData(DEMO_API_CONFIGURATION, [], false), [\n  DEMO_API_CONFIGURATION,\n]);\n\n/**\ntest returns \n{\n  loader,\n  data,\n  latUpdated,\n  isInfinite,\n  isInfiniteEnd\n}\n**/\n")),Object(o.b)("h1",{id:"adding-filters"},"Adding Filters"),Object(o.b)("h2",{id:"-adding-filters-in-api-calls"},"# Adding filters in api calls"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Suppose there is a scenario where same api is used with multiple filters.In that case we have to Store different data.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/';\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  params: { id: 2 },\n  query: { type: 'name' }\n  filter: [ 'name' ],\n});\n\nExample:\nresponseData = { id: 1 }\nstoreData = { name: { id: 1 }\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," In this case it will store the data in an object with key 'name'")),Object(o.b)("h2",{id:"-deleting-key-in-an-filter-object"},"# Deleting key in an Filter object"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It is almost similar to update, but instead of updating particular key it will delete the particular key from the object")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/';\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  params: { id: 1 },\n  isInfinite: true,\n  query: { skip: 10, age: [20, 20] },\n  payload: { age: 20 }, // for post calls\n  isAppendTop: true,\n  paramsSerializer: { arrayFormat: 'bracket' }, //default: none - refer query-string npm package\n  isDeleteKey: true,\n  id: [ 1,2,3 ],\n  key: 'id',\n  deleteKey: [ 'name','age'],\n  filter: [ 'name' ],\n});\n\nExample:\n\ndata = { name : [\n  { id: 1, name: 'name1',age: '13',gender: 'male' },\n  { id: 1, name: 'name1',age: '12',gender: 'female' }\n]}\nAfter executing task:\ndata = { name : [\n  { id: 1, gender: 'male' },\n  { id: 2, gender: 'female' }\n}]\n")),Object(o.b)("h2",{id:"-manually-deleting-filter-data-by-calling-custom-task"},"# Manually Deleting Filter Data by calling custom task"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Calling custom task will allow us to manipulate data without calling any api..such as adding count,limit,skip..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  isDelete: true,\n  id: [1, 2],\n  key: "id",\n  filter: ["name"],\n});\n')),Object(o.b)("h2",{id:"-getting-filter-data-from-store"},"# Getting Filter Data from store"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("h2",{id:"-6"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"getData:")," Its an util function which gets the data from the particular reducer and also formats the data in order..(DEMO_API_CONFIGURATION, default || typeof data, initial-loader-state, filter)")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const { getData, DEMO_API_CONFIGURATION } = props;\n\nconst nameData = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, [], false, ["name"]),\n  [DEMO_API_CONFIGURATION]\n);\n\nconst ageData = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, [], false, ["age"]),\n  [DEMO_API_CONFIGURATION]\n);\n\n/**\ntest returns \n{\n  loader,\n  data,\n  latUpdated,\n  isInfinite,\n  isInfiniteEnd\n}\n**/\n')),Object(o.b)("h1",{id:"using-subkey-for-accessing-deep-object"},"Using Subkey for accessing deep object"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("h2",{id:"-adding-filters-in-deep-object"},"# Adding filters in Deep Object"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Incase you want to update deep object we can use subkey to navigate to that object")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/';\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  subKey: [ 'data' ],\n  params: { id: 2 },\n  query: { type: 'name' }\n  filter: [ 'name' ],\n});\n\nExample:\nresponseData = { data : { id: 1 } }\nstoreData = { name: { data: { id: 1 } }\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," In this case it will store the data in an object with key 'name'")),Object(o.b)("h2",{id:"-deleting-key-in-an-deep-object"},"# Deleting key in an deep object"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," It is almost similar to update, but instead of updating particular key it will delete the particular key from the object")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const BASE_URL = 'https://example.com/';\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: 'GET',\n responseStatusCode: [900],\n  responseStatusCodeKey: 'code',\n  responseDataKey: 'data',\n  responseMessageKey: 'status',\n  errorMessageKey: 'error',\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  params: { id: 1 },\n  subKey: [ 'data' ],\n  isInfinite: true,\n  query: { skip: 10, age: [20, 20] },\n  payload: { age: 20 }, // for post calls\n  isAppendTop: true,\n  paramsSerializer: { arrayFormat: 'bracket' }, //default: none - refer query-string npm package\n  isDeleteKey: true,\n  id: [ 1,2,3 ],\n  key: 'id',\n  deleteKey: [ 'name','age'],\n  filter: [ 'name' ],\n});\n\nExample:\n\ndata = { name : [\n  { id: 1, name: 'name1',age: '13',gender: 'male' },\n  { id: 1, name: 'name1',age: '12',gender: 'female' }\n]}\nAfter executing task:\ndata = { name : { data : [\n  { id: 1, gender: 'male' },\n  { id: 2, gender: 'female' }\n]}}\n")),Object(o.b)("h2",{id:"-manually-deleting-subkey-data-by-calling-custom-task"},"# Manually Deleting Subkey Data by calling custom task"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Calling custom task will allow us to manipulate data without calling any api..such as adding count,limit,skip..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  isDelete: true,\n  subKey: ["data"],\n  id: [1, 2],\n  key: "id",\n  filter: ["name"],\n});\n')),Object(o.b)("h2",{id:"-getting-filter-data-from-store-1"},"# Getting Filter Data from store"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("h2",{id:"-7"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"getData:")," Its an util function which gets the data from the particular reducer and also formats the data in order..(DEMO_API_CONFIGURATION, default || typeof data, initial-loader-state, filter)")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const { getData, DEMO_API_CONFIGURATION } = props;\n\nconst nameData = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, [], false, ["name"]),\n  [DEMO_API_CONFIGURATION]\n);\n\n/**\ntest returns \n{\n  loader,\n  data,\n  latUpdated,\n  isInfinite,\n  isInfiniteEnd\n}\n**/\n')),Object(o.b)("h1",{id:"advanced-topics"},"Advanced Topics"),Object(o.b)("h2",{id:"-creating-custom-reducer"},"# Creating Custom Reducer"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    REGISTER_API: {\n      url: `users/user-signup/`,\n      method: "POST",\n    },\n  },\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === "LOGOUT") return initialState;\n    return state;\n  },\n  name: "Auth",\n});\n\nExample: const { dispatch } = props;\ndispatch({ type: "LOGOUT" });\n')),Object(o.b)("h2",{id:"-modifying-reducer-constants"},"# Modifying reducer constants"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\nconst { CALL, ON_SUCCESS } = commonConstants;\nconst reducer = ({\n  constants,\n  successData,\n  restSuccessData,\n  payload,\n  query,\n  params,\n  restPayload,\n  loadingStatus,\n  statusCode,\n  type,\n  method,\n  statusMessage,\n  errorData,\n  restErrorData,\n  ResetState,\n  InitialState,\n  commonHandler,\n  defaultReducerHandler,\n}) => {\n  switch (type) {\n    case "RESET":\n      switch (method) {\n        case ON_SUCCESS:\n          return isMobileApp\n            ? newObject(InitialState)\n            : newObject(state, ResetState);\n        default:\n          return state;\n      }\n    case authenticationConstants.VERIFY_OTP_API[CALL]:\n      switch (method) {\n        case ON_SUCCESS:\n          return newState(({ [type]: Data }) => ({\n            profile: successData,\n            isLoggedIn: !!successData.data.mobile_number,\n            [type]: newObject(Data, {\n              lastUpdated: generateTimeStamp(),\n              data: successData,\n            }),\n          }));\n        default:\n          return state;\n      }\n    default:\n      return defaultReducerHandler();\n  }\n};\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    VERIFY_OTP_API: {\n      url: `users/verify-otp/`,\n      method: "POST",\n    },\n    REGISTER_API: {\n      url: `users/user-signup/`,\n      method: "POST",\n    },\n  },\n  reducer,\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === "LOGOUT") return initialState;\n    return state;\n  },\n  name: "Auth",\n});\n')),Object(o.b)("h2",{id:"-dont-reset-on-setting-to-initial-state"},"# Don't reset on setting to initial state"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { HOC, commonConstants, store } from 'react-boilerplate-redux-saga-hoc';\n\nconst TEST_API = {};\nconst REGISTER_API = {\n      url: `users/user-signup/`,\n      method: 'POST',\n  }\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  dontReset: {\n    TEST_API,REGISTER_API\n  }\n  apiEndPoints: {\n    TEST_API,\n    REGISTER_API,\n  },\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === 'LOGOUT')\n      return initialState;\n    return state;\n  },\n  name: 'Auth',\n});\n\nExample:\n\nconst { dispatch } = props;\ndispatch({ type: 'RESET' });\n\n")),Object(o.b)("h1",{id:"cancelling-api-calls"},"Cancelling Api Calls"),Object(o.b)("h2",{id:"-cancel-on-unmount"},"# cancel on unmount"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," This function will help cancel unwanted api calls")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { ON_SUCCESS, ON_UNMOUNT } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CANCEL, DEMO_API_CONFIGURATION_CALL } = props;\n\nuseEffect(() => {\n  DEMO_API_CONFIGURATION_CALL();\n  return () => {\n    DEMO_API_CONFIGURATION_CANCEL(ON_UNMOUNT);\n  };\n}, []);\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," ON_UMOUNT will reset the particular state to initial")),Object(o.b)("h2",{id:"-axios-interceptors"},"# Axios Interceptors"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { HOC, commonConstants, store } from 'react-boilerplate-redux-saga-hoc';\nmport axios from 'axios';\nimport promise from 'promise';\n\nconst request = axios;\nrequest.defaults.withCredentials = true;\nrequest.interceptors.request.use(\n  config => {\n\n    if (!config.headers.Authorization) {\n      const token = localStorage.getItem('token');\n      if (token)\n        request.defaults.headers.common.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  error => promise.reject(error),\n);\n\nrequest.interceptors.response.use(\n  response => {\n\n    return response;\n  },\n  error => Promise.reject(error),\n);\n\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    REGISTER_API: {\n      url: `users/user-signup/`,\n      method: 'POST',\n    },\n  },\n  axiosInterceptors: request,\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === 'LOGOUT')\n      return initialState;\n    return state;\n  },\n  name: 'Auth',\n});\n\nExample:\n\nconst { dispatch } = props;\ndispatch({ type: 'LOGOUT' });\n\n")),Object(o.b)("h2",{id:"-inject-saga-and-reducer-to-the-store"},"# Inject saga and reducer to the store"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," By injecting reducer and saga you can able to create your own reducer and saga.It helps in most of the scnarios such as polling,creating youer own logic ..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { takeLatest } from 'redux-saga/effects';\nimport { injectReducer,injectSaga } from 'react-boilerplate-redux-saga-hoc';\n\nconst reducer = (state,action) => {\n  return state;\n}\n\nfunction* getRepos() {\n\n}\n\nconst saga = function* () {\n  yield takeLatest('LOAD_DATA', getRepos);\n}\n\nconst withSaga = injectSaga({'dashboard',saga})\nconst withReducer = injectReducer({'dashboard',reducer})\n\nexport default compose(\n  withSaga,\n  withReducer,\n)(Dashboard);\n\n")),Object(o.b)("h2",{id:"-inject-saga-and-reducer-to-the-store-by-using-hooks"},"# Inject saga and reducer to the store by using hooks"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," By injecting reducer and saga you can able to create your own reducer and saga. It helps in most of the scenarios such as polling,creating your own logic..etc")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { takeLatest } from "redux-saga/effects";\nimport {\n  useInjectReducer,\n  useInjectSaga,\n} from "react-boilerplate-redux-saga-hoc";\n\nconst reducer = (state, action) => {\n  return state;\n};\nfunction* getRepos() {}\n\nconst saga = function*() {\n  yield takeLatest("LOAD_DATA", getRepos);\n};\n\nconst key = "Dashboard";\n\nconst Dashboard = () => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({ key, saga });\n\n  return <div />;\n};\n\nexport default Dashboard;\n')),Object(o.b)("h1",{id:"util-functions"},"Util Functions"),Object(o.b)("h2",{id:"-safe-function"},"# Safe Function"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," This function will be used for accessing deep level of object.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"\nExample 1:\nconst defaultValue = '';\nconst object = { name: { name: { age: { person: 'jfjj' } } } }\nconst Person =  Safe(object , '.name.name.age.person', defaultValue);\n\nExample 2:\nconst callback = (person) => return person + person;\nconst Person = Safe(object , '.name.name.age.person', defaultValue , callback)\n\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," defaultValue is typeof value should return ,if the value return array by default safe function will return default value...if don't pass any value in third parameter it return the ececuted value otherwise return null.")),Object(o.b)("h2",{id:"-other-util-functions"},"# Other Util functions"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { cloneObject , newObject } from 'react-boilerplate-redux-saga-hoc';\n\nExample 1:\nconst oldObject = { name: '' };\nconst newObject = { age: '' };\nconst obj = cloneObject(oldObject, newObject)\nobj returns {  name: '', age: '' }\n\nExample 2:\nconst object = { name: '',profile: { name : '' } };\nconst obj = newObject(object,({ profile }) => ({\n   profile: newObject(profile, { age: 20 })\n}))\nobj returns {  name: '', age: 20 }\n")),Object(o.b)("h2",{id:"-params"},"# PARAMS"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"isUpdate - update an object or array <Boolean>\nisUpdateKey -<Boolean> updating or adding a key in existing object\nupdateIdCallback - <Function>\nupdateStateCallback - <Function>\nsubKey - <Array> accessing deep object\nisInfinite - storing infinite data <Boolean>\nisDelete - deleting a data in an array <Boolean> takes id, key as an extra\nparameter\nisDeleteKey - delete a key in an object <Boolean>\ndeleteKey - <Array> of keys to delete\nfilter - <Array> storing data based on filter\nfilter - <Array> update n number of filters at single task\neg: [['filter1'],['filter2']]\nid - <Array> || <string> || <number>\nkey - id Key example: 'user_id' <String>\nclearData - clearing data <Boolean> for infinite\nisAppendTop - for storing data in top for infinite\nlimit - <Number> for infinite\nquery - <Object> adding query parameters to url\nparams - <Object> params for aps eg:api/:id\nsuccessCallback - <Function> <{res : <Object>,data<Object>,status, message}>\nerrorCallback - <Function> <{error : <Error instance>,errorData<Object>,status, message}>\nupdateCallback - <Function> <Object>\npayload - <Function>\nON_SUCCESS - storing data based on success data or loaded data\nON_UNMOUNT - reset the data\nON_ERROR - setting the loader false and error data\nApi End Point Params -\n* url,\n* method,\n* responseMessageKey,\n* responseDataKey,\n* responseStatusCodeKey,\n* responseStatusCodeKey,\n* errorStatusKey,\n* errorMessageKey,\n* errorDataKey,\n* errorHandlerStatusCode,\n* effect - takeLatest default || 'every' for takeEvery\n\nGetData - returns\n* data - <Object>\n* loader - <Boolean>\n* lastUpdated - <Boolean>\n* isInfinite - <Boolean>\n* isInfiniteEnd - <Boolean>\n\nGetData - params\n* Object(data) - <Object>\n* defaultValue - <Array || Object || Boolean || null || String >\n* loader - <Boolean>\n* filter - <Array>\n")),Object(o.b)("h1",{id:"-handling-multiple-tasks"},"# Handling Multiple tasks"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"#contents"}),"Go to Top")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// hooks/customHook.js\nimport { useEffect, useMemo } from 'react';\n\nexport default (\n  {\n    TEST_API_CUSTOM_TASK,\n    TEST_SUB_API_CUSTOM_TASK,\n    Auth: { TEST_API },\n    Dash: { TEST_SUB_API }\n    getData,\n  },\n  { commonConstants },\n) => {\n  const { ON_SUCCESS } = commonConstants;\n  useEffect(() => {\n    TEST_SUB_API_CUSTOM_TASK(\n      ON_SUCCESS,\n      {},\n      {\n        data: {\n          count: 20,\n          items: [\n            {\n              name: 'cartoon',\n            },\n          ],\n        },\n      },\n    );\n    TEST_SUB_API_CUSTOM_TASK(\n      ON_SUCCESS,\n      {},\n      {\n        data: {\n          count: 20,\n          items: [\n            {\n              name: 'cartoon',\n            },\n          ],\n        },\n      },\n    );\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(\n        ON_SUCCESS,\n        {\n          subKey: ['items'],\n          isInfinite: true,\n        },\n        {\n          data: {\n            count: 50,\n            items: [\n              {\n                name: 'mango',\n              },\n            ],\n          },\n        },\n      );\n    }, 1);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(\n        ON_SUCCESS,\n        {\n          subKey: ['items'],\n          isDelete: true,\n          id: 'cartoon',\n          key: 'name',\n        },\n        {},\n      );\n    }, 2);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(\n        ON_SUCCESS,\n        {\n          subKey: ['items'],\n          isDeleteKey: true,\n          id: 'mango',\n          key: 'name',\n          deleteKey: ['name'],\n        },\n        {},\n      );\n    }, 3);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(\n        ON_SUCCESS,\n        {\n          //   subKey: ['items'],\n          //   isInfinite: true,\n        },\n        {\n          data: {\n            count: 100,\n            items: [\n              {\n                name: '1',\n              },\n              {\n                name: '2',\n              },\n              {\n                name: '3',\n              },\n              {\n                name: '4',\n              },\n            ],\n          },\n        },\n      );\n    }, 4);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        tasks: [\n          {\n            task: 'add',\n            params: {\n              clearData: true,\n              isInfinite: true,\n              filter: ['check'],\n            },\n            value: {\n              count: 30,\n              items: [\n                { name: '10' },\n                { name: '15' },\n                { name: '25' },\n                { name: '35' },\n                { name: '45' },\n              ],\n            },\n          },\n          {\n            task: 'isDelete',\n            params: {\n              subKey: ['items'],\n              id: '1',\n              key: 'name',\n              filter: ['check'],\n            },\n            value: {},\n          },\n          {\n            task: 'append',\n            params: {\n              subKey: ['items'],\n              isInfinite: true,\n              //   clearData: true,\n              filter: ['check'],\n            },\n            value: {\n              count: 300,\n              items: [{ name: '54' }],\n              data: [{ name: '54' }],\n            },\n          },\n          {\n            task: 'isDelete',\n            params: {\n              subKey: ['items'],\n              id: ['3', '4', '5'],\n              key: 'name',\n              filter: ['check'],\n            },\n            value: {},\n          },\n          {\n            task: 'isUpdate',\n            params: {\n              subKey: ['items'],\n              id: ['10', '25', '15'],\n              key: 'name',\n              filter: ['check'],\n              values: {\n                '10': {\n                  status: 'married',\n                },\n                '25': {\n                  status: 'unmarried',\n                },\n                '15': {\n                  status: 'married',\n                },\n              },\n            },\n            value: {\n              count: 30,\n              limit: 20,\n              //   items: { age: 30 },\n            },\n          },\n          {\n            task: 'isDeleteKey',\n            params: {\n              subKey: ['items'],\n              id: ['10'],\n              key: 'name',\n              filter: ['check'],\n              deleteKey: ['name'],\n            },\n            value: {},\n          },\n          {\n            task: 'isToggleKey',\n            params: {\n              subKey: ['items'],\n              id: ['15'],\n              key: 'name',\n              filter: ['check'],\n              toggleKey: ['name', 'status'],\n            },\n            value: {},\n          },\n        ],\n      });\n      TEST_API_CUSTOM_TASK(ON_SUCCESS, {\n        tasks: [\n          {\n            task: 'add',\n            params: {\n              clearData: true,\n              isInfinite: true,\n              filter: ['check'],\n            },\n            value: [\n              { name: '10' },\n              { name: '15' },\n              { name: '25' },\n              { name: '35' },\n              { name: '45' },\n            ],\n          },\n          {\n            task: 'isDelete',\n            params: {\n              //   subKey: ['items'],\n              id: '1',\n              key: 'name',\n              filter: ['check'],\n            },\n            value: {},\n          },\n          {\n            task: 'append',\n            params: {\n              //   subKey: ['items'],\n              isInfinite: true,\n              filter: ['check'],\n            },\n            value: [{ name: '5' }],\n          },\n          {\n            task: 'append',\n            params: {\n              //   subKey: ['items'],\n              isInfinite: true,\n              filter: ['check'],\n              //   clearData: true,\n            },\n            value: [{ name: '54' }],\n          },\n          {\n            task: 'isDelete',\n            params: {\n              //   subKey: ['items'],\n              id: ['3', '4'],\n              key: 'name',\n              filter: ['check'],\n            },\n            value: {},\n          },\n\n          {\n            task: 'isUpdate',\n            params: {\n              //   subKey: ['items'],\n              id: ['10', '25', '15'],\n              key: 'name',\n              filter: ['check'],\n              values: {\n                '10': {\n                  status: 'married',\n                },\n                '25': {\n                  status: 'unmarried',\n                },\n                '15': {\n                  status: 'married',\n                },\n              },\n            },\n            value: {\n              //   items: { age: 30 },\n            },\n          },\n          {\n            task: 'isDeleteKey',\n            params: {\n              //   subKey: ['items'],\n              id: ['10'],\n              key: 'name',\n              filter: ['check'],\n              deleteKey: ['status'],\n            },\n            value: {},\n          },\n          {\n            task: 'isToggleKey',\n            params: {\n              id: ['25'],\n              key: 'name',\n              filter: ['check'],\n              toggleKey: ['name', 'status'],\n            },\n            value: {},\n          },\n        ],\n      });\n    }, 5);\n  }, []);\n  const test = useMemo(() => getData(TEST_API, {}, false), [TEST_API]);\n  const test_sub = useMemo(() => getData(TEST_SUB_API, {}, false), [\n    TEST_SUB_API,\n  ]);\n  return {\n    test,\n    test_sub,\n  };\n};\n\n")),Object(o.b)("h2",{id:"contributing"},"Contributing"),Object(o.b)("p",null,"Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change."),Object(o.b)("p",null,"Please make sure to update tests as appropriate."),Object(o.b)("h2",{id:"license"},"License"),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://choosealicense.com/licenses/mit/"}),"MIT")))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/oldDoc.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-old-doc-mdx-44a3bc835268ce3a8a1a.js.map