{"version":3,"sources":["webpack:///../src/docs/Handlers/2.infinitehandler.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0PAMaA,G,UAAe,S,yNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,iBAAQ,CACN,GAAM,oCADR,qCAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,uTAgBL,iBAAQ,CACN,GAAM,iCADR,kCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,8UAiBL,iBAAQ,CACN,GAAM,uCADR,wCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,iZAiBL,iBAAQ,CACN,GAAM,uBADR,wBAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,6KAGL,iBAAQ,CACN,GAAM,oCADR,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,iRAML,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,4zD,uNAkETJ,EAAWK,gBAAiB","file":"component---src-docs-handlers-2-infinitehandler-mdx-689ecc1f5c96fc05f1ba.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"infinite-handler\"\n    }}>{`Infinite Handler`}</h1>\n    <h2 {...{\n      \"id\": \"-infinite-handler-without-filter\"\n    }}>{`# Infinite Handler without filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Infinite-Handler\",\n    clearData: true,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-infinite-handler-with-filter\"\n    }}>{`# Infinite Handler with filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Infinite-Handler\",\n    isAppendTop: true,\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-infinite-handler-with-multi-filter\"\n    }}>{`# Infinite Handler with Multi-filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n    isAppendTop: false, // By default date will added below\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-things-to-remember\"\n    }}>{`# Things to Remember`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` -Adding multiple filters will create multiple copy of the same data.\n-It will helps to handle different types of data in same api..such as variable kind of filters.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-infinite-handler-function---api\"\n    }}>{`# Infinite Handler Function - Api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`    Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst _checkIsNotObject = (data) =>\n  Object.prototype.toString.call(data) !== \"[object Object]\";\n\nexport const infiniteHandler = ({\n  task: { clearData, subKey = [], limit, isAppendTop = false } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data: oldData = {} } = {}) => ({\n  data: (() => {\n    if (subKey.length > 0 && Array.isArray(getIn(oldData, subKey))) {\n      const _oldCopyData = {\n        ...oldData,\n        ...successData,\n        [subKey[0]]: oldData[subKey[0]],\n      };\n      // return _oldCopyData\n      return updateIn(_oldCopyData, subKey, (_oldData) => {\n        if (clearData) return Safe(successData, \\`.\\${subKey.join(\".\")}\\`, []);\n        return updateCallback\n          ? updateCallback(\n              _oldData,\n              Safe(successData, \\`.\\${subKey.join(\".\")}\\`, [])\n            )\n          : isAppendTop\n          ? Safe(successData, \\`.\\${subKey.join(\".\")}\\`, []).concat(_oldData)\n          : _oldData.concat(Safe(successData, \\`.\\${subKey.join(\".\")}\\`, []));\n      });\n    }\n    const getData = Array.isArray(successData) ? successData : [];\n    const appendData = Array.isArray(oldData)\n      ? isAppendTop\n        ? getData.concat(oldData)\n        : oldData.concat(getData)\n      : getData;\n    const newData =\n      (clearData && successData) ||\n      (Array.isArray(successData) && appendData) ||\n      successData;\n    return updateCallback ? updateCallback(oldData, successData) : newData;\n  })(),\n  error: false,\n  lastUpdated: generateTimeStamp(),\n  isInfinite: true,\n  isError: false,\n  infiniteEnd:\n    (subKey.length > 0\n      ? Safe(successData, \\`.\\${subKey.join(\".\")}\\`, [])\n      : successData\n    ).length < limit,\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}