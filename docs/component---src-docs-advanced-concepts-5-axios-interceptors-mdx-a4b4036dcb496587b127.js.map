{"version":3,"sources":["webpack:///../src/docs/Advanced Concepts/5.axios-interceptors.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0PAMaA,G,UAAe,S,qOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,wBAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,2nCAuDL,iBAAQ,CACN,GAAM,yCADR,0CAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,2oB,mOAqCTJ,EAAWK,gBAAiB","file":"component---src-docs-advanced-concepts-5-axios-interceptors-mdx-a4b4036dcb496587b127.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"-axios-interceptors\"\n    }}>{`# Axios Interceptors`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\nimport axios from \"axios\";\nimport promise from \"promise\";\n\nconst request = axios;\nrequest.defaults.withCredentials = true;\nrequest.interceptors.request.use(\n  (config) => {\n    if (!config.headers.Authorization) {\n      const token = localStorage.getItem(\"token\");\n      if (token)\n        request.defaults.headers.common.Authorization = \\`Bearer \\${token}\\`;\n    }\n    return config;\n  },\n  (error) => promise.reject(error)\n);\n\nrequest.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => Promise.reject(error)\n);\n\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  axiosInterceptors: request,\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === \"LOGOUT\") return initialState;\n    return state;\n  },\n  name: \"Auth\",\n});\n/*\nExample:\n\nconst { dispatch } = props;\ndispatch({ type: 'LOGOUT' });\n\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-modifying-default-axios-from-package\"\n    }}>{`# Modifying default axios from package`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  axios,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport promise from \"promise\";\n\nconst request = axios;\nrequest.defaults.withCredentials = true;\nrequest.interceptors.request.use(\n  (config) => {\n    if (!config.headers.Authorization) {\n      const token = localStorage.getItem(\"token\");\n      if (token)\n        request.defaults.headers.common.Authorization = \\`Bearer \\${token}\\`;\n    }\n    return config;\n  },\n  (error) => promise.reject(error)\n);\n\nrequest.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => Promise.reject(error)\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}