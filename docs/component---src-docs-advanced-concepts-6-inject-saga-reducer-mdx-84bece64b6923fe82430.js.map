{"version":3,"sources":["webpack:///../src/docs/Advanced Concepts/6.inject-saga-reducer.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,sOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,yCADR,0CAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,sLAIL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,uhB,oOA2BTJ,EAAWK,gBAAiB","file":"component---src-docs-advanced-concepts-6-inject-saga-reducer-mdx-84bece64b6923fe82430.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/chrissie/Desktop/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"-inject-saga-and-reducer-to-the-store\"\n    }}>{`# Inject saga and reducer to the store`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`   Note:\n- By injecting reducer and saga you can able to create your own reducer and saga.\n- It helps in most of the scenarios such as polling,creating youer own logic ..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { takeLatest } from \"redux-saga/effects\";\nimport { injectReducer, injectSaga } from \"react-boilerplate-redux-saga-hoc\";\n\nconst initialState = {};\nconst reducer = (state = initialState, action) => {\n  return state;\n};\n\nfunction* getRepos() {}\n\nconst saga = function*() {\n  yield takeLatest(\"LOAD_DATA\", getRepos);\n};\n\nconst withSaga = injectSaga({ key: \"dashboard\", saga });\nconst withReducer = injectReducer({ key: \"dashboard\", reducer });\n\nexport default compose(withSaga, withReducer)(Dashboard);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}