{"version":3,"sources":["webpack:///../src/docs/Basic Concepts/1.Storing Data.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0PAMaA,G,UAAe,S,4NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,8CADR,+CAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,0IAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iUAgBL,iBAAQ,CACN,GAAM,wCADR,yCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,sMAKL,iBAAQ,CACN,GAAM,KAER,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,8IAIL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4jBAuBL,iBAAQ,CACN,GAAM,8CADR,+CAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,kGAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2xCAsDL,iBAAQ,CACN,GAAM,uBACL,sBAAQA,WAAW,MAAnB,yBACH,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,ioBASL,iBAAQ,CACN,GAAM,iDADR,kDAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,4OAIL,iBAAQ,CACN,GAAM,OAER,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,oIAGL,iBAAQ,CACN,GAAM,OAER,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,iQAKL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wbAoBL,iBAAQ,CACN,GAAM,yBADR,wBAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,2RAIL,iBAAQ,CACN,GAAM,4BADR,6BAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,2NAKL,iBAAQ,CACN,GAAM,OAER,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8UAgBL,+BAAc,6BAAGA,WAAW,KAAQ,CAChC,KAAQ,6EADE,wB,0NAOlBJ,EAAWK,gBAAiB","file":"component---src-docs-basic-concepts-1-storing-data-mdx-83a4c406add6896b8704.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"storing-data\"\n    }}>{`Storing Data`}</h1>\n    <h2 {...{\n      \"id\": \"-storing-data-automatically-by-calling-api\"\n    }}>{`# storing data automatically by calling api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`    Note:\n -Data will be stored automatically in the reducer and also it handles all the states..such as error,infinte,loader..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-sending-query-parameters-to-the-api\"\n    }}>{`# sending query parameters to the api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  -No need to worry about appending query.\n  -Its more simpler just pass the object in the query parameter that will append query in the url.\n  -And also passing params is simpler.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -If you need to pass params in the url.\n -Then you have to change the url to function to receive params.just like give below.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callbacks-for-handling-success-or-failure\"\n    }}>{`# Callbacks for handling success or failure`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  -Callback are another helper function which handles errors, success, cancel..etc\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nconst responseErrorParser = (data) =>\n  (Array.isArray(data) &&\n    data.reduce((acc, curr) => {\n      const [key, message] = Object.entries(curr)[0];\n      const payloadKey = key.split(\",\")[1];\n      return {\n        ...acc,\n        [payloadKey]: message,\n      };\n    }, {})) ||\n  {};\n\nDEMO_API_CONFIGURATION_CALL({\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n    axiosConfig: {\n      responseType: \"application/json\",\n    },\n  },\n  callback: {\n    successCallback: ({ res, data, message, status }) => {\n      // handle toast or call any other api\n    },\n    errorCallback: ({\n      error,\n      errorData: responseErrorParser,\n      message,\n      status,\n      errors,\n    }) => {\n      // handle toast or call any other api\n    },\n    finalCallback: () => {\n      // this will get triggers for both api success or failure\n    },\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-things-to-remember\"\n    }}><strong parentName=\"h3\">{`# Things to Remember`}</strong></h3>\n    <pre><code parentName=\"pre\" {...{}}>{`1. Every actions has four keys they are tasks or task,request,callback,filter\n2. tasks - for handling multiple tasks (you will find later in this documentation)\n3. task - for handling single task (you will find later in this documentation)\n4. request - for api request.It supports 5 keys they are query,params,payload,axiosConfig,    paramsSerializer.\n5. filter - for handling different kind of data in same api (you will find later in this documentation)\n6. callback - use for handling success or failure\n7. Either you can use task or tasks,cannot use both at the same time.\n8. If you use both tasks will be taken as priority.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-storing-data-by-calling-custom-task\"\n    }}>{`# Manually storing data by calling custom task`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n   - Don't worry about terms Manually,Automatically, its just the common word we used in the real world.\n   - The way how it stores or handles data i specified as manually, automatically thats it.You will get used to it.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-1\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n   - Automatically -> It will handle api calls and stores data and also handles all the errors, success, loaders...etc\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-2\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n    - Manually -> It will slight different instead of api calls we are manually storing or updating data.\n    - This util function will help you update data in particular reducer.\n    - Also useful for doing various tasks without calling api\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n    response: {\n      data: {\n        commet: \"This handler will help you to store data\",\n        name: \"Example\",\n        age: 20,\n      },\n    },\n  },\n});\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"-things-to-remember-1\"\n    }}>{`# Things to Remember`}</h3>\n    <pre><code parentName=\"pre\" {...{}}>{`  - Handlers are most important util for manupulating data and also for managing data in the reducer\n - There are almost 7 build in handlers are available (You will find later in this documentation)\n - Also if you want can create a own custom handler for executing your task\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-data-from-store\"\n    }}>{`# Getting Data from store`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  - We are almost done with basic setup, api calls, storing data...etc.\n  - Now the main things we have to retrieve the data from the reducer.\n  - Don't Worry that is very much simpler than other task.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-3\"\n    }}></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMemo } from \"react\";\nimport { useQuery } from \"react-boilerplate-redux-saga-hoc\";\nconst {\n  Auth_hoc: {\n    reducerName,\n    reducerConstants: { DEMO_API_CONFIGURATION },\n  },\n} = props;\n\nconst { loader, data, lastUpdated, isInfinite, infiniteEnd } = useQuery(\n  reducerName,\n  DEMO_API_CONFIGURATION\n);\n`}</code></pre>\n    <p>{`Next - `}<a parentName=\"p\" {...{\n        \"href\": \"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/updating-data\"\n      }}>{`Updating Data`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}