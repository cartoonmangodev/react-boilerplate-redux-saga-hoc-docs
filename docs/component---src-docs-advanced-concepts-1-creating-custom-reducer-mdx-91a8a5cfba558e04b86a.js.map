{"version":3,"sources":["webpack:///../src/docs/Advanced Concepts/1.creating-custom-reducer.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"uPAMaA,G,UAAe,S,0OAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,6BAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,ijBA4BL,iBAAQ,CACN,GAAM,0CADR,2CAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,20C,wOA0DTJ,EAAWK,gBAAiB","file":"component---src-docs-advanced-concepts-1-creating-custom-reducer-mdx-91a8a5cfba558e04b86a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/chrissie/Desktop/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"-creating-custom-reducer\"\n    }}>{`# Creating Custom Reducer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst AuthenticationHOC = HOC({ handlers: [] })({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === \"LOGOUT\") return initialState;\n    return state;\n  },\n  name: \"Auth\",\n});\n/*\nExample: const { dispatch } = props;\ndispatch({ type: \"LOGOUT\" });\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-passing-create-reducer-or-own-reducer\"\n    }}>{`# Passing create Reducer or own reducer`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nimport { combineReducers } from \"redux\";\nimport { connectRouter } from \"connected-react-router\";\n\nimport history from \"utils/history\";\nimport globalReducer from \"containers/App/reducer\";\nimport languageProviderReducer from \"containers/LanguageProvider/reducer\";\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\n/* this is the pattern for passing custom reducer */\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    global: globalReducer,\n    language: languageProviderReducer,\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n\nconst AuthenticationHOC = HOC({ createReducer })({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  constantReducer: ({ type, state, action, constants, initialState }) => {\n    if (type === \"LOGOUT\") return initialState;\n    return state;\n  },\n  name: \"Auth\",\n});\n/*\nExample: const { dispatch } = props;\ndispatch({ type: \"LOGOUT\" });\n*/\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}