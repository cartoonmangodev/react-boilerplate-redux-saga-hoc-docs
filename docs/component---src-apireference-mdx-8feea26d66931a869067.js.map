{"version":3,"sources":["webpack:///../src/apireference.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-apireference-mdx-8feea26d66931a869067.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"-task---object\"\n    }}>{`# task - `}<inlineCode parentName=\"h2\">{`<Object>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Object:\n1.name -> <String> - handler name to execute particular task\n2.options -> handler options - it will vary based on handlers\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nimport { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  clearData: true,\n  updateCallback: (data) => return data\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n    ...options,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-tasks---array-of-task\"\n    }}>{`# tasks - `}<inlineCode parentName=\"h2\">{`<Array of task>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst dataOptions = {\n  clearData: true,\n};\nconst infiniteOptions = {\n  clearData: true,\n  id: [1],\n  isAppendTop: true,\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  tasks: [\n    {\n      task: {\n        name: \"Data-Handler\",\n        ...dataOptions,\n      },\n      filter: [\"filter-1\"],\n    },\n    {\n      task: {\n        name: \"Infinite-Handler\",\n        ...infiniteOptions,\n      },\n      filter: [\"filter-2\"],\n    },\n  ],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-using-usequery-hook-in-different-ways\"\n    }}>{`# using useQuery hook in different ways`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useQuery } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { loader, data, lastUpdated, isError, error, toast } = useQuery(\n  reducerName,\n  TEST_GET_API\n);\n\n/* accessing multiple data  at single query */\nconst [test_data, test, test_deep, testGetApi] = useQuery(\n  reducerName /* can pass any reducer key such as 'Auth' , 'router' , ..etc*/,\n  [\n    {\n      key: TEST_GET_API,\n      name: \"test\",\n      initialLoaderState: true,\n    },\n    {\n      key: TEST_GET_API,\n      query: \".data[0]\",\n      initialLoaderState: false,\n    },\n    {\n      key: TEST_GET_API,\n      query: \".data\",\n      initialLoaderState: false,\n      default: [], // Default for data key it also check's type of data..if type is object return [].Don't pass if you dont want to type check\n    },\n    TEST_GET_API,\n  ]\n);\n\n/* query can be used in different ways based on your requirement */\n\nconst [data, loader] = useQuery(\n  reducerName, // can pass any reducer key such as 'Auth' , 'router' , ..etc\n  TEST_GET_API,\n  [\n    {\n      query: \".data[0]\",\n      default: [],\n    },\n    {\n      query: \".loader\",\n      default: false,\n    },\n  ]\n);\n\n/* For direct accessing reducer keys */\nconst { isLoggedIn, profile } = useQuery(reducerName, {\n  requiredKey: [\"isLoggedIn\", \"profile\"],\n});\n\n/* pass array of string instead of object */\n\nconst [\n  { loader, data, lastUpdated, isError, error, toast },\n] = useQuery(reducerName, [TEST_GET_API]);\n\n/* Pass an object instead of array */\nconst data = useQuery(reducerName, {\n  key: TEST_GET_API,\n  default: [],\n  requiredKey: [\"loader\", \"data\", \"lastUpdated\"],\n});\n\n/* pass a string insted of array */\nconst { loader, data, lastUpdated, isError, error, toast } = useQuery(\n  reducerName,\n  TEST_GET_API\n);\n\n/* Pass a config as a third parameter its optional */\nconst data = useQuery(reducerName, TEST_GET_API, {\n  query: \".data\",\n  default: [],\n});\n\n/* for getting whole reducer data */\nconst data = useQuery(); // Don't use this use this until its required it will render the component every time reducer change\nconst data = useQuery(reducerName); // Don't use this until its required it will render the component every time reducer data change\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-request---object\"\n    }}>{`# request - `}<inlineCode parentName=\"h2\">{`<Object>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Object:\n1.query -> <object> - send query params to the api\n2.params -> <object> - passing params to an api\n3.payload -> <object> - send payload to the api for post calls\n4.axiosConfig -> <object>\n5.paramSerializer -> <object> default { arrayFormat: 'brackets' } refer axios\n6.asyncFunction -> <function>\n7.asyncFunctionParams -> <array[params]>\n8.retry -> <number>\n9.errorParser -> <function>\n10.polling -> <boolean> true or false\n11.pollingCount -> <number> number of polling\n12.delay -> <Number> in milliseconds\n13.clearDataOnError -> <boolean> true or false - (default false)\n14.errorDataHandling -> <boolean> true or false  - (default true)\n15.responseErrorParser -> <Boolean> in milliseconds  - (default false)\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  clearData: true,\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n    ...options,\n  },\n  request: {\n    query: {\n      search: \"name\",\n    },\n    params: {\n      id: 1,\n    },\n    payload: {\n      password: \"test\",\n    },\n    axiosConfig: {\n      responseType: \"application/json\",\n    },\n    paramSerializer: {},\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callback---object\"\n    }}>{`# callback - `}<inlineCode parentName=\"h2\">{`<Object>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Object:\n1.successCallback -> <function({ data, status, message})> - for handling success\n2.errorCallback -> <function({ error, status, message, errorData})> - for handling failure\n3.finalCallback -> <function({ type, action, payload, Cancelled })> - triggers on both success and failure\n4.updateStateCallback -> <function({ state, data /* successdata */, type })> - for manipulating the state\n5.pollingCallback -> <function({ res, data /* successdata */, message, status, count /* polling count */ })> - return <object || boolean || null> returns true will stop polling\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  clearData: true,\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n    ...options,\n  },\n  callback: {\n    successCallback({ data, status, message }) {\n      console.log({ data, status, message });\n    },\n    errorCallback({ error, status, message, errorData }) {\n      console.log({ error, status, message, errorData });\n    },\n    errorCallback({ type, action, payload, Cancelled }) {\n      console.log({ type, action, payload, Cancelled });\n    },\n    pollingCallback({\n      res,\n      data /* successdata */,\n      message,\n      status,\n      count /* polling count */,\n    }) {\n      console.log({ res, data, message, status, count });\n      return {\n        params: {},\n        query: {},\n        paramsSerializer: {},\n        asyncFunctionParams: {},\n      };\n      /* returns true will stop polling */\n    },\n    updateStateCallback({ state, data /* successdata */, type }) {\n      return newObject(state, ({ [type]: Data }) => ({\n        [type]: newObject(Data, () => data),\n      }));\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-updatestatecallback---function\"\n    }}>{`# updateStateCallback - `}<inlineCode parentName=\"h2\">{`<Function>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Function:\nupdateStateCallback -> <function({ state, data /* successdata */, type })> - for manipulating the state\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  clearData: true,\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n    ...options,\n  },\n  callback: {\n    updateStateCallback({ state, data /* successdata */, type }) {\n      return newObject(state, ({ [type]: Data }) => ({\n        [type]: newObject(Data, () => data),\n      }));\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-subkey---array-accessing-deep-object\"\n    }}>{`# subKey - `}<inlineCode parentName=\"h2\">{`<Array>`}</inlineCode>{` accessing deep object`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Array:\nsubKey -> <Array> - for store or update data on that paricular object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  subKey: [\"data\", \"data\"],\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Data-Handler\",\n    ...options,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-deletekey---array-of-keys-to-delete\"\n    }}>{`# deleteKey - `}<inlineCode parentName=\"h2\">{`<Array>`}</inlineCode>{` of keys to delete`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Array:\ndeleteKey -> <Array> - for removing a particular key in an object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  deleteKey: [\"name\", \"age\"],\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    ...options,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-filter---array-storing-data-based-on-filter\"\n    }}>{`# filter - `}<inlineCode parentName=\"h2\">{`<Array>`}</inlineCode>{` storing data based on filter`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Array:\nfilter -> <Array> - for storing different type of data\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  deleteKey: [\"name\", \"age\"],\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    ...options,\n  },\n  filter: [\"gadgets\", \"grocerries\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-filter---array-update-n-number-of-filters-at-single-task\"\n    }}>{`# filter - `}<inlineCode parentName=\"h2\">{`<Array>`}</inlineCode>{` update n number of filters at single task`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Array:\nfilter -> <Array> - create or update n number of filters at single task\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  deleteKey: [\"name\", \"age\"],\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Delete-Handler\",\n    ...options,\n  },\n  filter: [[\"gadgets\", \"grocerries\"], [\"cars\"], [\"house\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-id---array--string--number\"\n    }}>{`# id - `}<inlineCode parentName=\"h2\">{`<Array>`}</inlineCode>{` || `}<inlineCode parentName=\"h2\">{`<string>`}</inlineCode>{` || `}<inlineCode parentName=\"h2\">{`<number>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Array:\nid -> <Array> - for accessing particular object in an array\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  id: [\"1\", \"2\"],\n  key: \"id\",\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n    ...options,\n  },\n  filter: [[\"gadgets\", \"grocerries\"], [\"cars\"], [\"house\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-key---id-key-example-user_id-string\"\n    }}>{`# key - id Key example: 'user_id' `}<inlineCode parentName=\"h2\">{`<String>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{}}>{`    Array:\n    key -> <string> - for reference to id\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  id: [\"1\", \"2\"],\n  key: \"id\",\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n    ...options,\n  },\n  filter: [[\"gadgets\", \"grocerries\"], [\"cars\"], [\"house\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-cleardata---clearing-data-boolean-for-infinite\"\n    }}>{`# clearData - clearing data `}<inlineCode parentName=\"h2\">{`<Boolean>`}</inlineCode>{` for infinite`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  clearData: true,\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Infinite-Handler\",\n    ...options,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-isappendtop---for-storing-data-in-top-for-infinite\"\n    }}>{`# isAppendTop - for storing data in top for infinite`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  clearData: true,\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Infinite-Handler\",\n    ...options,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-limit---number-for-infinite-scrool-to-false\"\n    }}>{`# limit - `}<inlineCode parentName=\"h2\">{`<Number>`}</inlineCode>{` for infinite scrool to false`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\nconst options = {\n  limit: 15,\n};\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Infinite-Handler\",\n    ...options,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-query---object-adding-query-parameters-to-url\"\n    }}>{`# query - `}<inlineCode parentName=\"h2\">{`<Object>`}</inlineCode>{` adding query parameters to url`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  request: {\n    query: {\n      type: 1,\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-params---object-params-for-aps-egapiid\"\n    }}>{`# params - `}<inlineCode parentName=\"h2\">{`<Object>`}</inlineCode>{` params for aps eg:api/:id`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  request: {\n    params: {\n      id: 1,\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-successcallback---functionres--objectdataobjectstatus-message\"\n    }}>{`# successCallback - `}<inlineCode parentName=\"h2\">{`<Function>`}</inlineCode>{`<{res : `}<inlineCode parentName=\"h2\">{`<Object>`}</inlineCode>{`,data`}<inlineCode parentName=\"h2\">{`<Object>`}</inlineCode>{`,status, message}>`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  callback: {\n    successCallback({ data, status, message, res }) {\n      console.log({ data, status, message, res });\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-errorcallback---functionerror--error-instanceerrordataobjectstatus-message\"\n    }}>{`# errorCallback - `}<inlineCode parentName=\"h2\">{`<Function>`}</inlineCode>{`<{error : `}<inlineCode parentName=\"h2\">{`<Error instance>`}</inlineCode>{`,errorData`}<inlineCode parentName=\"h2\">{`<Object>`}</inlineCode>{`,status, message}>`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  callback: {\n    errorCallback({ error, status, message, errorData }) {\n      console.log({ error, status, message, errorData });\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-updatecallback---function-object\"\n    }}>{`# updateCallback - `}<inlineCode parentName=\"h2\">{`<Function> <Object>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    updateCallback(oldData, successData) {\n      return {\n        ...oldData,\n        ...successData,\n      };\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-payload---function\"\n    }}>{`# payload - `}<inlineCode parentName=\"h2\">{`<Function>`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  request: {\n    payload: {\n      id: 1,\n      password: \"test\",\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-on_success---storing-data-based-on-success-data-or-loaded-data\"\n    }}>{`# ON_SUCCESS - storing data based on success data or loaded data`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    response: {\n      data: {\n        age: 20,\n      },\n    },\n  },\n  request: {\n    payload: {\n      id: 1,\n      password: \"test\",\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-on_unmount---reset-the-data\"\n    }}>{`# ON_UNMOUNT - reset the data`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_UNMOUNT } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_UNMOUNT, [\"flter-1\"]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-on_error---setting-the-loader-false-and-error-data\"\n    }}>{`# ON_ERROR - setting the loader false and error data`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_ERROR } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_ERROR, {\n  error: {\n    status: 500,\n    message: \"internal server error\",\n    isError: true,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-on_loading---setting-the-loader-true-or-false\"\n    }}>{`# ON_LOADING - setting the loader true or false`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_LOADING } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_LOADING, {\n  loader: false,\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-on_toast---setting-the-toast-data\"\n    }}>{`# ON_TOAST - setting the toast data`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_TOAST } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_TOAST, {\n  toast: {\n    message: \"new toast\",\n    isError: false,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-on_toast-on_loading-on_error-on_success---doing-all-task-at-one-action\"\n    }}>{`# `}{`[ON_TOAST, ON_LOADING, ON_ERROR, ON_SUCCESS]`}{` - doing all task at one action`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  HOC,\n  commonConstants,\n  store,\n  newObject,\n} from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_TOAST } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(\n  [ON_TOAST, ON_LOADING, ON_ERROR, ON_SUCCESS],\n  {\n    task: {\n      response: {\n        data: {\n          age: 20,\n        },\n      },\n    },\n    toast: {\n      message: \"new toast\",\n      isError: false,\n    },\n    loader: false,\n    error: {\n      status: 500,\n      message: \"internal server error\",\n      isError: true,\n    },\n  }\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-api-end-point-params\"\n    }}>{`# Api End Point Params`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`url,`}</li>\n      <li parentName=\"ul\">{`method,`}</li>\n      <li parentName=\"ul\">{`responseMessageKey,`}</li>\n      <li parentName=\"ul\">{`responseDataKey,`}</li>\n      <li parentName=\"ul\">{`responseStatusKey,`}</li>\n      <li parentName=\"ul\">{`responseStatusCodeKey,`}</li>\n      <li parentName=\"ul\">{`errorMessageKey,`}</li>\n      <li parentName=\"ul\">{`errorDataKey,`}</li>\n      <li parentName=\"ul\">{`errorHandlerStatusCode,`}</li>\n      <li parentName=\"ul\">{`effect - takeLatest default || 'every' for takeEvery`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const response = {\n  code: 900,\n  data: {},\n  status: \"successfully fetched data\",\n};\nconst error = {\n  errorCode: 500,\n  error: {},\n  message: \"successfully fetched data\",\n};\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\`,\n  method: \"GET\",\n  responseStatusCode: [900, 200], // for handling success\n  responseStatusCodeKey: \"code\", // for storing status message - default key will be status\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n  responseDataKey: \"data\", // default will be data\n  errorMessageKey: \"message\",\n  errorDataKey: \"error\",\n  errorHandlerStatusCode: [901], // if success data has error code [901] it will goes to error handler\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getdata---returns\"\n    }}>{`# GetData - returns`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`data - `}<inlineCode parentName=\"li\">{`< Object >`}</inlineCode></li>\n      <li parentName=\"ul\">{`loader - `}<inlineCode parentName=\"li\">{`< Boolean >`}</inlineCode></li>\n      <li parentName=\"ul\">{`lastUpdated - `}<inlineCode parentName=\"li\">{`< Boolean >`}</inlineCode></li>\n      <li parentName=\"ul\">{`isInfinite - `}<inlineCode parentName=\"li\">{`< Boolean >`}</inlineCode></li>\n      <li parentName=\"ul\">{`infiniteEnd - `}<inlineCode parentName=\"li\">{`< Boolean >`}</inlineCode></li>\n      <li parentName=\"ul\">{`isError - `}<inlineCode parentName=\"li\">{`< Boolean >`}</inlineCode></li>\n      <li parentName=\"ul\">{`error - `}<inlineCode parentName=\"li\">{`< Object >`}</inlineCode></li>\n      <li parentName=\"ul\">{`toast - `}<inlineCode parentName=\"li\">{`< toast >`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMemo } from \"react\";\nconst {\n  getData,\n  Auth_data: { DEMO_API_CONFIGURATION },\n} = props;\n\nconst { data, loader, latUpdated, isInfinite, isInfiniteEnd } = useMemo(\n  () => getData(DEMO_API_CONFIGURATION, {}, false),\n  [DEMO_API_CONFIGURATION]\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getdata---params\"\n    }}>{`# GetData - params`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Object(data) - `}<inlineCode parentName=\"li\">{`< Object >`}</inlineCode></li>\n      <li parentName=\"ul\">{`defaultValue - `}<inlineCode parentName=\"li\">{`< Array || Object || Boolean || null || String >`}</inlineCode></li>\n      <li parentName=\"ul\">{`loader - `}<inlineCode parentName=\"li\">{`< Boolean >`}</inlineCode></li>\n      <li parentName=\"ul\">{`filter - `}<inlineCode parentName=\"li\">{`< Array >`}</inlineCode></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMemo } from \"react\";\nconst {\n  getData,\n  Auth_data: { DEMO_API_CONFIGURATION },\n} = props;\n\nconst { data, loader, latUpdated, isInfinite, isInfiniteEnd } = useMemo(\n  () =>\n    getData(\n      DEMO_API_CONFIGURATION /* data */,\n      {} /* typeof value */\n      false /* initial state of the loader*/,\n      [\"filter-1\"] /* for getting paricular filter data */\n    ),\n  [DEMO_API_CONFIGURATION]\n);\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}