(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{c5Xz:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return o})),t.d(n,"default",(function(){return d}));var a=t("Fcif"),r=t("+I+c"),s=(t("mXGw"),t("/FXl")),i=t("TjRS"),o=(t("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Basic Concepts/5.usingfilter.mdx"}});var c={_frontmatter:o},l=i.a;function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)(l,Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"adding-filters"},"Adding Filters"),Object(s.b)("h2",{id:"-adding-filters-in-api-calls"},"# Adding filters in api calls"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{})," Note:\n -Suppose there is a scenario where same api is used with multiple filters.In that case we have to Store different data.\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  filter: ["name"],\n  request: {\n    params: { id: 2 },\n    query: { type: "name" },\n  },\n});\n/*\nExample:\nresponseData = { id: 1 }\nstoreData = { name: { id: 1 }\n*/\n')),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"   Note:\n   -In this case it will store the data in an object with key 'name'\n")),Object(s.b)("h2",{id:"-deleting-key-in-an-filter-object"},"# Deleting key in an Filter object"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"   Note:\n   -It is almost similar to update, but instead of updating particular key it will delete the particular key from the object\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: "Delete-Key-Handler",\n    id: [1, 2, 3],\n    key: "id",\n    deleteKey: ["name", "age"],\n  },\n  filter: ["name"],\n  request: {\n    params: { id: 1 },\n    paramsSerializer: { arrayFormat: "bracket" }, //default: none - refer query-string npm package\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n  },\n});\n/*\nExample:\n\ndata = { name : [\n  { id: 1, name: \'name1\',age: \'13\',gender: \'male\' },\n  { id: 1, name: \'name1\',age: \'12\',gender: \'female\' }\n]}\nAfter executing task:\ndata = { name : [\n  { id: 1, gender: \'male\' },\n  { id: 2, gender: \'female\' }\n}]\n*/\n')),Object(s.b)("h2",{id:"-manually-deleting-filter-data-by-calling-custom-task"},"# Manually Deleting Filter Data by calling custom task"),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{}),"   Note:\n   -Calling custom task will allow us to manipulate data without calling any api..such as adding count,limit,skip..etc\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    task: "Delete-Handler",\n    id: [1, 2],\n    key: "id",\n  },\n  filter: ["name"],\n});\n')),Object(s.b)("h2",{id:"-getting-filter-data-from-store"},"# Getting Filter Data from store"),Object(s.b)("h2",{id:""}),Object(s.b)("pre",null,Object(s.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { useMemo } from "react";\nimport { useQuery } from "react-boilerplate-redux-saga-hoc";\nconst {\n  Auth_hoc: {\n    reducerName,\n    reducerConstants: { DEMO_API_CONFIGURATION },\n  },\n} = props;\n\nconst [nameDate, ageData] = useQuery(reducerName, [\n  { key: DEMO_API_CONFIGURATION, filter: ["name"] },\n  { key: DEMO_API_CONFIGURATION, filter: ["age"] },\n]);\n\n/**\nnameData returns \n{ loader, data, latUpdated, isInfinite, isInfiniteEnd } \nageData returns \n{ loader, data, latUpdated, isInfinite, isInfiniteEnd } \n**/\n')),Object(s.b)("p",null,"Next - ",Object(s.b)("a",Object(a.a)({parentName:"p"},{href:"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/using-subkey-for-accessing-deep-object"}),"How to access deep object by using sub key")))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Basic Concepts/5.usingfilter.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-basic-concepts-5-usingfilter-mdx-74a587b45219793aeb5c.js.map