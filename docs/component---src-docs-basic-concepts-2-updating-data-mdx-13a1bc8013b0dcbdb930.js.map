{"version":3,"sources":["webpack:///../src/docs/Basic Concepts/2.UpdatingData.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,4NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBACL,sBAAQC,WAAW,MAAnB,kBACH,iBAAQ,CACN,GAAM,+CADR,gDAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,4LAKL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ykBAgCL,iBAAQ,CACN,GAAM,8BADR,+BAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,iHAGL,iBAAQ,CACN,GAAM,6CADR,iDAGA,iBAAQ,CACN,GAAM,sCADR,yCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6+BAwDL,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,wJAIL,iBAAQ,CACN,GAAM,wCADR,yCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,+FAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,s0CAgDL,iBAAQ,CACN,GAAM,kDADR,mDAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+nBAyBL,iBAAQ,CACN,GAAM,oCADR,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8UAgBL,+BAAc,6BAAGA,WAAW,KAAQ,CAChC,KAAQ,sFADE,iC,0NAOlBJ,EAAWK,gBAAiB","file":"component---src-docs-basic-concepts-2-updating-data-mdx-13a1bc8013b0dcbdb930.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"updating-data\"\n    }}><strong parentName=\"h1\">{`Updating Data`}</strong></h1>\n    <h2 {...{\n      \"id\": \"-updating-data-automatically-by-calling-api\"\n    }}>{`# Updating data automatically by calling api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -It will only update if the reponse data is object otherwise it will replace the data.\n -It won't update Array.\n -Array will be handle in diferent way.you will find Below\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Update-Handler\",\n  },\n});\n\n// Example: storedData = {\n//   name: \"example\",\n//   date: \"22-8-2222\",\n// };\n// responseData = {\n//   name: \"example 2\",\n// };\n// UpdateData = {\n//   name: \"example 2\",\n//   date: \"22-8-2222\",\n// };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-updating-data-in-an-array\"\n    }}>{`# Updating Data in an Array`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -If the update data is Array it requires extra 2 parameters to itentify the Object that is id,key\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"id---array--string--number---array-of-ids\"\n    }}>{`id - Array || string || number - Array of ids`}</h5>\n    <h5 {...{\n      \"id\": \"key---key-example-user_id---string\"\n    }}>{`key - Key example: 'user_id' - String`}</h5>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Update-Handler\",\n    key: \"id\", // for handling array of object\n    id: [2, 3],\n  },\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: 20 },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n});\n/*\nExample:\nstoredData = [{\n  id: 1\n  name: 'example',\n  date: '22-8-2222'\n},\n{\n  id: 2\n  name: 'example',\n  date: '22-8-2222'\n}]\n\nresponseData = {\n  name: 'example 2'\n}\n\nUpdateData = [{\n  id: 1\n  name: 'example',\n  date: '22-8-2222'\n},\n{\n  id: 2\n  name: 'example 2',\n  date: '22-8-2222'\n}]\n*/\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -In the above scenario id number 3 will be ignored.\n -If u want to append or prepend data there are some other ways.you will find below\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-callbacks-for-handling-updated-data\"\n    }}>{`# Callbacks for handling Updated Data`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n -There are several callback are available can be used in different requirements\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const BASE_URL = \"https://example.com/\";\n\nconst DEMO_API_CONFIGURATION = {\n  url: \\`\\${BASE_URL}user/\\${id}\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  task: {\n    name: \"Update-Handler\",\n    key: \"id\", // for handling array of object\n    id: [2, 3],\n  },\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: 20 },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: \"bracket\" }, //default: none - refer query-string npm package\n  },\n  callback: {\n    updateCallback: (storeData: oldData, responseData: newData) => {\n      return { ...oldData, ...newData } || oldData.concat(newData); // It will update  the data in paricular reducer\n    },\n    updateStateCallback: ({ state: updatedState, data: responseData }) => {\n      return updatedState; // By default it takes the updated state if returns undefined or null\n    },\n    successCallback: () => {\n      // handle success toast or call any other api\n    },\n    errorCallback: ({\n      error,\n      errorData: responseErrorParser,\n      message,\n      status,\n      errors,\n    }) => {\n      // handle error toast or call any other api\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-manually-updating-data-by-calling-custom-task\"\n    }}>{`# Manually updating data by calling custom task`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Update-Handler\",\n    key: \"id\", // for handling array of object\n    id: [2, 3],\n    response: {\n      data: {\n        age: \"20\",\n      },\n    },\n  },\n  callback: {\n    updateCallback: (storeData: oldData, responseData: newData) => {\n      return { ...oldData, ...newData } || oldData.concat(newData); // It will update  the data in paricular reducer\n    },\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-updated-data-from-store\"\n    }}>{`# Getting Updated Data from store`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useMemo } from \"react\";\nimport { useQuery } from \"react-boilerplate-redux-saga-hoc\";\nconst {\n  Auth_hoc: {\n    reducerName,\n    reducerConstants: { DEMO_API_CONFIGURATION },\n  },\n} = props;\n\nconst { loader, data, lastUpdated, isInfinite, infiniteEnd } = useQuery(\n  reducerName,\n  DEMO_API_CONFIGURATION\n);\n`}</code></pre>\n    <p>{`Next - `}<a parentName=\"p\" {...{\n        \"href\": \"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/handling-infinite-data\"\n      }}>{`Handling Infinite Data`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}