{"version":3,"sources":["webpack:///../src/docs/Handlers/7.splicehandler.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,uNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,uBADR,uBAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,0IAIL,iBAAQ,CACN,GAAM,uCADR,wCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,6VAkBL,iBAAQ,CACN,GAAM,oCADR,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,kXAmBL,iBAAQ,CACN,GAAM,0CADR,2CAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,oZAmBL,iBAAQ,CACN,GAAM,oCADR,qCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,mEAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,2aAoBL,iBAAQ,CACN,GAAM,uCADR,wCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,+QAML,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,sBACb,WAAc,kBACd,mBAAmB,IAHlB,+mD,qNA8DTJ,EAAWK,gBAAiB","file":"component---src-docs-handlers-7-splicehandler-mdx-6b56a1753851b5ec0266.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"splice-data-handler\"\n    }}>{`Splice Data Handler`}</h1>\n    <pre><code parentName=\"pre\" {...{}}>{`  Note:\n  - It is like a splice method in an array.\n  - It will remove the object in an array and add the new object in an array.\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-splice-data-handler-without-filter\"\n    }}>{`# Splice Data Handler without filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Splice-Data-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    spliceKey: [1, 3],\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-splice-data-handler-with-filter\"\n    }}>{`# Splice Data Handler with filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Splice-Data-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    spliceKey: [1, 3],\n  },\n  filter: [\"name\"],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-splice-data-handler-with-multi-filter\"\n    }}>{`# Splice Data Handler with Multi-filter`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Splice-Data-Handler\",\n    id: [1, 2],\n    key: \"id\",\n    spliceKey: [1, 3],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-splice-data-handler-with-subkey\"\n    }}>{`# Splice Data Handler with Subkey`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\n- sub key for handling sub level of data in an object\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import { HOC, commonConstants, store } from \"react-boilerplate-redux-saga-hoc\";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: \"Splice-Data-Handler\",\n    subKey: [\"data\"],\n    id: [1, 2],\n    key: \"id\",\n    spliceKey: [1, 3],\n  },\n  filter: [[\"filter-1\"], [\"filter-2\"], [\"filter-2\"]],\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-splice-data-handler-function---api\"\n    }}>{`# Splice Data Handler Function - Api`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`  Important:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\",\n        \"metastring\": \"{.line-numbers}\",\n        \"{.line-numbers}\": true\n      }}>{`import {\n  generateTimeStamp,\n  updateIn,\n  getIn,\n  Safe,\n} from \"react-boilerplate-redux-saga-hoc\";\nexport const spliceHandler = ({\n  task: { clearData, spliceKey = [], subKey = [] } = {},\n  callback: { updateCallback } = {},\n  successData = {},\n}) => ({ data: oldData = {} } = {}) => ({\n  data: (() => {\n    if (subKey.length > 0 && Array.isArray(getIn(oldData, subKey))) {\n      const _oldCopyData = {\n        ...oldData,\n        ...successData,\n        [subKey[0]]: oldData[subKey[0]],\n      };\n      // return _oldCopyData\n      return updateIn(_oldCopyData, subKey, (_oldData) => {\n        if (clearData) return Safe(successData, \\`.\\${subKey.join(\".\")}\\`, []);\n        return updateCallback\n          ? updateCallback(\n              _oldData,\n              Safe(successData, \\`.\\${subKey.join(\".\")}\\`, [])\n            )\n          : Array.isArray(_oldData)\n          ? (() => {\n              const _newData = _oldData.slice();\n              _newData.splice(\n                ...spliceKey,\n                ...Safe(successData, \\`.\\${subKey.join(\".\")}\\`, [])\n              );\n              return _newData;\n            })()\n          : _oldData;\n      });\n    }\n    const newData = Array.isArray(oldData)\n      ? (() => {\n          const _newData = oldData.slice();\n          return _newData.splice(\n            ...spliceKey,\n            ...Safe(successData, \\`.\\${subKey.join(\".\")}\\`, [])\n          );\n        })()\n      : oldData;\n    return updateCallback ? updateCallback(oldData, successData) : newData;\n  })(),\n  error: false,\n  lastUpdated: generateTimeStamp(),\n  isError: false,\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}