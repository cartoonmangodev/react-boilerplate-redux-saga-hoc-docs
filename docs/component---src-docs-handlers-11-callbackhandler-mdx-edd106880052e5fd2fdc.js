(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{hqj8:function(a,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return c})),t.d(e,"default",(function(){return b}));var n=t("Fcif"),s=t("+I+c"),l=(t("mXGw"),t("/FXl")),r=t("TjRS"),c=(t("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Handlers/11.callbackhandler.mdx"}});var o={_frontmatter:c},i=r.a;function b(a){var e=a.components,t=Object(s.a)(a,["components"]);return Object(l.b)(i,Object(n.a)({},o,t,{components:e,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"callback-handler"},"Callback Handler"),Object(l.b)("h2",{id:"-things-to-remember"},"# Things to Remember"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{})," - This handler won't update only data.\n - But it will update loaders,error state, and also toast.\n - This handler will work only on api calls and custom task.\n")),Object(l.b)("h2",{id:"-callback-handler-without-filter"},"# Callback Handler without filter"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript",metastring:"{.line-numbers}","{.line-numbers}":!0}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: "Callback-Handler",\n    callback: (previousData, responseData, rest: {statusCode, ...rest} = {}, status) => ({\n      loading: null,\n      data: status === 200 ? [...previousData, ...responseData] : responseData,\n    }),\n  },\n});\n')),Object(l.b)("h2",{id:"-callback-handler-with-filter"},"# Callback Handler with filter"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript",metastring:"{.line-numbers}","{.line-numbers}":!0}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: "Callback-Handler",\n    callback: (previousData, successData, rest: {statusCode, ...rest} = {}, status) => ({\n      loading: null,\n      data: status === 200 ? [...previousData, ...successData] : previousData,\n    }),\n  },\n  filter: ["name"],\n});\n')),Object(l.b)("h2",{id:"-dont-update-data-handler-with-multi-filter"},"# Dont Update Data Handler with Multi-filter"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript",metastring:"{.line-numbers}","{.line-numbers}":!0}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: "Callback Handler",\n     callback: (previousData, successData, rest: {statusCode, ...rest} = {}, status) => ({\n      loading: null,\n      data: status === 200 ? [...previousData, ...successData] : previousData,\n    }),\n  },\n  filter: [["filter-1"], ["filter-2"], ["filter-2"]],\n});\n')),Object(l.b)("h2",{id:"-callback-handler-function---api"},"# Callback Handler Function - Api"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"  Note:\n- The code below are the built in handler function.\n- Don't copy and paste this handler, it is already available with this hoc.\n- You will learn how to create your own custom handler in below.\n- If you want to customize this handler you can do it.\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript",metastring:"{.line-numbers}","{.line-numbers}":!0}),'import invariant from "invariant";\nimport { typeOf } from "../helpers";\nconst checkKey = (callback) => {\n  invariant(\n    typeOf(callback) === "function",\n    `(react-boilerplate-redux-saga-hoc) ${\n      typeof callback === "undefined"\n        ? "\'Callback-Handler\' required callback key"\n        : "callback is not a function"\n    }`\n  );\n};\nexport const callbackHandler = ({\n  task: { callback } = {},\n  successData = {},\n  successDataStatusCode,\n}) => ({ data: oldData = {}, statusCode, ...rest } = {}) => {\n  checkKey(callback);\n  return callback({\n    oldData: oldData,\n    newData: successData,\n    rest: { ...rest, statusCode },\n    status: statusCode || successDataStatusCode,\n  });\n};\n')))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Handlers/11.callbackhandler.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-handlers-11-callbackhandler-mdx-edd106880052e5fd2fdc.js.map