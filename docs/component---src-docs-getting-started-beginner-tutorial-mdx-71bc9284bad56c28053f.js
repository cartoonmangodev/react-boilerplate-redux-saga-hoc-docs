(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{"2RCH":function(e,n,t){e.exports=t.p+"static/11-773dadc13713fb8722fcc6aa3dbeec89.png"},"8R9u":function(e,n,t){e.exports=t.p+"static/10-63f4dc4dc4aa2bc0480edeb232e77c7b.png"},NYqD:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return l}));var a=t("Fcif"),o=t("+I+c"),r=(t("mXGw"),t("/FXl")),s=t("TjRS"),i=(t("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Getting Started/beginnerTutorial.mdx"}});var c={_frontmatter:i},u=s.a;function l(e){var n=e.components,s=Object(o.a)(e,["components"]);return Object(r.b)(u,Object(a.a)({},c,s,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"how-to-connect-hoc-to-the-component"},"How to connect Hoc to the component"),Object(r.b)("h2",{id:"-step-by-step-process"},"# Step by step process"),Object(r.b)("h2",{id:"1-importing-a-package"},"1. ",Object(r.b)("strong",{parentName:"h2"},"Importing a package")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n} from "react-boilerplate-redux-saga-hoc";\n')),Object(r.b)("h2",{id:"2-creating-api-end-points-configuration"},"2. ",Object(r.b)("strong",{parentName:"h2"},"Creating Api-End-Points Configuration")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst BASE_URL = "https://jsonplaceholder.typicode.com";\n\nconst DEMO_GET_API = `${BASE_URL}/posts`; /* default method GET */\n\n/* Either pass a string or object  */\n\nconst DEMO_GET_POSTS_API = {\n  url: `${BASE_URL}/posts`,\n  method: "GET",\n};\n/*\nNote: If you want to pass params to the url such as id,type etc.change `${BASE_URL}/posts` to ({ id }) => `${BASE_URL}/posts/${id}`\n*/\nconst DEMO_POST_API = {\n  url: ({ id }) => `${BASE_URL}/posts/${id}`,\n  method: "POST", // default GET\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code", /* optional */,\n  responseDataKey: "data", /* optional */,\n  responseMessageKey: "status", /* optional */,\n  errorMessageKey: "error", /* optional */,\n};\nconst DEMO_DELETE_API = {\n  url: ({ id }) => `${BASE_URL}/posts/${id}`,\n  method: "DELETE",\n  responseStatusCode: [900], /* optional */,\n  responseStatusCodeKey: "code", /* optional */,\n  responseDataKey: "data", /* optional */,\n  responseMessageKey: "status", /* optional */,\n  errorMessageKey: "error", /* optional */,\n};\nconst DEMO_PUT_API = {\n  url: ({ id, type }) => `${BASE_URL}/posts/${id}/${type}`,\n  method: "PUT",\n  responseStatusCode: [900], /* optional */,\n  responseStatusCodeKey: "code", /* optional */,\n  responseDataKey: "data", /* optional */,\n  responseMessageKey: "status", /* optional */,\n  errorMessageKey: "error", /* optional */,\n  errorHandlerStatusCode: [900], /* for handling error on success response eg: {code: 400,status: \'SUCCESS\'}*/\n};\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"     Note:\n     -You can create a separate file for api-end-points. (api-end-point.js)\n")),Object(r.b)("h2",{id:"3-creating-hoc"},"3. ",Object(r.b)("strong",{parentName:"h2"},"Creating HOC")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n} from "react-boilerplate-redux-saga-hoc";\nimport {\n  DEMO_GET_API,\n  DEMO_POST_API,\n  DEMO_DELETE_API,\n  DEMO_PUT_API,\n} from "./api-end-points.js";\nconst HOC = HocConfigure({ handlers: [] });\nconst Auth_HOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n  },\n  name: "Auth",\n});\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"    Note:\n    - When you add url in apiEndPoints it will create constants, actions, reducer, saga for you.\n    - Great,We are almost done.next step is connect hoc with our component.\n")),Object(r.b)("h2",{id:"4-connecting-with-component"},"4. ",Object(r.b)("strong",{parentName:"h2"},"Connecting with Component")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC as HocConfigure,\n  commonConstants,\n  store,\n  useQuery,\n} from "react-boilerplate-redux-saga-hoc";\nimport { compose } from "redux";\n\nimport {\n  DEMO_GET_API,\n  DEMO_POST_API,\n  DEMO_DELETE_API,\n  DEMO_PUT_API,\n} from "./api-end-points.js";\nimport useCustomHook from "./hooks"; // you will find creating custom hooks below\n\nconst HOC = HocConfigure({ handlers: [] });\n\nconst useAuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n    DEMO_GET_POSTS_API,\n  },\n  name: "Auth",\n});\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const hooks = useCustomHook(props, { commonConstants }); // discuss later below\n  const {\n    get: { data },\n  } = hooks;\n  console.log(props, data);\n  return (\n    <div>\n      {data.map(({ title }) => (\n        <li>{title}</li>\n      ))}\n    </div>\n  );\n});\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This is initial state from Redux Store ")),Object(r.b)("p",null,Object(r.b)("img",{alt:"  ",src:t("Vs58")})),Object(r.b)("h2",{id:"5-configuring-store"},"5. ",Object(r.b)("strong",{parentName:"h2"},"Configuring Store")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import {\n  HOC,\n  commonConstants,\n  store as configureStore,\n} from "react-boilerplate-redux-saga-hoc";\n\nconst initialState = {};\nconst store = configureStore(initialState); // by default second parameter will be false\n\nexport default function App(props) {\n  return (\n    <Provider store={store}>\n      <CustomComponent />\n    </Provider>\n  );\n}\n\nexport default App;\n')),Object(r.b)("h2",{id:"6-create-custom-hook"},"6. ",Object(r.b)("strong",{parentName:"h2"},"Create custom hook")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { useEffect, useMemo, useQuery } from "react";\nconst initialLoaderState = true;\nexport default (\n  {\n    Auth_hoc: {\n      actions: {\n        // For API CALLS\n        DEMO_GET_API_CALL,\n        DEMO_GET_POSTS_API_CALL,\n        DEMO_POST_API_CALL,\n        DEMO_DELETE_API_CALL,\n        DEMO_PUT_API_CALL,\n        // For API CANCEL\n        DEMO_GET_API_CANCEL,\n        DEMO_GET_POSTS_API_CANCEL,\n        DEMO_POST_API_CANCEL,\n        DEMO_DELETE_API_CANCEL,\n        DEMO_PUT_API_CANCEL,\n        // For Modifying reducer without api calls\n        DEMO_GET_API_CUSTOM_TASK,\n        DEMO_GET_POSTS_API_CUSTOM_TASK,\n        DEMO_POST_API_CUSTOM_TASK,\n        DEMO_DELETE_API_CUSTOM_TASK,\n        DEMO_PUT_API_CUSTOM_TASK,\n      } = {},\n      reducerName,\n      reducerConstants: {\n        // For getting data\n        DEMO_GET_API,\n        DEMO_POST_API,\n        DEMO_DELETE_API,\n        DEMO_PUT_API,\n        DEMO_GET_POSTS_API,\n      } = {},\n    } = {},\n    getData,\n    dispatch,\n  },\n  { commonConstants }\n) => {\n  const { ON_SUCCESS, ON_UNMOUNT } = commonConstants;\n  useEffect(() => {\n    DEMO_GET_API_CALL();\n    DEMO_GET_POSTS_API_CALL({\n      request: {\n        query: {\n          skip: 0,\n          limit: 1,\n        },\n      },\n    });\n    DEMO_POST_API_CALL({\n      request: {\n        payload: {\n          name: "name",\n          age: 20,\n        },\n        params: {\n          id: 1,\n        },\n      },\n    });\n    DEMO_DELETE_API_CALL({\n      request: {\n        params: {\n          id: 1,\n        },\n      },\n    });\n    DEMO_PUT_API_CALL({\n      request: {\n        params: {\n          id: 1,\n          type: "male",\n        },\n      },\n    });\n\n    return () => {\n      const filter = []; // optional parameter dont pass if you are not using filter\n      // Note: You will learn more about filter later below\n      // For cancelling incomplete api call if you are unmounting this will avoid unwanted network traffic.This is optional no need to pass all the times\n      DEMO_GET_API_CANCEL(ON_UNMOUNT, filter); // Don\'t pass ON_UNMOUNT if you dont want to reset tje data from reducer on unmounting\n      DEMO_POST_API_CANCEL();\n      DEMO_DELETE_API_CANCEL();\n      DEMO_PUT_API_CANCEL(ON_UNMOUNT);\n    };\n  }, []);\n  /* \nNote: Don\'t pass this (initialLoaderState) paramter as true if you are not calling api on mount.\nNote: loader will be always true until you call the particular api\n*/\n  const [Get, Post, Delete, Put] = useQuery(reducerName, [\n    DEMO_POST_API,\n    DEMO_PUT_API,\n    DEMO_DELETE_API,\n    { key: DEMO_GET_API, default: [] },\n  ]);\n\n  /*\ninitialLoaderState - default will be true, so make it false\nif you not calling api on mount other wise loader will always true until you call this api\n*/\n  /* \n    const { loader , data , lastUpdated, isError, isInfinite, infiniteEnd, toast, error } = Get;\n    const { loader , data , lastUpdated, isError, isInfinite, infiniteEnd, toast, error } = Post;\n    const { loader , data , lastUpdated, isError, isInfinite, infiniteEnd, toast, error } = Put;\n    const { loader , data , lastUpdated, isError, isInfinite, infiniteEnd, toast, error } = Delete;\n*/\n  return {\n    Get,\n    Post,\n    Put,\n    Delete,\n  };\n};\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This is state from Redux Store after api gets success or failure")),Object(r.b)("p",null,Object(r.b)("img",{alt:"  ",src:t("Xj9Z")})),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{})," Note:\n -Data will be store in reducer once api call gets success or failure\n -No need to create seperate constants for error or success\n -Hoc will handle all the success, failure, Cancel tasks\n")),Object(r.b)("p",null,Object(r.b)("img",{alt:"  ",src:t("mCgi")}),"\n",Object(r.b)("img",{alt:"  ",src:t("2RCH")})),Object(r.b)("h2",{id:"7-using-the-hook"},"7. ",Object(r.b)("strong",{parentName:"h2"},"Using the hook")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst CustomComponent = compose(AuthenticationHOC)((props) => {\n  const hooks = useCustomHook(props, { commonConstants });\n  const {\n    Get: { data },\n  } = hooks;\n  console.log(props, data);\n  return (\n    <ul>\n      {data.map(({ title, id }) => (\n        <li key={id}>{title}</li>\n      ))}\n    </ul>\n  );\n});\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This is loading state from Redux Store after api gets success or failure")),Object(r.b)("p",null,Object(r.b)("img",{alt:"  ",src:t("8R9u")})),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{}),"Note:\n-This is the basic setup for handling api calls.\n-You will find the more useful features in below such as updating, deleting data.\n-Handling multiple tasks..etc\n")),Object(r.b)("h2",{id:"-using-usequery-hook-in-different-ways"},"# using useQuery hook in different ways"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'/* accessing multiple data  at single query */\nconst [test_data, test, test_deep, testGetApi] = useQuery(\n  reducerName /* can pass any reducer key such as \'Auth\' , \'router\' , ..etc*/,\n  [\n    {\n      key: TEST_GET_API,\n      name: "test",\n      initialLoaderState: true,\n    },\n    {\n      key: TEST_GET_API,\n      query: ".data[0]",\n      initialLoaderState: false,\n    },\n    {\n      key: TEST_GET_API,\n      query: ".data",\n      initialLoaderState: false,\n      default: [], // Default for data key it also check\'s type of data..if type is object return [].Don\'t pass if you dont want to type check\n    },\n    TEST_GET_API,\n  ]\n);\n\n/* query can be used in different ways based on your requirement */\n\nconst [data, loader] = useQuery(\n  reducerName, // can pass any reducer key such as \'Auth\' , \'router\' , ..etc\n  TEST_GET_API,\n  [\n    {\n      query: ".data[0]",\n      default: [],\n    },\n    {\n      query: ".loader",\n      default: false,\n    },\n  ]\n);\n\n/* For direct accessing reducer keys */\nconst { isLoggedIn, profile } = useQuery(reducerName, {\n  requiredKey: ["isLoggedIn", "profile"],\n});\n\n/* pass array of string instead of object */\n\nconst [\n  { loader, data, lastUpdated, isError, error, toast },\n] = useQuery(reducerName, [TEST_GET_API]);\n\n/* Pass an object instead of array */\nconst data = useQuery(reducerName, {\n  key: TEST_GET_API,\n  default: [],\n  requiredKey: ["loader", "data", "lastUpdated"],\n});\n\n/* pass a string insted of array */\nconst { loader, data, lastUpdated, isError, error, toast } = useQuery(\n  reducerName,\n  TEST_GET_API\n);\n\n/* Pass a config as a third parameter its optional */\nconst data = useQuery(reducerName, TEST_GET_API, {\n  query: ".data",\n  default: [],\n});\n\n/* for getting whole reducer data */\nconst data = useQuery(); // Don\'t use this use this until its required it will render the component every time reducer change\nconst data = useQuery(reducerName); // Don\'t use this until its required it will render the component every time reducer data change\n')),Object(r.b)("p",null,"Next - ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/storing-data"}),"Basic Concepts")))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Getting Started/beginnerTutorial.mdx"}}),l.isMDXComponent=!0},Vs58:function(e,n,t){e.exports=t.p+"static/7-f5a7d344e1ab3de4c723fc7a17d114f9.png"},Xj9Z:function(e,n,t){e.exports=t.p+"static/8-266e166916a7bd2fcb55d001d7a80882.png"},mCgi:function(e,n,t){e.exports=t.p+"static/9-094444e6582de155b2ad8483b65403db.png"}}]);
//# sourceMappingURL=component---src-docs-getting-started-beginner-tutorial-mdx-71bc9284bad56c28053f.js.map