{"version":3,"sources":["webpack:///../src/docs/Getting Started/installation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,S,2NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,8CADR,+CAGA,uBAAK,gCAAMC,WAAW,OAAU,IAA3B,gEAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qFAML,+CACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mFAML,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,izBA6BL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gmEAwGL,iBAAQ,CACN,GAAM,+CADR,gDAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,uDAML,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,q9FAsGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ynGAoHL,iBAAQ,CACN,GAAM,+BADR,gCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,kEAGL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qFAML,+CACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mFAML,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,ofAsBL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+kEA8GL,iBAAQ,CACN,GAAM,0BADR,2BAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,wKAKL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,wFAML,+CACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qFAML,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,izCAwDL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wpBAyBL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gWAYL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,s+CA6DL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oUAYL,iBAAQ,CACN,GAAM,sCADR,uCAGA,uBAAK,gCAAMA,WAAW,OAAU,IAA3B,iIAIL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,mDAML,2BACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2CAML,iCACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,0IAYL,+BAAc,6BAAGA,WAAW,KAAQ,CAChC,KAAQ,4EADE,yB,yNAOlBJ,EAAWK,gBAAiB","file":"component---src-docs-getting-started-installation-mdx-c0642a9d2701343dbf55.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/chrissie/Desktop/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"installation\"\n    }}>{`Installation`}</h1>\n    <h2 {...{\n      \"id\": \"-installing-on-create-react-app-scafolding\"\n    }}>{`# Installing on create-react-app scafolding`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\nPlease make sure to install required dependencies.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nnpm install redux-saga@0.16.2 react-redux react-boilerplate-redux-saga-hoc\n\n`}</code></pre>\n    <p>{`If you are using yarn:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nyarn  add redux-saga@0.16.2 react-redux react-boilerplate-redux-saga-hoc\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* index.js */\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { store as configureStore } from \"react-boilerplate-redux-saga-hoc\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst initialState = {};\nconst middleware = [];\nconst store = configureStore(initialState, middleware);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/** App.js **/\n\nimport React from \"react\";\nimport { HOC as HocConfigure } from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nconst HOC = HocConfigure({\n  handlers: [],\n});\nconst NewHoc = HOC({\n  initialState: {\n    profile: {},\n  },\n  dontReset: {\n    TEST_API: {},\n    TEST_SUB_API: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    TEST_API: {},\n    TEST_SUB_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  constantReducer: ({ type, state }) => {\n    if (type === \"NAME\")\n      return {\n        ...state,\n        name: \"NAME\",\n      };\n    return state;\n  },\n  name: \"NAME2\",\n});\nconst AuthHoc = HOC({\n  initialState: {\n    profile: {},\n  },\n  dontReset: {\n    TEST_API: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    TEST_API: {\n      url: \"https://jsonplaceholder.typicode.com/posts/\",\n      method: \"GET\",\n      responseStatusCode: [900],\n      responseStatusCodeKey: \"code\",\n      responseDataKey: \"data\",\n      responseMessageKey: \"message\",\n    },\n    TEST_SUB_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  constantReducer: ({ type, state }) => {\n    if (type === \"NAME\")\n      return {\n        ...state,\n        name: \"NAME\",\n      };\n    return state;\n  },\n  name: \"Auth\",\n});\nfunction App(props) {\n  console.log(props);\n  React.useEffect(() => {\n    const {\n      Auth_hoc: {\n        actions: { TEST_API_CALL },\n      },\n    } = props;\n    TEST_API_CALL();\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default compose(NewHoc, AuthHoc)(App);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-installing-on-react-boilerplate-scafolding\"\n    }}>{`# Installing on React-Boilerplate scafolding`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nnpm install react-boilerplate-redux-saga-hoc\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/**\n * app.js\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\n// Needed for redux-saga es6 generator support\nimport \"@babel/polyfill\";\n\n// Import all the third party stuff\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport { Router } from \"react-router-dom\";\nimport FontFaceObserver from \"fontfaceobserver\";\nimport history from \"utils/history\";\nimport \"sanitize.css/sanitize.css\";\n\n// Import root app\nimport App from \"containers/App\";\n\n// Import Language Provider\nimport LanguageProvider from \"containers/LanguageProvider\";\n\n// Load the favicon and the .htaccess file\nimport \"!file-loader?name=[name].[ext]!./images/favicon.ico\";\nimport \"file-loader?name=.htaccess!./.htaccess\"; // eslint-disable-line import/extensions\n\nimport configureStore from \"./configureStore\";\n\n// Import i18n messages\nimport { translationMessages } from \"./i18n\";\n\n// Observe loading of Open Sans (to remove open sans, remove the <link> tag in\n// the index.html file and this observer)\nconst openSansObserver = new FontFaceObserver(\"Open Sans\", {});\n\n// When Open Sans is loaded, add a font-family using Open Sans to the body\nopenSansObserver.load().then(() => {\n  document.body.classList.add(\"fontLoaded\");\n});\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureStore(initialState, history);\nconst MOUNT_NODE = document.getElementById(\"app\");\n\nconst render = (messages) => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <LanguageProvider messages={messages}>\n        <ConnectedRouter history={history}>\n          <Router history={history}>\n            <App />\n          </Router>\n        </ConnectedRouter>\n      </LanguageProvider>\n    </Provider>,\n    MOUNT_NODE\n  );\n};\n\nif (module.hot) {\n  // Hot reloadable React components and translation json files\n  // modules.hot.accept does not accept dynamic dependencies,\n  // have to be constants at compile-time\n  module.hot.accept([\"./i18n\", \"containers/App\"], () => {\n    ReactDOM.unmountComponentAtNode(MOUNT_NODE);\n    render(translationMessages);\n  });\n}\n\n// Chunked polyfill for browsers without Intl support\nif (!window.Intl) {\n  new Promise((resolve) => {\n    resolve(import(\"intl\"));\n  })\n    .then(() =>\n      Promise.all([\n        import(\"intl/locale-data/jsonp/en.js\"),\n        import(\"intl/locale-data/jsonp/de.js\"),\n      ])\n    ) // eslint-disable-line prettier/prettier\n    .then(() => render(translationMessages))\n    .catch((err) => {\n      throw err;\n    });\n} else {\n  render(translationMessages);\n}\n\n// Install ServiceWorker and AppCache in the end since\n// it's not most important operation and if main code fails,\n// we do not want it installed\nif (process.env.NODE_ENV === \"production\") {\n  require(\"offline-plugin/runtime\").install(); // eslint-disable-line global-require\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/**\n *\n * containers/App/index.js\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n */\n\nimport React, { useEffect, useMemo } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { Switch, Route } from \"react-router-dom\";\nimport history from \"utils/history\";\nimport {\n  HOC as HocConfigure,\n  commonConstants,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport HomePage from \"containers/HomePage/Loadable\";\nimport FeaturePage from \"containers/FeaturePage/Loadable\";\nimport NotFoundPage from \"containers/NotFoundPage/Loadable\";\nimport Header from \"components/Header\";\nimport Footer from \"components/Footer\";\nimport createReducer from \"../../reducers\";\nimport GlobalStyle from \"../../global-styles\";\n\nconst AppWrapper = styled.div\\`\n  max-width: calc(768px + 16px * 2);\n  margin: 0 auto;\n  display: flex;\n  min-height: 100%;\n  padding: 0 16px;\n  flex-direction: column;\n\\`;\nconst HOC = HocConfigure({\n  handlers: [{ name: \"NAME\" }],\n  createReducer,\n});\nconst BASE_URL = \"https://jsonplaceholder.typicode.com\";\nconst DEMO_GET_API = {\n  url: \\`\\${BASE_URL}/posts\\`,\n  method: \"GET\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\n/*\nNote: If you want to pass params to the url such as id,type etc.change \\`\\${BASE_URL}/posts\\` to ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`\n*/\nconst DEMO_POST_API = {\n  url: ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`,\n  method: \"POST\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\nconst DEMO_DELETE_API = {\n  url: ({ id }) => \\`\\${BASE_URL}/posts/\\${id}\\`,\n  method: \"DELETE\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\nconst DEMO_PUT_API = {\n  url: ({ id, type }) => \\`\\${BASE_URL}/posts/\\${id}/\\${type}\\`,\n  method: \"PUT\",\n  responseStatusCode: [900],\n  responseStatusCodeKey: \"code\",\n  responseDataKey: \"data\",\n  responseMessageKey: \"status\",\n  errorMessageKey: \"error\",\n};\nconst AuthenticationHOC = HOC({\n  initialState: {\n    profile: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    DEMO_GET_API,\n    DEMO_POST_API,\n    DEMO_DELETE_API,\n    DEMO_PUT_API,\n  },\n  name: \"Auth\",\n});\n\nfunction App(props) {\n  return (\n    <AppWrapper>\n      <Helmet\n        titleTemplate=\"%s - React.js Boilerplate\"\n        defaultTitle=\"React.js Boilerplate\"\n      >\n        <meta name=\"description\" content=\"A React.js Boilerplate application\" />\n      </Helmet>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/features\" component={FeaturePage} />\n        <Route path=\"\" component={NotFoundPage} />\n      </Switch>\n      <Footer />\n      <GlobalStyle />\n    </AppWrapper>\n  );\n}\nexport default AuthenticationHOC(App);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-installing-on-react-native\"\n    }}>{`# Installing on React-Native`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{` Note:\n Please make sure to install required dependencies.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nnpm install redux-saga@0.16.2 react-redux react-boilerplate-redux-saga-hoc\n\n`}</code></pre>\n    <p>{`If you are using yarn:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nyarn  add redux-saga@0.16.2 react-redux react-boilerplate-redux-saga-hoc\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/**\n * index.js\n */\nimport React from \"react\";\nimport { AppRegistry } from \"react-native\";\nimport { Provider } from \"react-redux\";\nimport { store as configureStore } from \"react-boilerplate-redux-saga-hoc\";\nimport App from \"./App\";\nimport { name as appName } from \"./app.json\";\n\nconst initialState = {};\n\nconst store = configureStore(initialState);\n\nAppRegistry.registerComponent(appName, () => (props) => (\n  <Provider store={store}>\n    <App {...props} />\n  </Provider>\n));\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/**\n * Sample React Native App\n * https://github.com/facebook/react-native\n *\n * @format\n * @flow strict-local\n */\nimport { compose } from \"redux\";\nimport React from \"react\";\nimport {\n  SafeAreaView,\n  StyleSheet,\n  ScrollView,\n  View,\n  Text,\n  StatusBar,\n} from \"react-native\";\nimport { HOC as HocConfigure } from \"react-boilerplate-redux-saga-hoc\";\nimport {\n  Header,\n  LearnMoreLinks,\n  Colors,\n  DebugInstructions,\n  ReloadInstructions,\n} from \"react-native/Libraries/NewAppScreen\";\nconst HOC = HocConfigure({\n  handlers: [{ name: \"NAME\" }],\n  isReactBoilerplate: false,\n});\nconst NewHoc = HOC({\n  initialState: {\n    profile: {},\n  },\n  dontReset: {\n    TEST_API: {},\n    TEST_SUB_API: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    TEST_API: {},\n    TEST_SUB_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  constantReducer: ({ type, state }) => {\n    if (type === \"NAME\")\n      return {\n        ...state,\n        name: \"NAME\",\n      };\n    return state;\n  },\n  name: \"NAME2\",\n});\nconst AuthHoc = HOC({\n  initialState: {\n    profile: {},\n  },\n  dontReset: {\n    TEST_API: {},\n  },\n  useHook: true,\n  apiEndPoints: {\n    TEST_API: {\n      url: \"https://jsonplaceholder.typicode.com/posts/\",\n      method: \"GET\",\n      responseStatusCode: [900],\n      responseStatusCodeKey: \"code\",\n      responseDataKey: \"data\",\n      responseMessageKey: \"message\",\n    },\n    TEST_SUB_API: {},\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  constantReducer: ({ type, state }) => {\n    if (type === \"NAME\")\n      return {\n        ...state,\n        name: \"NAME\",\n      };\n    return state;\n  },\n  name: \"Auth\",\n});\nconst App = (props) => {\n  console.log(props);\n  React.useEffect(() => {\n    const {\n      Auth_hoc: {\n        actions: { TEST_API_CALL },\n      },\n    } = props;\n    TEST_API_CALL();\n  }, []);\n  return (\n    <>\n      <StatusBar barStyle=\"dark-content\" />\n    </>\n  );\n};\n\nexport default compose(NewHoc, AuthHoc)(App);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-installing-on-next-js\"\n    }}>{`# Installing on Next-js`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\nPlease install redux-saga version 0.16.2.\nThis package does not support latest version on redux-saga.\nPlease make sure to install required dependencies.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nnpm install redux-saga@0.16.2  react-redux   react-boilerplate-redux-saga-hoc\n\n`}</code></pre>\n    <p>{`If you are using yarn:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nyarn  add redux-saga@0.16.2  react-redux  react-boilerplate-redux-saga-hoc\n\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* config.js */\nimport { HOC as HocConfigure } from \"react-boilerplate-redux-saga-hoc\";\n\nconst HOC = HocConfigure({ handlers: [], nextJS: true, useHook: true });\n\nconst { saga: AuthSaga, reducer: AuthReducer, hoc: AuthenticationHOC } = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {\n      url: \"https://jsonplaceholder.typicode.com/posts/\",\n      method: \"GET\",\n      responseStatusCode: [900],\n      responseStatusCodeKey: \"code\",\n      responseDataKey: \"data\",\n      responseMessageKey: \"message\",\n    },\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  name: \"Auth\",\n});\n\nconst { saga: DashSaga, reducer: DashReducer, hoc: DashHOC } = HOC({\n  initialState: {\n    profile: {},\n  },\n  apiEndPoints: {\n    TEST_API: {\n      url: \"https://jsonplaceholder.typicode.com/posts/\",\n      method: \"GET\",\n      responseStatusCode: [900],\n      responseStatusCodeKey: \"code\",\n      responseDataKey: \"data\",\n      responseMessageKey: \"message\",\n    },\n    REGISTER_API: {\n      url: \\`users/user-signup/\\`,\n      method: \"POST\",\n    },\n  },\n  name: \"Dash\",\n});\n\nconst Store = createStore({\n  saga: [AuthSaga, DashSaga],\n  reducer: [AuthReducer, DashReducer],\n});\n\nexport { AuthenticationHOC, DashHOC, Store };\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* pages/_app.js*/\nimport React from \"react\";\nimport App from \"next/app\";\nimport { Provider } from \"react-redux\";\nimport { withRedux, withReduxSaga } from \"react-boilerplate-redux-saga-hoc\";\nimport { Store } from \"./config.js\";\n\nfunction MyApp({ Component, pageProps, store }) {\n  return (\n    <Provider store={store}>\n      <Component {...pageProps} />\n    </Provider>\n  );\n}\n\nMyApp.getInitialProps = async (appContext) => {\n  // calls page's \\`getInitialProps\\` and fills \\`appProps.pageProps\\`\n  const appProps = await App.getInitialProps(appContext);\n  return { ...appProps };\n};\n\nexport default withRedux(Store)(withReduxSaga(MyApp));\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* _app.js */\n/* Hoc will use get initial props.  please add this in _app.js inorder to use hoc in ssr */\nimport App from \"next/app\";\n\nMyApp.getInitialProps = async (appContext) => {\n  // calls page's \\`getInitialProps\\` and fills \\`appProps.pageProps\\`\n  const appProps = await App.getInitialProps(appContext);\n  return { ...appProps };\n};\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* pages/index.js */\nimport Head from \"next/head\";\nimport { compose } from \"redux\";\nimport { toPromise } from \"react-boilerplate-redux-saga-hoc\";\nimport { AuthenticationHOC, DashHOC } from \"./config\";\n\nfunction Home(props) {\n  console.log(props);\n  React.useEffect(() => {\n    const {\n      store,\n      isServer,\n      Auth_hoc: {\n        actions: { TEST_API_CALL },\n      },\n    } = props;\n    TEST_API_CALL();\n  }, []);\n  return (\n    <div className=\"container\">\n      <Head>\n        <title>Create Next App</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <h1>create next app</h1>\n    </div>\n  );\n}\n\nHome.getInitialProps = async (props) => {\n  const { store, isServer } = props.ctx || props;\n  const {\n    Auth_hoc: {\n      actions: { TEST_API_CALL, REGISTER_API_CALL },\n    },\n    Dash_hoc: {\n      actions: { TEST_API_CALL: DashTest },\n    },\n  } = props;\n  TEST_API_CALL(); //  non-blocking call\n  /* toPromise is mostly used for login api calls */\n  const { status, error, reponse } = await toPromise(TEST_API_CALL); // blocking call - it will execute next line if promise is resolved\n  if (status === \"SUCCESS\")\n    await toPromise(REGISTER_API_CALL, {\n      request: {\n        payload: {\n          name: \"test\",\n          password: test,\n        },\n      },\n    });\n  else if (status === \"Error\") console.log(\"Error\");\n  return {\n    isServer,\n  };\n};\n\nexport default compose(AuthenticationHOC, DashHOC)(Home);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* _app.js */\n/* add this in _app.js  if you are using nextJs 9.3 or later */\nimport App from \"next/app\";\n\nMyApp.getInitialProps = async (appContext) => {\n  // calls page's \\`getInitialProps\\` and fills \\`appProps.pageProps\\`\n  const appProps = await App.getInitialProps(appContext);\n  return { ...appProps };\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-getting-regenerator-runtime-error\"\n    }}>{`# Getting regenerator runtime error`}</h2>\n    <pre><code parentName=\"pre\" {...{}}>{`Note:\nIf you are getting regenerator runtime error.\nPlease make sure you have added babelrc file in your nextjs project.\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nnpm install babel-preset-next --save-dev\n\n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`\nyarn add babel-preset-next --dev\n\n`}</code></pre>\n    <p>{`.babelrc`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"presets\": [\n    \"next\"\n    // Add your babel presets here\n  ],\n  \"plugins\": [\n    // Add your babel plugins here\n  ]\n}\n`}</code></pre>\n    <p>{`Next - `}<a parentName=\"p\" {...{\n        \"href\": \"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/storing-data\"\n      }}>{`Basic Concepts`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}