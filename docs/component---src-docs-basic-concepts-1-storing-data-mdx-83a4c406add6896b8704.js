(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"4cnl":function(e,a,t){"use strict";t.r(a),t.d(a,"_frontmatter",(function(){return c})),t.d(a,"default",(function(){return u}));var n=t("Fcif"),r=t("+I+c"),s=(t("mXGw"),t("/FXl")),o=t("TjRS"),c=(t("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Basic Concepts/1.Storing Data.mdx"}});var l={_frontmatter:c},i=o.a;function u(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)(i,Object(n.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(s.b)("h1",{id:"storing-data"},"Storing Data"),Object(s.b)("h2",{id:"-storing-data-automatically-by-calling-api"},"# storing data automatically by calling api"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"    Note:\n -Data will be stored automatically in the reducer and also it handles all the states..such as error,infinte,loader..etc\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL();\n')),Object(s.b)("h2",{id:"-sending-query-parameters-to-the-api"},"# sending query parameters to the api"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"  Note:\n  -No need to worry about appending query.\n  -Its more simpler just pass the object in the query parameter that will append query in the url.\n  -And also passing params is simpler.\n")),Object(s.b)("h2",{id:""}),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{})," Note:\n -If you need to pass params in the url.\n -Then you have to change the url to function to receive params.just like give below.\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: ({ id }) => `${BASE_URL}user/${id}`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nDEMO_API_CONFIGURATION_CALL({\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    payload: { age: 20 }, // for post calls\n    paramsSerializer: { arrayFormat: "bracket" }, //default: none - refer query-string npm package\n  },\n});\n')),Object(s.b)("h2",{id:"-callbacks-for-handling-success-or-failure"},"# Callbacks for handling success or failure"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"  Note:\n  -Callback are another helper function which handles errors, success, cancel..etc\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const BASE_URL = "https://example.com/";\n\nconst DEMO_API_CONFIGURATION = {\n  url: `${BASE_URL}user/${id}`,\n  method: "GET",\n  responseStatusCode: [900],\n  responseStatusCodeKey: "code",\n  responseDataKey: "data",\n  responseMessageKey: "status",\n  errorMessageKey: "error",\n};\n\nconst responseErrorParser = (data) =>\n  (Array.isArray(data) &&\n    data.reduce((acc, curr) => {\n      const [key, message] = Object.entries(curr)[0];\n      const payloadKey = key.split(",")[1];\n      return {\n        ...acc,\n        [payloadKey]: message,\n      };\n    }, {})) ||\n  {};\n\nDEMO_API_CONFIGURATION_CALL({\n  request: {\n    params: { id: 1 },\n    query: { skip: 10, age: [20, 20] },\n    paramsSerializer: { arrayFormat: "bracket" }, //default: none - refer query-string npm package\n    axiosConfig: {\n      responseType: "application/json",\n    },\n  },\n  callback: {\n    successCallback: ({ res, data, message, status }) => {\n      // handle toast or call any other api\n    },\n    errorCallback: ({\n      error,\n      errorData: responseErrorParser,\n      message,\n      status,\n      errors,\n    }) => {\n      // handle toast or call any other api\n    },\n    finalCallback: () => {\n      // this will get triggers for both api success or failure\n    },\n  },\n});\n')),Object(s.b)("h3",{id:"-things-to-remember"},Object(s.b)("strong",{parentName:"h3"},"# Things to Remember")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"1. Every actions has four keys they are tasks or task,request,callback,filter\n2. tasks - for handling multiple tasks (you will find later in this documentation)\n3. task - for handling single task (you will find later in this documentation)\n4. request - for api request.It supports 5 keys they are query,params,payload,axiosConfig,    paramsSerializer.\n5. filter - for handling different kind of data in same api (you will find later in this documentation)\n6. callback - use for handling success or failure\n7. Either you can use task or tasks,cannot use both at the same time.\n8. If you use both tasks will be taken as priority.\n")),Object(s.b)("h2",{id:"-manually-storing-data-by-calling-custom-task"},"# Manually storing data by calling custom task"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{})," Note:\n   - Don't worry about terms Manually,Automatically, its just the common word we used in the real world.\n   - The way how it stores or handles data i specified as manually, automatically thats it.You will get used to it.\n")),Object(s.b)("h2",{id:"-1"}),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"Note:\n   - Automatically -> It will handle api calls and stores data and also handles all the errors, success, loaders...etc\n")),Object(s.b)("h2",{id:"-2"}),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"Note:\n    - Manually -> It will slight different instead of api calls we are manually storing or updating data.\n    - This util function will help you update data in particular reducer.\n    - Also useful for doing various tasks without calling api\n")),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { HOC, commonConstants, store } from "react-boilerplate-redux-saga-hoc";\n\nconst { ON_SUCCESS } = commonConstants;\nconst { DEMO_API_CONFIGURATION_CUSTOM_TASK } = props;\n\nDEMO_API_CONFIGURATION_CUSTOM_TASK(ON_SUCCESS, {\n  task: {\n    name: "Data-Handler",\n    response: {\n      data: {\n        commet: "This handler will help you to store data",\n        name: "Example",\n        age: 20,\n      },\n    },\n  },\n});\n')),Object(s.b)("h3",{id:"-things-to-remember-1"},"# Things to Remember"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"  - Handlers are most important util for manupulating data and also for managing data in the reducer\n - There are almost 7 build in handlers are available (You will find later in this documentation)\n - Also if you want can create a own custom handler for executing your task\n")),Object(s.b)("h2",{id:"-getting-data-from-store"},"# Getting Data from store"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"  Note:\n  - We are almost done with basic setup, api calls, storing data...etc.\n  - Now the main things we have to retrieve the data from the reducer.\n  - Don't Worry that is very much simpler than other task.\n")),Object(s.b)("h2",{id:"-3"}),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import { useMemo } from "react";\nimport { useQuery } from "react-boilerplate-redux-saga-hoc";\nconst {\n  Auth_hoc: {\n    reducerName,\n    reducerConstants: { DEMO_API_CONFIGURATION },\n  },\n} = props;\n\nconst { loader, data, lastUpdated, isInfinite, infiniteEnd } = useQuery(\n  reducerName,\n  DEMO_API_CONFIGURATION\n);\n')),Object(s.b)("p",null,"Next - ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"/react-boilerplate-redux-saga-hoc-docs/docs/basic-concepts/updating-data"}),"Updating Data")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Basic Concepts/1.Storing Data.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-basic-concepts-1-storing-data-mdx-83a4c406add6896b8704.js.map