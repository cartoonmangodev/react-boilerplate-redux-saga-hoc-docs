(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{EK0t:function(n,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return o})),t.d(e,"default",(function(){return l}));var a=t("Fcif"),s=t("+I+c"),i=(t("mXGw"),t("/FXl")),m=t("TjRS"),o=(t("aD51"),{});void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/docs/Advanced Concepts/10.handling-multiple-task.mdx"}});var r={_frontmatter:o},c=m.a;function l(n){var e=n.components,t=Object(s.a)(n,["components"]);return Object(i.b)(c,Object(a.a)({},r,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"-handling-multiple-tasks"},"# Handling Multiple tasks"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript",metastring:"{.line-numbers}","{.line-numbers}":!0}),'// hooks/customHook.js\nimport { useEffect, useMemo } from "react";\n\nexport default (\n  {\n    Auth_hoc: {\n      actions: { TEST_API_CUSTOM_TASK, TEST_SUB_API_CUSTOM_TASK },\n    },\n    Auth_data: { TEST_API, TEST_SUB_API },\n    getData,\n  },\n  { commonConstants }\n) => {\n  const { ON_SUCCESS } = commonConstants;\n  useEffect(() => {\n    TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n      task: {\n        response: {\n          data: {\n            items: [\n              {\n                name: "cartoon",\n              },\n            ],\n          },\n        },\n      },\n    });\n    TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n      task: {\n        response: {\n          data: {\n            count: 20,\n          },\n        },\n      },\n    });\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: "Infinite-handler",\n          subKey: ["items"],\n          response: {\n            data: {\n              count: 50,\n              items: [\n                {\n                  name: "mango",\n                },\n              ],\n            },\n          },\n        },\n      });\n    }, 1);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: "Delete-Handler",\n          subKey: ["items"],\n          id: "cartoon",\n          key: "name",\n        },\n      });\n    }, 2);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: "Delete-Key-Handler",\n          subKey: ["items"],\n          id: "mango",\n          key: "name",\n          deleteKey: ["name"],\n        },\n      });\n    }, 3);\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        task: {\n          name: "Data-Handler", // no need specify name if you are using data handler it ia default handler\n          resonse: {\n            data: {\n              count: 100,\n              items: [\n                {\n                  name: "1",\n                },\n                {\n                  name: "2",\n                },\n                {\n                  name: "3",\n                },\n                {\n                  name: "4",\n                },\n              ],\n            },\n          },\n        },\n      });\n    }, 4);\n    // Handling multiple tasks of same api in on action\n    setTimeout(() => {\n      TEST_SUB_API_CUSTOM_TASK(ON_SUCCESS, {\n        tasks: [\n          {\n            task: {\n              name: "Infinite-Handler",\n              clearData: true,\n              response: {\n                data: {\n                  count: 30,\n                  items: [\n                    { name: "10" },\n                    { name: "15" },\n                    { name: "25" },\n                    { name: "35" },\n                    { name: "45" },\n                  ],\n                },\n              },\n            },\n            filter: ["check"],\n          },\n          {\n            task: {\n              name: "Delete-Handler",\n              subKey: ["items"],\n              id: "1",\n              key: "name",\n            },\n            filter: ["check"],\n          },\n          {\n            task: {\n              name: "Infinite-Handler",\n              subKey: ["items"],\n              //   clearData: true,\n              response: {\n                data: {\n                  count: 300,\n                  items: [{ name: "54" }],\n                  data: [{ name: "54" }],\n                },\n              },\n            },\n            filter: ["check"],\n          },\n          {\n            task: {\n              name: "Delete-Handler",\n              subKey: ["items"],\n              id: ["3", "4", "5"],\n              key: "name",\n            },\n            filter: ["check"],\n          },\n          {\n            task: {\n              name: "Update-Handler",\n              subKey: ["items"],\n              id: ["10", "25", "15"],\n              key: "name",\n              values: {\n                "10": {\n                  status: "married",\n                },\n                "25": {\n                  status: "unmarried",\n                },\n                "15": {\n                  status: "married",\n                },\n              },\n              response: {\n                data: {\n                  count: 30,\n                  limit: 20,\n                },\n              },\n            },\n            filter: ["check"],\n          },\n          {\n            task: {\n              name: "Delete-Key-Handler",\n              subKey: ["items"],\n              id: ["10"],\n              key: "name",\n              filter: ["check"],\n              deleteKey: ["name"],\n            },\n          },\n          {\n            task: {\n              name: "Toggle-Key-Handler",\n              subKey: ["items"],\n              id: ["15"],\n              key: "name",\n              filter: ["check"],\n              toggleKey: ["name", "status"],\n            },\n          },\n        ],\n        filter: [["name"], ["chrisie"]], // this is common filter for task if you dont specify filter inside task it will use this filter\n        response: {}, // this is common response for task if you dont specify response inside task it will use this response\n      });\n    }, 5);\n  }, []);\n  const test = useMemo(() => getData(TEST_API, {}, false), [TEST_API]);\n  const test_sub = useMemo(() => getData(TEST_SUB_API, {}, false), [\n    TEST_SUB_API,\n  ]);\n  return {\n    test,\n    test_sub,\n  };\n};\n')))}void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/docs/Advanced Concepts/10.handling-multiple-task.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-docs-advanced-concepts-10-handling-multiple-task-mdx-ae8e9f7ac6ec98546238.js.map