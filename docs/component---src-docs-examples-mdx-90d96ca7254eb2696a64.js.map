{"version":3,"sources":["webpack:///../src/docs/Examples.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---src-docs-examples-mdx-90d96ca7254eb2696a64.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/ats/Desktop/cartoon-mango/docz-app-with-algolia-search/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"basic-example\"\n    }}>{`Basic Example`}</h1>\n    <h2 {...{\n      \"id\": \"-creating-config-file\"\n    }}>{`# creating config file`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* config.js */\nimport { HOC as HocConfigure } from \"react-boilerplate-redux-saga-hoc\";\n\nconst HOC = HocConfigure({\n  handlers: [],\n  useHocHook: true,\n});\n\nconst TEST_GET_API =\n  \"https://jsonplaceholder.typicode.com/posts/\"; /* Default method GET */\n\nconst TEST_GET_BY_ID_API = ({ id }) =>\n  \\`https://jsonplaceholder.typicode.com/posts/\\${id}\\`; /* Default method GET */\n\nconst TEST_POSTS_API = {\n  url: \"https://jsonplaceholder.typicode.com/posts/\",\n  method: \"POST\",\n};\n\nconst TEST_WITH_CONFIG_API = {\n  url: \"https://jsonplaceholder.typicode.com/posts/\",\n  method: \"GET\",\n  responseStatusCode: [900] /* optional */,\n  responseStatusCodeKey: \"code\" /* optional */,\n  responseDataKey: \"data\" /* optional */,\n  responseMessageKey: \"message\" /* optional */,\n};\nconst HOC = HocConfigure({ handlers: [] });\nconst useAuthHoc = HOC({\n  initialState: {\n    profile: {},\n  },\n  useHook: true /* This will avoid unwanted rendering on every state changes */,\n  dontReset: {\n    TEST_GET_API /* If you pass anything on don't reset it wont reset the paricular state on setting to reset */,\n  },\n  apiEndPoints: { TEST_GET_API, TEST_POSTS_API, TEST_WITH_CONFIG_API },\n  constantReducer: ({ type, state, resetState }) => {\n    /* For handling custom action */\n    if (type === \"logout\") return resetState;\n    return state;\n  },\n  name: \"Auth\" /* Reducer name */,\n});\n\nexport { useAuthHoc };\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-connecting-hoc-to-component-and-making-api-calls\"\n    }}>{`# connecting hoc to component and making api calls`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_API },\n    reducerName,\n    actions: { TEST_GET_API_CALL, TEST_GET_API_CANCEL },\n  } = useAuthHoc();\n\n  /* useQuery hook for getting data from the reducer */\n\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_API]);\n\n  useEffect(() => {\n    TEST_GET_API_CALL();\n    return () => TEST_GET_API_CANCEL(); /* for cancelling api on unmounting */\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n\nexport default basicExample;\n/*\n   export default compose(AuthHoc)(basicExample);\n   can connect this hoc without using hook by disabling useHocHook to false in Hoc Configure (./config.js)\n    const HOC = HocConfigure({\n      handlers: [],\n      useHocHook: false, // default false\n    });\n*/\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-using-usequery-hook-in-different-ways\"\n    }}>{`# using useQuery hook in different ways`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* accessing multiple data  at single query */\nconst [test_data, test, test_deep, testGetApi] = useQuery(\n  reducerName /* can pass any reducer key such as 'Auth' , 'router' , ..etc*/,\n  [\n    {\n      key: TEST_GET_API,\n      name: \"test\",\n      initialLoaderState: true,\n    },\n    {\n      key: TEST_GET_API,\n      query: \".data[0]\",\n      initialLoaderState: false,\n    },\n    {\n      key: TEST_GET_API,\n      query: \".data\",\n      initialLoaderState: false,\n      default: [], // Default for data key it also check's type of data..if type is object return [].Don't pass if you dont want to type check\n    },\n    TEST_GET_API,\n  ]\n);\n\n/* query can be used in different ways based on your requirement */\n\nconst [data, loader] = useQuery(\n  reducerName, // can pass any reducer key such as 'Auth' , 'router' , ..etc\n  TEST_GET_API,\n  [\n    {\n      query: \".data[0]\",\n      default: [],\n    },\n    {\n      query: \".loader\",\n      default: false,\n    },\n  ]\n);\n\n/* pass array of string instead of object */\n\nconst [\n  { loader, data, lastUpdated, isError, error, toast },\n] = useQuery(reducerName, [TEST_GET_API]);\n\n/* Pass an object instead of array */\nconst data = useQuery(reducerName, {\n  key: TEST_GET_API,\n  default: [],\n  requiredKey: [\"loader\", \"data\", \"lastUpdated\"],\n});\n\n/* pass a string insted of array */\nconst { loader, data, lastUpdated, isError, error, toast } = useQuery(\n  reducerName,\n  TEST_GET_API\n);\n\n/* Pass a config as a third parameter its optional */\nconst data = useQuery(reducerName, TEST_GET_API, {\n  query: \".data\",\n  default: [],\n});\n\n/* for getting whole reducer data */\nconst data = useQuery(); // Don't use this use this until its required it will render the component every time reducer change\nconst data = useQuery(reducerName); // Don't use this until its required it will render the component every time reducer data change\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-calling-api\"\n    }}>{`# calling api`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_API },\n    reducerName,\n    actions: { TEST_GET_API_CALL, TEST_GET_API_CANCEL },\n  } = useAuthHoc();\n\n  /* useQuery hook for getting data from the reducer */\n\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_API]);\n\n  useEffect(() => {\n    TEST_GET_API_CALL();\n    return () => TEST_GET_API_CANCEL(); /* for cancelling api on unmounting */\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-calling-api-by-passing-params\"\n    }}>{`# calling api by passing params`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n\n  /* useQuery hook for getting data from the reducer */\n\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      request: {\n        id: 1,\n      },\n    });\n    return () => TEST_GET_API_CANCEL(); /* for cancelling api on unmounting */\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-mutate-reducer-value\"\n    }}>{`# mutate reducer value`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const mutate = useMutation(reducerName);\n  /* useMutation hook for modifying data in the reducer */\n\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      request: {\n        params: { id: 1 },\n      },\n    });\n    setTimeout(() => {\n      mutate({\n        key: TEST_GET_BY_ID_API,\n        value: {\n          data: [{ title: \"movie\" }],\n        },\n      });\n    }, 3000);\n    return () => TEST_GET_API_CANCEL(); /* for cancelling api on unmounting */\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-passing-query-params\"\n    }}>{`# passing query params`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      request: {\n        query: { id: 1 },\n      },\n    });\n    return () => TEST_GET_API_CANCEL(); /* for cancelling api on unmounting */\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-cancelling-api-call-or-polling\"\n    }}>{`# Cancelling Api call or polling`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    actions: { TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n\n  useEffect(() => {\n    return () => TEST_GET_API_CANCEL(); /* for cancelling api on unmounting */\n  }, []);\n\n  return <div />;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-accessing-data-using-usequery\"\n    }}>{`# accessing data using useQuery`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      request: {\n        query: { id: 1 },\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-using-data-handler-for-storing-data\"\n    }}>{`# using data-handler for storing data`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Data-Handler\",\n      },\n      request: {\n        query: { id: 1 },\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-using-infinite-handler-for-infinite-scrolling\"\n    }}>{`# using Infinite-handler for infinite scrolling`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Infinite-handler\",\n        isAppendTop: false, // default will be false\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-clearing-old-data-before-storing-new-data\"\n    }}>{`# clearing old Data before storing new Data`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Infinite-handler\",\n        clearData: page === 1 ? true : false,\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-storing-data-in-deep-keys-using-subkey\"\n    }}>{`# storing data in deep keys using subKey`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Infinite-handler\",\n        subKey: [\"items\"], // it will store the data inside items in the reducer\n        clearData: page === 1 ? true : false,\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-deleting-paricular-data-in-an-array-using-delete-handler\"\n    }}>{`# Deleting paricular data in an array using Delete-Handler`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Delete-Handler\",\n        id: [2, 3], // delete items id\n        key: \"id\",\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-deleting-paricular-key-in-an-array-of-objects-using-delete-key-handler\"\n    }}>{`# Deleting paricular key in an array of objects using Delete-Key-Handler`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Delete-Key-Handler\",\n        id: [2, 3], // delete items id\n        key: \"id\",\n        deleteKey: [\"name\", [\"team\", \"name\"]],\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-paricular-object-in-an-array-of-objects-using-update-handler\"\n    }}>{`# Update paricular object in an array of objects using update handler`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Update-Handler\",\n        id: [2, 3], // delete items id\n        key: \"id\",\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-paricular-key-in-an-array-of-objects-using-update-key-handler\"\n    }}>{`# Update paricular key in an array of objects using update key handler`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Update-Key-Handler\",\n        id: [2, 3],\n        key: \"id\",\n        updateKey: [\"order_status\"],\n        values: [{ order_status: \"delivered\" }],\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-paricular-object-in-an-array-of-objects-using-update-handler-1\"\n    }}>{`# Update paricular object in an array of objects using update handler`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: {\n        name: \"Update-Handler\",\n        id: [2, 3], // delete items id\n        key: \"id\",\n      },\n    });\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-polling-data\"\n    }}>{`# Polling Data`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      request: {\n        polling: true,\n        delay: 8000, // default is 8000 milliseconds\n        pollingCount: 30, // max count default will be 'unlimited' dont pass if you dont want to stop polling\n      },\n      callback: {\n        pollingCallback({ count, response, status, message }) {\n          // this will pass the query parameters to the next call\n          if (count > 2)\n            return {\n              query: {\n                status: \"ongoing\",\n              },\n            };\n          else if (status === 902) {\n            return false; // this will stop polling\n          }\n        },\n      },\n    });\n    return () => TEST_GET_BY_ID_API_CANCEL(); // this stop the polling on unmount\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-modifying-task-on-success\"\n    }}>{`# Modifying task on success`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: \"Infinite-Handler\",\n      callback: {\n        successCallback({ status, data }) {\n          if (status === 902)\n            return {\n              task: {\n                name: \"Data-Handler\",\n                response: {\n                  data: data.concat([{ id: 400 }]),\n                },\n              },\n            };\n        },\n      },\n    });\n    return () => TEST_GET_BY_ID_API_CANCEL(); // this stop the polling on unmount\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-on-success-callback\"\n    }}>{`# on success callback`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: \"Infinite-Handler\",\n      callback: {\n        successCallback({ status, data }) {\n          if (status === 902) toast(\"Successfully updated\");\n        },\n      },\n    });\n    return () => TEST_GET_BY_ID_API_CANCEL(); // this stop the polling on unmount\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-on-error-callback\"\n    }}>{`# on Error callback`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: \"Infinite-Handler\",\n      callback: {\n        errorCallback({ status, data }) {\n          if (status === 902) toast(\"Error while updating\");\n        },\n      },\n    });\n    return () => TEST_GET_BY_ID_API_CANCEL(); // this stop the polling on unmount\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-update-callback\"\n    }}>{`# update callback`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      task: \"Infinite-Handler\",\n      callback: {\n        updateCallback(previousData, successData) {\n          return previousData.concat(successData);\n        },\n      },\n    });\n    return () => TEST_GET_BY_ID_API_CANCEL(); // this stop the polling on unmount\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-final-callback-for-handling-loaderscancel\"\n    }}>{`# final callback for handling loaders,cancel`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_GET_BY_ID_API_CALL, TEST_GET_BY_ID_API_CANCEL },\n  } = useAuthHoc();\n  const [loader, setLoader] = useState(true);\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_GET_BY_ID_API_CALL({\n      callback: {\n        finalCallback({ Cancelled }) {\n          if (Cancelled) toast(\"Update cancelled\");\n          setLoader(false);\n        },\n      },\n    });\n    return () => TEST_GET_BY_ID_API_CANCEL(); // this stop the polling on unmount\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-updating-other-reducer-by-calling-api---updatedatareducerkey\"\n    }}>{`# Updating other reducer by calling api - (updateDataReducerKey)`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: { TEST_PUT_API_CALL, TEST_PUT_API_CANCEL },\n  } = useAuthHoc();\n  const [loader, setLoader] = useState(true);\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_PUT_API_CALL({\n      task: {\n        name:\n          orderStatus[order_status] === \"delivered\"\n            ? \"Delete-Handler\"\n            : \"Update-Key-Handler\",\n        id: [id],\n        key: \"id\",\n        updateKey: [\"order_status\"],\n        values: [{ order_status: orderStatus[order_status] }],\n      },\n      updateDataReducerKey: TEST_GET_BY_ID_API,\n      request: {\n        payload: { order_status: orderStatus[order_status] },\n        params: { orderId: id },\n      },\n      callback: {\n        successCallback() {\n          setShowModal(false);\n        },\n      },\n    });\n    return () => TEST_GET_BY_ID_API_CANCEL(); // this stop the polling on unmount\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"-updating-other-reducer-by-calling-api-using-customtask\"\n    }}>{`# Updating other reducer by calling api using customTask`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/* basic-example.js */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  HOC as HocConfigure,\n  useQuery,\n  useMutation,\n  commonConstants,\n} from \"react-boilerplate-redux-saga-hoc\";\nimport { compose } from \"redux\";\nimport { useAuthHoc } from \"./config\";\n\nfunction basicExample(props) {\n  const {\n    reducerConstants: { TEST_GET_BY_ID_API },\n    reducerName,\n    actions: {\n      TEST_PUT_API_CALL,\n      TEST_PUT_API_CANCEL,\n      TEST_GET_BY_ID_API_CUSTOM_TASK,\n    },\n  } = useAuthHoc();\n  const [loader, setLoader] = useState(true);\n  const { ON_SUCCESS } = commonConstants;\n  /* useQuery hook for getting data from the reducer */\n  const [page, setPage] = useState(1);\n  const [\n    { loader, data, lastUpdated, isError, error, toast },\n  ] = useQuery(reducerName, [TEST_GET_BY_ID_API]);\n\n  useEffect(() => {\n    TEST_PUT_API_CALL({\n      request: {\n        payload: { order_status: orderStatus[order_status] },\n        params: { orderId: id },\n      },\n      callback: {\n        successCallback() {\n          TEST_GET_BY_ID_API_CUSTOM_TASK(ON_SUCCESS, {\n            task: {\n              name:\n                orderStatus[order_status] === \"delivered\"\n                  ? \"Delete-Handler\"\n                  : \"Update-Key-Handler\",\n              id: [id],\n              key: \"id\",\n              updateKey: [\"order_status\"],\n              values: [{ order_status: orderStatus[order_status] }],\n            },\n          });\n          setShowModal(false);\n        },\n      },\n    });\n    return () => TEST_GET_BY_ID_API_CANCEL(); // this stop the polling on unmount\n  }, []);\n\n  return <div>{data.map({ title }(<li>{title}</li>))}</div>;\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}